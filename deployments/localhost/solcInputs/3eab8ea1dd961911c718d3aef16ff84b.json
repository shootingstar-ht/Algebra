{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/AlgebraCommunityVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport './interfaces/IAlgebraFactory.sol';\r\nimport './libraries/SafeTransfer.sol';\r\n\r\n/// @title Algebra community fee vault\r\n/// @notice Community fee from pools is sent here, if it is enabled\r\ncontract AlgebraCommunityVault {\r\n  event TokensWithdrawal(address indexed token, address indexed to, uint256 amount);\r\n\r\n  /// @dev The role can be granted in AlgebraFactory\r\n  bytes32 public constant COMMUNITY_FEE_WITHDRAWER_ROLE = keccak256('COMMUNITY_FEE_WITHDRAWER');\r\n  address private immutable factory;\r\n\r\n  modifier onlyWithdrawer() {\r\n    require(IAlgebraFactory(factory).hasRoleOrOwner(COMMUNITY_FEE_WITHDRAWER_ROLE, msg.sender));\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    factory = msg.sender;\r\n  }\r\n\r\n  function withdraw(address token, address to, uint256 amount) external onlyWithdrawer {\r\n    _withdraw(token, to, amount);\r\n  }\r\n\r\n  struct WithdrawTokensParams {\r\n    address token;\r\n    address to;\r\n    uint256 amount;\r\n  }\r\n\r\n  function withdrawTokens(WithdrawTokensParams[] calldata params) external onlyWithdrawer {\r\n    uint256 paramsLength = params.length;\r\n    unchecked {\r\n      for (uint256 i; i < paramsLength; ++i) _withdraw(params[i].token, params[i].to, params[i].amount);\r\n    }\r\n  }\r\n\r\n  function _withdraw(address token, address to, uint256 amount) private {\r\n    SafeTransfer.safeTransfer(token, to, amount);\r\n    emit TokensWithdrawal(token, to, amount);\r\n  }\r\n}\r\n"
    },
    "contracts/AlgebraPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.17;\npragma abicoder v1;\n\nimport './interfaces/IDataStorageOperator.sol';\n\nimport './base/AlgebraPoolBase.sol';\nimport './base/DerivedState.sol';\nimport './base/ReentrancyGuard.sol';\nimport './base/Positions.sol';\nimport './base/LimitOrderPositions.sol';\nimport './base/SwapCalculation.sol';\nimport './base/ReservesManager.sol';\nimport './base/TickStructure.sol';\n\nimport './libraries/FullMath.sol';\nimport './libraries/Constants.sol';\nimport './libraries/SafeTransfer.sol';\nimport './libraries/SafeCast.sol';\nimport './libraries/TickMath.sol';\nimport './libraries/LiquidityMath.sol';\n\nimport './interfaces/IAlgebraFactory.sol';\nimport './interfaces/callback/IAlgebraMintCallback.sol';\nimport './interfaces/callback/IAlgebraFlashCallback.sol';\n\n/// @title Algebra concentrated liquidity pool\n/// @notice This contract is responsible for liquidity positions, swaps and flashloans\n/// @dev Version: Algebra V2.1\ncontract AlgebraPool is\n  AlgebraPoolBase,\n  DerivedState,\n  ReentrancyGuard,\n  Positions,\n  LimitOrderPositions,\n  SwapCalculation,\n  ReservesManager,\n  TickStructure\n{\n  using SafeCast for uint256;\n\n  /// @inheritdoc IAlgebraPoolActions\n  function initialize(uint160 initialPrice) external override {\n    if (globalState.price != 0) revert alreadyInitialized(); // after initialization, the price can never become zero\n    int24 tick = TickMath.getTickAtSqrtRatio(initialPrice); // getTickAtSqrtRatio checks validity of initialPrice inside\n    IDataStorageOperator(dataStorageOperator).initialize(_blockTimestamp(), tick);\n    lastTimepointTimestamp = _blockTimestamp();\n\n    globalState.price = initialPrice;\n    globalState.communityFee = IAlgebraFactory(factory).defaultCommunityFee();\n    globalState.unlocked = true;\n    globalState.tick = tick;\n\n    emit Initialize(initialPrice, tick);\n  }\n\n  /// @inheritdoc IAlgebraPoolActions\n  function mint(\n    address sender,\n    address recipient,\n    int24 bottomTick,\n    int24 topTick,\n    uint128 liquidityDesired,\n    bytes calldata data\n  ) external override nonReentrant onlyValidTicks(bottomTick, topTick) returns (uint256 amount0, uint256 amount1, uint128 liquidityActual) {\n    if (liquidityDesired == 0) revert zeroLiquidityDesired();\n    unchecked {\n      int24 _tickSpacing = bottomTick == topTick ? tickSpacingLimitOrders : tickSpacing;\n      if (bottomTick % _tickSpacing | topTick % _tickSpacing != 0 || _tickSpacing == type(int24).max) revert tickIsNotSpaced();\n    }\n    if (bottomTick == topTick) {\n      (amount0, amount1) = bottomTick > globalState.tick ? (uint256(liquidityDesired), uint256(0)) : (uint256(0), uint256(liquidityDesired));\n    } else {\n      (amount0, amount1, ) = LiquidityMath.getAmountsForLiquidity(bottomTick, topTick, int128(liquidityDesired), globalState.tick, globalState.price);\n    }\n\n    (uint256 receivedAmount0, uint256 receivedAmount1) = _updateReserves(false);\n    IAlgebraMintCallback(msg.sender).algebraMintCallback(amount0, amount1, data);\n\n    receivedAmount0 = amount0 == 0 ? 0 : _balanceToken0() - receivedAmount0;\n    receivedAmount1 = amount1 == 0 ? 0 : _balanceToken1() - receivedAmount1;\n\n    // scope to prevent \"stack too deep\"\n    {\n      Position storage _position = getOrCreatePosition(recipient, bottomTick, topTick);\n      if (bottomTick == topTick) {\n        liquidityActual = receivedAmount0 > 0 ? uint128(receivedAmount0) : uint128(receivedAmount1);\n        if (liquidityActual == 0) revert insufficientInputAmount();\n        _updateLimitOrderPosition(_position, bottomTick, int128(liquidityActual));\n      } else {\n        if (receivedAmount0 < amount0) {\n          liquidityActual = uint128(FullMath.mulDiv(uint256(liquidityDesired), receivedAmount0, amount0));\n        } else {\n          liquidityActual = liquidityDesired;\n        }\n        if (receivedAmount1 < amount1) {\n          uint128 liquidityForRA1 = uint128(FullMath.mulDiv(uint256(liquidityDesired), receivedAmount1, amount1));\n          if (liquidityForRA1 < liquidityActual) liquidityActual = liquidityForRA1;\n        }\n        if (liquidityActual == 0) revert zeroLiquidityActual();\n\n        (amount0, amount1) = _updatePositionTicksAndFees(_position, bottomTick, topTick, int128(liquidityActual));\n      }\n    }\n\n    unchecked {\n      if (amount0 > 0) {\n        if (receivedAmount0 > amount0) SafeTransfer.safeTransfer(token0, sender, receivedAmount0 - amount0);\n        else if (receivedAmount0 != amount0) revert insufficientAmountReceivedAtMint();\n      }\n\n      if (amount1 > 0) {\n        if (receivedAmount1 > amount1) SafeTransfer.safeTransfer(token1, sender, receivedAmount1 - amount1);\n        else if (receivedAmount1 != amount1) revert insufficientAmountReceivedAtMint();\n      }\n    }\n\n    _changeReserves(int256(amount0), int256(amount1), 0, 0);\n    emit Mint(msg.sender, recipient, bottomTick, topTick, liquidityActual, amount0, amount1);\n  }\n\n  /// @inheritdoc IAlgebraPoolActions\n  function burn(\n    int24 bottomTick,\n    int24 topTick,\n    uint128 amount\n  ) external override nonReentrant onlyValidTicks(bottomTick, topTick) returns (uint256 amount0, uint256 amount1) {\n    if (amount > uint128(type(int128).max)) revert arithmeticError();\n    _updateReserves(false);\n    Position storage position = getOrCreatePosition(msg.sender, bottomTick, topTick);\n\n    int128 liquidityDelta = -int128(amount);\n    (amount0, amount1) = (bottomTick == topTick)\n      ? _updateLimitOrderPosition(position, bottomTick, liquidityDelta)\n      : _updatePositionTicksAndFees(position, bottomTick, topTick, liquidityDelta);\n\n    if (amount0 | amount1 != 0) {\n      (position.fees0, position.fees1) = (position.fees0 + uint128(amount0), position.fees1 + uint128(amount1));\n    }\n\n    if (amount | amount0 | amount1 != 0) emit Burn(msg.sender, bottomTick, topTick, amount, amount0, amount1);\n  }\n\n  /// @inheritdoc IAlgebraPoolActions\n  function collect(\n    address recipient,\n    int24 bottomTick,\n    int24 topTick,\n    uint128 amount0Requested,\n    uint128 amount1Requested\n  ) external override nonReentrant returns (uint128 amount0, uint128 amount1) {\n    // we don't check tick range validity, because if ticks are incorrect, the position will be empty\n    Position storage position = getOrCreatePosition(msg.sender, bottomTick, topTick);\n    (uint128 positionFees0, uint128 positionFees1) = (position.fees0, position.fees1);\n\n    if (amount0Requested > positionFees0) amount0Requested = positionFees0;\n    if (amount1Requested > positionFees1) amount1Requested = positionFees1;\n\n    if (amount0Requested | amount1Requested != 0) {\n      // use one if since fees0 and fees1 are tightly packed\n      (amount0, amount1) = (amount0Requested, amount1Requested);\n\n      unchecked {\n        // single SSTORE\n        (position.fees0, position.fees1) = (positionFees0 - amount0, positionFees1 - amount1);\n\n        if (amount0 > 0) SafeTransfer.safeTransfer(token0, recipient, amount0);\n        if (amount1 > 0) SafeTransfer.safeTransfer(token1, recipient, amount1);\n        _changeReserves(-int256(uint256(amount0)), -int256(uint256(amount1)), 0, 0);\n      }\n      emit Collect(msg.sender, recipient, bottomTick, topTick, amount0, amount1);\n    }\n  }\n\n  /// @inheritdoc IAlgebraPoolActions\n  function swap(\n    address recipient,\n    bool zeroToOne,\n    int256 amountRequired,\n    uint160 limitSqrtPrice,\n    bytes calldata data\n  ) external override nonReentrant returns (int256 amount0, int256 amount1) {\n    uint160 currentPrice;\n    int24 currentTick;\n    uint128 currentLiquidity;\n    uint256 communityFee;\n    (amount0, amount1, currentPrice, currentTick, currentLiquidity, communityFee) = _calculateSwap(zeroToOne, amountRequired, limitSqrtPrice);\n    (uint256 balance0Before, uint256 balance1Before) = _updateReserves(false);\n    if (zeroToOne) {\n      unchecked {\n        if (amount1 < 0) SafeTransfer.safeTransfer(token1, recipient, uint256(-amount1));\n      }\n      _swapCallback(amount0, amount1, data); // callback to get tokens from the caller\n      if (balance0Before + uint256(amount0) > _balanceToken0()) revert insufficientInputAmount();\n      _changeReserves(amount0, amount1, communityFee, 0); // reflect reserve change and pay communityFee\n    } else {\n      unchecked {\n        if (amount0 < 0) SafeTransfer.safeTransfer(token0, recipient, uint256(-amount0));\n      }\n      _swapCallback(amount0, amount1, data); // callback to get tokens from the caller\n      if (balance1Before + uint256(amount1) > _balanceToken1()) revert insufficientInputAmount();\n      _changeReserves(amount0, amount1, 0, communityFee); // reflect reserve change and pay communityFee\n    }\n\n    emit Swap(msg.sender, recipient, amount0, amount1, currentPrice, currentLiquidity, currentTick);\n  }\n\n  /// @inheritdoc IAlgebraPoolActions\n  function swapSupportingFeeOnInputTokens(\n    address sender,\n    address recipient,\n    bool zeroToOne,\n    int256 amountRequired,\n    uint160 limitSqrtPrice,\n    bytes calldata data\n  ) external override nonReentrant returns (int256 amount0, int256 amount1) {\n    if (amountRequired < 0) revert invalidAmountRequired(); // we support only exactInput here\n\n    // Since the pool can get less tokens then sent, firstly we are getting tokens from the\n    // original caller of the transaction. And change the _amountRequired_\n    {\n      // scope to prevent \"stack too deep\"\n      (uint256 balance0Before, uint256 balance1Before) = _updateReserves(false);\n      uint256 balanceBefore;\n      uint256 balanceAfter;\n      if (zeroToOne) {\n        _swapCallback(amountRequired, 0, data);\n        (balanceBefore, balanceAfter) = (balance0Before, _balanceToken0());\n      } else {\n        _swapCallback(0, amountRequired, data);\n        (balanceBefore, balanceAfter) = (balance1Before, _balanceToken1());\n      }\n\n      int256 amountReceived = (balanceAfter - balanceBefore).toInt256();\n      if (amountReceived < amountRequired) amountRequired = amountReceived;\n    }\n    if (amountRequired == 0) revert insufficientInputAmount();\n\n    uint160 currentPrice;\n    int24 currentTick;\n    uint128 currentLiquidity;\n    uint256 communityFee;\n    (amount0, amount1, currentPrice, currentTick, currentLiquidity, communityFee) = _calculateSwap(zeroToOne, amountRequired, limitSqrtPrice);\n\n    unchecked {\n      // only transfer to the recipient\n      if (zeroToOne) {\n        if (amount1 < 0) SafeTransfer.safeTransfer(token1, recipient, uint256(-amount1));\n        // return the leftovers\n        if (amount0 < amountRequired) SafeTransfer.safeTransfer(token0, sender, uint256(amountRequired - amount0));\n        _changeReserves(amount0, amount1, communityFee, 0); // reflect reserve change and pay communityFee\n      } else {\n        if (amount0 < 0) SafeTransfer.safeTransfer(token0, recipient, uint256(-amount0));\n        // return the leftovers\n        if (amount1 < amountRequired) SafeTransfer.safeTransfer(token1, sender, uint256(amountRequired - amount1));\n        _changeReserves(amount0, amount1, 0, communityFee); // reflect reserve change and pay communityFee\n      }\n    }\n\n    emit Swap(msg.sender, recipient, amount0, amount1, currentPrice, currentLiquidity, currentTick);\n  }\n\n  /// @inheritdoc IAlgebraPoolActions\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external override nonReentrant {\n    (uint256 balance0Before, uint256 balance1Before) = _updateReserves(false);\n    uint256 fee0;\n    if (amount0 > 0) {\n      fee0 = FullMath.mulDivRoundingUp(amount0, Constants.BASE_FEE, Constants.FEE_DENOMINATOR);\n      SafeTransfer.safeTransfer(token0, recipient, amount0);\n    }\n    uint256 fee1;\n    if (amount1 > 0) {\n      fee1 = FullMath.mulDivRoundingUp(amount1, Constants.BASE_FEE, Constants.FEE_DENOMINATOR);\n      SafeTransfer.safeTransfer(token1, recipient, amount1);\n    }\n\n    IAlgebraFlashCallback(msg.sender).algebraFlashCallback(fee0, fee1, data);\n\n    uint256 paid0 = _balanceToken0();\n    if (balance0Before + fee0 > paid0) revert flashInsufficientPaid0();\n    uint256 paid1 = _balanceToken1();\n    if (balance1Before + fee1 > paid1) revert flashInsufficientPaid1();\n\n    unchecked {\n      paid0 -= balance0Before;\n      paid1 -= balance1Before;\n    }\n    uint256 _communityFee = globalState.communityFee;\n    if (_communityFee > 0) {\n      uint256 communityFee0;\n      if (paid0 > 0) communityFee0 = FullMath.mulDiv(paid0, _communityFee, Constants.COMMUNITY_FEE_DENOMINATOR);\n      uint256 communityFee1;\n      if (paid1 > 0) communityFee1 = FullMath.mulDiv(paid1, _communityFee, Constants.COMMUNITY_FEE_DENOMINATOR);\n\n      _changeReserves(int256(communityFee0), int256(communityFee1), communityFee0, communityFee1);\n    }\n    emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\n  }\n\n  /// @dev using function to save bytecode\n  function _checkIfAdministrator() private view {\n    if (!IAlgebraFactory(factory).hasRoleOrOwner(Constants.POOLS_ADMINISTRATOR_ROLE, msg.sender)) revert notAllowed();\n  }\n\n  /// @inheritdoc IAlgebraPoolPermissionedActions\n  function setCommunityFee(uint8 newCommunityFee) external override nonReentrant {\n    _checkIfAdministrator();\n    if (newCommunityFee > Constants.MAX_COMMUNITY_FEE || newCommunityFee == globalState.communityFee) revert invalidNewCommunityFee();\n    globalState.communityFee = newCommunityFee;\n    /// @dev do not support tokens with totalSupply > type(uint8).max\n    if (newCommunityFee == 8) _updateReserves(true);\n    emit CommunityFee(newCommunityFee);\n  }\n\n  /// @inheritdoc IAlgebraPoolPermissionedActions\n  function setTickSpacing(int24 newTickSpacing, int24 newTickspacingLimitOrders) external override nonReentrant {\n    _checkIfAdministrator();\n    tickSpacing = newTickSpacing;\n    tickSpacingLimitOrders = newTickspacingLimitOrders;\n    emit TickSpacing(newTickSpacing, newTickspacingLimitOrders);\n  }\n\n  /// @inheritdoc IAlgebraPoolPermissionedActions\n  function setIncentive(address newIncentiveAddress) external override {\n    if (msg.sender != IAlgebraFactory(factory).farmingAddress()) revert onlyFarming();\n    activeIncentive = newIncentiveAddress;\n    emit Incentive(newIncentiveAddress);\n  }\n}\n"
    },
    "contracts/AlgebraPoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport './interfaces/IAlgebraPoolDeployer.sol';\r\nimport './AlgebraPool.sol';\r\n\r\n/// @title Algebra pool deployer\r\n/// @notice Is used by AlgebraFactory to deploy pools\r\n/// @dev Version: Algebra V2.1\r\ncontract AlgebraPoolDeployer is IAlgebraPoolDeployer {\r\n  /// @dev two storage slots for dense cache packing\r\n  bytes32 private cache0;\r\n  bytes32 private cache1;\r\n\r\n  address private immutable factory;\r\n  address private immutable communityVault;\r\n\r\n  constructor(address _factory, address _communityVault) {\r\n    require(_factory != address(0) && _communityVault != address(0));\r\n    (factory, communityVault) = (_factory, _communityVault);\r\n  }\r\n\r\n  /// @inheritdoc IAlgebraPoolDeployer\r\n  function getDeployParameters()\r\n    external\r\n    view\r\n    override\r\n    returns (address _dataStorage, address _factory, address _communityVault, address _token0, address _token1)\r\n  {\r\n    (_dataStorage, _token0, _token1) = _readFromCache();\r\n    (_factory, _communityVault) = (factory, communityVault);\r\n  }\r\n\r\n  /// @inheritdoc IAlgebraPoolDeployer\r\n  function deploy(address dataStorage, address token0, address token1) external override returns (address pool) {\r\n    require(msg.sender == factory);\r\n\r\n    _writeToCache(dataStorage, token0, token1);\r\n    pool = address(new AlgebraPool{salt: keccak256(abi.encode(token0, token1))}());\r\n    (cache0, cache1) = (bytes32(0), bytes32(0));\r\n  }\r\n\r\n  /// @notice densely packs three addresses into two storage slots\r\n  function _writeToCache(address dataStorage, address token0, address token1) private {\r\n    assembly {\r\n      // cache0 = [dataStorage, token0[0, 96]], cache1 = [token0[0, 64], 0-s x32 , token1]\r\n      token0 := and(token0, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) // clean higher bits, just in case\r\n      sstore(cache0.slot, or(shr(64, token0), shl(96, and(dataStorage, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))))\r\n      sstore(cache1.slot, or(shl(160, token0), and(token1, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)))\r\n    }\r\n  }\r\n\r\n  /// @notice reads three densely packed addresses from two storage slots\r\n  function _readFromCache() private view returns (address dataStorage, address token0, address token1) {\r\n    (bytes32 _cache0, bytes32 _cache1) = (cache0, cache1);\r\n    assembly {\r\n      dataStorage := shr(96, _cache0)\r\n      token0 := or(shl(64, and(_cache0, 0xFFFFFFFFFFFFFFFFFFFFFFFF)), shr(160, _cache1))\r\n      token1 := and(_cache1, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/base/AlgebraFeeConfiguration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n// coefficients for sigmoids: α / (1 + e^( (β-x) / γ))\r\n// alpha1 + alpha2 + baseFee must be <= type(uint16).max\r\nstruct AlgebraFeeConfiguration {\r\n  uint16 alpha1; // max value of the first sigmoid\r\n  uint16 alpha2; // max value of the second sigmoid\r\n  uint32 beta1; // shift along the x-axis for the first sigmoid\r\n  uint32 beta2; // shift along the x-axis for the second sigmoid\r\n  uint16 gamma1; // horizontal stretch factor for the first sigmoid\r\n  uint16 gamma2; // horizontal stretch factor for the second sigmoid\r\n  uint16 baseFee; // minimum possible fee\r\n}\r\n"
    },
    "contracts/base/AlgebraPoolBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport '../interfaces/callback/IAlgebraSwapCallback.sol';\r\nimport '../interfaces/IAlgebraPool.sol';\r\nimport '../interfaces/IAlgebraPoolDeployer.sol';\r\nimport '../interfaces/IAlgebraPoolErrors.sol';\r\nimport '../interfaces/IDataStorageOperator.sol';\r\nimport '../interfaces/IERC20Minimal.sol';\r\nimport '../libraries/TickManagement.sol';\r\nimport '../libraries/LimitOrderManagement.sol';\r\nimport '../libraries/Constants.sol';\r\nimport './common/Timestamp.sol';\r\n\r\n/// @title Algebra pool base abstract contract\r\n/// @notice Contains state variables, immutables and common internal functions\r\nabstract contract AlgebraPoolBase is IAlgebraPool, IAlgebraPoolErrors, Timestamp {\r\n  using TickManagement for mapping(int24 => TickManagement.Tick);\r\n\r\n  struct GlobalState {\r\n    uint160 price; // The square root of the current price in Q64.96 format\r\n    int24 tick; // The current tick\r\n    int24 prevInitializedTick; // The previous initialized tick in linked list\r\n    uint16 fee; // The current fee in hundredths of a bip, i.e. 1e-6\r\n    uint16 timepointIndex; // The index of the last written timepoint\r\n    uint8 communityFee; // The community fee represented as a percent of all collected fee in thousandths (1e-3)\r\n    bool unlocked; // True if the contract is unlocked, otherwise - false\r\n  }\r\n\r\n  /// @inheritdoc IAlgebraPoolImmutables\r\n  address public immutable override dataStorageOperator;\r\n  /// @inheritdoc IAlgebraPoolImmutables\r\n  address public immutable override factory;\r\n  /// @inheritdoc IAlgebraPoolImmutables\r\n  address public immutable override token0;\r\n  /// @inheritdoc IAlgebraPoolImmutables\r\n  address public immutable override token1;\r\n  /// @inheritdoc IAlgebraPoolImmutables\r\n  address public immutable override communityVault;\r\n\r\n  /// @inheritdoc IAlgebraPoolState\r\n  uint256 public override totalFeeGrowth0Token;\r\n  /// @inheritdoc IAlgebraPoolState\r\n  uint256 public override totalFeeGrowth1Token;\r\n  /// @inheritdoc IAlgebraPoolState\r\n  GlobalState public override globalState;\r\n\r\n  /// @inheritdoc IAlgebraPoolState\r\n  uint128 public override liquidity;\r\n  /// @inheritdoc IAlgebraPoolState\r\n  int24 public override tickSpacing;\r\n  /// @inheritdoc IAlgebraPoolState\r\n  int24 public override tickSpacingLimitOrders;\r\n  /// @inheritdoc IAlgebraPoolState\r\n  uint32 public override communityFeeLastTimestamp;\r\n\r\n  /// @dev The amounts of token0 and token1 that will be sent to the vault\r\n  uint128 internal communityFeePending0;\r\n  uint128 internal communityFeePending1;\r\n\r\n  /// @dev The timestamp of the last timepoint write to the DataStorage\r\n  uint32 internal lastTimepointTimestamp;\r\n  /// @inheritdoc IAlgebraPoolState\r\n  uint160 public override secondsPerLiquidityCumulative;\r\n\r\n  /// @inheritdoc IAlgebraPoolState\r\n  address public override activeIncentive;\r\n\r\n  /// @inheritdoc IAlgebraPoolState\r\n  mapping(int24 => TickManagement.Tick) public override ticks;\r\n  /// @inheritdoc IAlgebraPoolState\r\n  mapping(int24 => LimitOrderManagement.LimitOrder) public override limitOrders;\r\n\r\n  /// @inheritdoc IAlgebraPoolState\r\n  mapping(int16 => uint256) public override tickTable;\r\n\r\n  /// @inheritdoc IAlgebraPoolImmutables\r\n  function maxLiquidityPerTick() external pure override returns (uint128) {\r\n    return Constants.MAX_LIQUIDITY_PER_TICK;\r\n  }\r\n\r\n  /// @inheritdoc IAlgebraPoolState\r\n  function getCommunityFeePending() external view returns (uint128, uint128) {\r\n    return (communityFeePending0, communityFeePending1);\r\n  }\r\n\r\n  modifier onlyValidTicks(int24 bottomTick, int24 topTick) {\r\n    TickManagement.checkTickRangeValidity(bottomTick, topTick);\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    (dataStorageOperator, factory, communityVault, token0, token1) = IAlgebraPoolDeployer(msg.sender).getDeployParameters();\r\n    globalState.fee = Constants.BASE_FEE;\r\n    globalState.prevInitializedTick = TickMath.MIN_TICK;\r\n    tickSpacing = Constants.INIT_TICK_SPACING;\r\n    tickSpacingLimitOrders = Constants.INIT_TICK_SPACING;\r\n  }\r\n\r\n  function _balanceToken0() internal view returns (uint256) {\r\n    return IERC20Minimal(token0).balanceOf(address(this));\r\n  }\r\n\r\n  function _balanceToken1() internal view returns (uint256) {\r\n    return IERC20Minimal(token1).balanceOf(address(this));\r\n  }\r\n\r\n  /// @dev Using function to save bytecode\r\n  function _swapCallback(int256 amount0, int256 amount1, bytes calldata data) internal {\r\n    IAlgebraSwapCallback(msg.sender).algebraSwapCallback(amount0, amount1, data);\r\n  }\r\n\r\n  /// @dev Once per block, writes data to dataStorage and updates the accumulator `secondsPerLiquidityCumulative`\r\n  function _writeTimepoint(\r\n    uint16 timepointIndex,\r\n    uint32 blockTimestamp,\r\n    int24 tick,\r\n    uint128 currentLiquidity\r\n  ) internal returns (uint16 newTimepointIndex, uint16 newFee) {\r\n    uint32 _lastTs = lastTimepointTimestamp;\r\n    if (_lastTs == blockTimestamp) return (timepointIndex, 0); // writing should only happen once per block\r\n\r\n    unchecked {\r\n      // just timedelta if liquidity == 0\r\n      // overflow and underflow are desired\r\n      secondsPerLiquidityCumulative += (uint160(blockTimestamp - _lastTs) << 128) / (currentLiquidity > 0 ? currentLiquidity : 1);\r\n    }\r\n    lastTimepointTimestamp = blockTimestamp;\r\n\r\n    // failure should not occur. But in case of failure, the pool will remain operational\r\n    try IDataStorageOperator(dataStorageOperator).write(timepointIndex, blockTimestamp, tick) returns (uint16 _newTimepointIndex, uint16 _newFee) {\r\n      return (_newTimepointIndex, _newFee);\r\n    } catch {\r\n      emit DataStorageFailure();\r\n      return (timepointIndex, 0);\r\n    }\r\n  }\r\n\r\n  /// @dev Get secondsPerLiquidityCumulative accumulator value for current blockTimestamp\r\n  function _getSecondsPerLiquidityCumulative(uint32 blockTimestamp, uint128 currentLiquidity) internal view returns (uint160 _secPerLiqCumulative) {\r\n    uint32 _lastTs;\r\n    (_lastTs, _secPerLiqCumulative) = (lastTimepointTimestamp, secondsPerLiquidityCumulative);\r\n    unchecked {\r\n      if (_lastTs != blockTimestamp)\r\n        // just timedelta if liquidity == 0\r\n        // overflow and underflow are desired\r\n        _secPerLiqCumulative += (uint160(blockTimestamp - _lastTs) << 128) / (currentLiquidity > 0 ? currentLiquidity : 1);\r\n    }\r\n  }\r\n\r\n  /// @dev Add or remove a tick to the corresponding data structure\r\n  function _insertOrRemoveTick(\r\n    int24 tick,\r\n    int24 currentTick,\r\n    int24 prevInitializedTick,\r\n    bool remove\r\n  ) internal virtual returns (int24 newPrevInitializedTick);\r\n}\r\n"
    },
    "contracts/base/common/Timestamp.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nabstract contract Timestamp {\r\n  /// @dev This function is created for testing by overriding it.\r\n  /// @return A timestamp converted to uint32\r\n  function _blockTimestamp() internal view virtual returns (uint32) {\r\n    return uint32(block.timestamp); // truncation is desired\r\n  }\r\n}\r\n"
    },
    "contracts/base/DerivedState.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport './AlgebraPoolBase.sol';\r\n\r\n/// @title Pool state that is not stored\r\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the blockchain\r\nabstract contract DerivedState is AlgebraPoolBase {\r\n  /// @inheritdoc IAlgebraPoolDerivedState\r\n  function getInnerCumulatives(\r\n    int24 bottomTick,\r\n    int24 topTick\r\n  ) external view override onlyValidTicks(bottomTick, topTick) returns (uint160 innerSecondsSpentPerLiquidity, uint32 innerSecondsSpent) {\r\n    TickManagement.Tick storage _bottomTick = ticks[bottomTick];\r\n    TickManagement.Tick storage _topTick = ticks[topTick];\r\n\r\n    if (_bottomTick.nextTick == _bottomTick.prevTick || _topTick.nextTick == _topTick.prevTick) revert tickIsNotInitialized();\r\n    (uint160 lowerOuterSecondPerLiquidity, uint32 lowerOuterSecondsSpent) = (_bottomTick.outerSecondsPerLiquidity, _bottomTick.outerSecondsSpent);\r\n    (uint160 upperOuterSecondPerLiquidity, uint32 upperOuterSecondsSpent) = (_topTick.outerSecondsPerLiquidity, _topTick.outerSecondsSpent);\r\n\r\n    int24 currentTick = globalState.tick;\r\n    unchecked {\r\n      if (currentTick < bottomTick) {\r\n        return (lowerOuterSecondPerLiquidity - upperOuterSecondPerLiquidity, lowerOuterSecondsSpent - upperOuterSecondsSpent);\r\n      }\r\n\r\n      if (currentTick < topTick) {\r\n        uint32 time = _blockTimestamp();\r\n        return (\r\n          _getSecondsPerLiquidityCumulative(time, liquidity) - lowerOuterSecondPerLiquidity - upperOuterSecondPerLiquidity,\r\n          time - lowerOuterSecondsSpent - upperOuterSecondsSpent\r\n        );\r\n      } else return (upperOuterSecondPerLiquidity - lowerOuterSecondPerLiquidity, upperOuterSecondsSpent - lowerOuterSecondsSpent);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/base/LimitOrderPositions.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/LimitOrderManagement.sol';\r\nimport '../libraries/LowGasSafeMath.sol';\r\nimport '../libraries/TickMath.sol';\r\nimport '../libraries/SafeCast.sol';\r\nimport './Positions.sol';\r\n\r\n/// @title Algebra limit order positions abstract contract\r\n/// @notice Contains the logic of recalculation and change of limit order positions\r\n/// @dev For limit orders positions, the same structure is used as for liquidity positions. However, it is interpreted differently\r\nabstract contract LimitOrderPositions is Positions {\r\n  using LimitOrderManagement for mapping(int24 => LimitOrderManagement.LimitOrder);\r\n  using LowGasSafeMath for uint128;\r\n  using SafeCast for int256;\r\n  using SafeCast for uint256;\r\n\r\n  /**\r\n   * @dev Updates limit order position inner data and applies `amountToSellDelta`\r\n   * @param position The position object to operate with\r\n   * @param tick The tick which price corresponds to the limit order\r\n   * @param amountToSellDelta The amount of token to be added to the sale or subtracted (in case of cancellation)\r\n   * @return amount0 The abs amount of token0 that corresponds to amountToSellDelta\r\n   * @return amount1 The abs amount of token1 that corresponds to amountToSellDelta\r\n   */\r\n  function _updateLimitOrderPosition(\r\n    Position storage position,\r\n    int24 tick,\r\n    int128 amountToSellDelta\r\n  ) internal returns (uint256 amount0, uint256 amount1) {\r\n    _recalculateLimitOrderPosition(position, tick, amountToSellDelta);\r\n\r\n    if (amountToSellDelta != 0) {\r\n      bool remove = amountToSellDelta < 0;\r\n      (int24 currentTick, int24 prevTick) = (globalState.tick, globalState.prevInitializedTick);\r\n\r\n      if (limitOrders.addOrRemoveLimitOrder(tick, currentTick, amountToSellDelta)) {\r\n        // if tick flipped\r\n        TickManagement.Tick storage _tickData = ticks[tick];\r\n        _tickData.hasLimitOrders = !remove;\r\n        if (_tickData.nextTick == _tickData.prevTick) {\r\n          // tick isn't initialized\r\n          int24 newPrevTick = _insertOrRemoveTick(tick, currentTick, prevTick, remove);\r\n          if (newPrevTick != prevTick) globalState.prevInitializedTick = newPrevTick;\r\n        }\r\n      }\r\n\r\n      if (remove) {\r\n        unchecked {\r\n          return (tick > currentTick) ? (uint256(int256(-amountToSellDelta)), uint256(0)) : (uint256(0), uint256(int256(-amountToSellDelta)));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Recalculates how many of the desired amount of tokens have been sold\r\n   * @param position The position object to operate with\r\n   * @param tick The tick which price corresponds to the limit order\r\n   * @param amountToSellDelta The amount of token to be added to the sale or subtracted (in case of cancellation)\r\n   */\r\n  function _recalculateLimitOrderPosition(Position storage position, int24 tick, int128 amountToSellDelta) private {\r\n    uint256 amountToSell;\r\n    uint256 amountToSellInitial;\r\n    unchecked {\r\n      (amountToSell, amountToSellInitial) = (position.liquidity >> 128, uint128(position.liquidity)); // unpack data\r\n    }\r\n    if (amountToSell == 0 && amountToSellDelta == 0) return;\r\n\r\n    LimitOrderManagement.LimitOrder storage _limitOrder = limitOrders[tick];\r\n    unchecked {\r\n      uint256 _cumulativeDelta;\r\n      bool zeroToOne;\r\n      {\r\n        uint256 _bought1Cumulative;\r\n        if (!_limitOrder.initialized) {\r\n          // maker pays for storage slots\r\n          (_limitOrder.boughtAmount0Cumulative, _limitOrder.boughtAmount1Cumulative, _limitOrder.initialized) = (1, 1, true);\r\n          _bought1Cumulative = 1;\r\n        } else {\r\n          _bought1Cumulative = _limitOrder.boughtAmount1Cumulative;\r\n        }\r\n        if (amountToSell == 0) {\r\n          // during initialization, \"1\" is written to the limit order accumulators (boughtAmount{0,1}Cumulative), not zero\r\n          // however, in the future, the accumulators may overflow and become equal to zero\r\n          if (position.innerFeeGrowth0Token == 0) position.innerFeeGrowth0Token = _limitOrder.boughtAmount0Cumulative;\r\n          if (position.innerFeeGrowth1Token == 0) position.innerFeeGrowth1Token = _limitOrder.boughtAmount1Cumulative;\r\n        }\r\n        _cumulativeDelta = _bought1Cumulative - position.innerFeeGrowth1Token;\r\n        zeroToOne = _cumulativeDelta > 0;\r\n        if (!zeroToOne) _cumulativeDelta = _limitOrder.boughtAmount0Cumulative - position.innerFeeGrowth0Token;\r\n      }\r\n\r\n      if (_cumulativeDelta > 0) {\r\n        uint256 boughtAmount;\r\n        if (amountToSellInitial > 0) {\r\n          boughtAmount = FullMath.mulDiv(_cumulativeDelta, amountToSellInitial, Constants.Q128);\r\n          uint256 sqrtPrice = TickMath.getSqrtRatioAtTick(tick);\r\n          // MAX_LIMIT_ORDER_TICK check guarantees that this value does not overflow\r\n          uint256 priceX144 = FullMath.mulDiv(sqrtPrice, sqrtPrice, Constants.Q48);\r\n          (uint256 nominator, uint256 denominator) = zeroToOne ? (priceX144, Constants.Q144) : (Constants.Q144, priceX144);\r\n          uint256 amountToBuy = FullMath.mulDiv(amountToSell, nominator, denominator);\r\n\r\n          if (boughtAmount < amountToBuy) {\r\n            amountToSell = FullMath.mulDiv(amountToBuy - boughtAmount, denominator, nominator); // unspent input\r\n          } else {\r\n            boughtAmount = amountToBuy;\r\n            amountToSell = 0;\r\n          }\r\n        }\r\n        // casts aren't checked since boughtAmount must be <= type(uint128).max (we are not supporting tokens with totalSupply > type(uint128).max)\r\n        if (zeroToOne) {\r\n          position.innerFeeGrowth1Token = position.innerFeeGrowth1Token + _cumulativeDelta;\r\n          if (boughtAmount > 0) position.fees1 = position.fees1.add128(uint128(boughtAmount));\r\n        } else {\r\n          position.innerFeeGrowth0Token = position.innerFeeGrowth0Token + _cumulativeDelta;\r\n          if (boughtAmount > 0) position.fees0 = position.fees0.add128(uint128(boughtAmount));\r\n        }\r\n      }\r\n      if (amountToSell == 0) amountToSellInitial = 0; // reset if all amount sold\r\n\r\n      if (amountToSellDelta != 0) {\r\n        int128 amountToSellInitialDelta = amountToSellDelta;\r\n        // add/remove liquidity to tick with partly executed limit order\r\n        if (amountToSell != amountToSellInitial && amountToSell != 0) {\r\n          // in case of overflow it will be not possible to add tokens for sell until the limit order is fully closed\r\n          amountToSellInitialDelta = amountToSellDelta < 0\r\n            ? (-FullMath.mulDiv(uint128(-amountToSellDelta), amountToSellInitial, amountToSell).toInt256()).toInt128()\r\n            : FullMath.mulDiv(uint128(amountToSellDelta), amountToSellInitial, amountToSell).toInt256().toInt128();\r\n\r\n          limitOrders.addVirtualLiquidity(tick, amountToSellInitialDelta - amountToSellDelta);\r\n        }\r\n        amountToSell = LiquidityMath.addDelta(uint128(amountToSell), amountToSellDelta);\r\n        amountToSellInitial = LiquidityMath.addDelta(uint128(amountToSellInitial), amountToSellInitialDelta);\r\n      }\r\n      if (amountToSell == 0) amountToSellInitial = 0; // reset if all amount cancelled\r\n\r\n      assert(amountToSell <= type(uint128).max && amountToSellInitial <= type(uint128).max); // should never fail, just in case\r\n      (position.liquidity) = ((amountToSell << 128) | amountToSellInitial); // tightly pack data\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/base/Positions.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport './AlgebraPoolBase.sol';\r\nimport '../libraries/LiquidityMath.sol';\r\nimport '../libraries/TickManagement.sol';\r\n\r\n/// @title Algebra positions abstract contract\r\n/// @notice Contains the logic of recalculation and change of liquidity positions\r\nabstract contract Positions is AlgebraPoolBase {\r\n  using TickManagement for mapping(int24 => TickManagement.Tick);\r\n\r\n  struct Position {\r\n    uint256 liquidity; // The amount of liquidity concentrated in the range\r\n    uint256 innerFeeGrowth0Token; // The last updated fee growth per unit of liquidity\r\n    uint256 innerFeeGrowth1Token;\r\n    uint128 fees0; // The amount of token0 owed to a LP\r\n    uint128 fees1; // The amount of token1 owed to a LP\r\n  }\r\n\r\n  /// @inheritdoc IAlgebraPoolState\r\n  mapping(bytes32 => Position) public override positions;\r\n\r\n  /**\r\n   * @notice This function fetches certain position object\r\n   * @param owner The address owing the position\r\n   * @param bottomTick The position's bottom tick\r\n   * @param topTick The position's top tick\r\n   * @return position The Position object\r\n   */\r\n  function getOrCreatePosition(address owner, int24 bottomTick, int24 topTick) internal view returns (Position storage) {\r\n    bytes32 key;\r\n    assembly {\r\n      key := or(shl(24, or(shl(24, owner), and(bottomTick, 0xFFFFFF))), and(topTick, 0xFFFFFF))\r\n    }\r\n    return positions[key];\r\n  }\r\n\r\n  struct UpdatePositionCache {\r\n    uint160 price; // The square root of the current price in Q64.96 format\r\n    int24 prevInitializedTick; // The previous initialized tick in linked list\r\n    uint16 fee; // The current fee in hundredths of a bip, i.e. 1e-6\r\n    uint16 timepointIndex; // The index of the last written timepoint\r\n  }\r\n\r\n  /**\r\n   * @dev Updates position's ticks and its fees\r\n   * @return amount0 The abs amount of token0 that corresponds to liquidityDelta\r\n   * @return amount1 The abs amount of token1 that corresponds to liquidityDelta\r\n   */\r\n  function _updatePositionTicksAndFees(\r\n    Position storage position,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    int128 liquidityDelta\r\n  ) internal returns (uint256 amount0, uint256 amount1) {\r\n    // using memory cache to avoid \"stack too deep\" error\r\n    UpdatePositionCache memory cache = UpdatePositionCache(\r\n      globalState.price,\r\n      globalState.prevInitializedTick,\r\n      globalState.fee,\r\n      globalState.timepointIndex\r\n    );\r\n\r\n    int24 currentTick = globalState.tick;\r\n\r\n    bool toggledBottom;\r\n    bool toggledTop;\r\n    {\r\n      // scope to prevent \"stack too deep\"\r\n      (uint256 _totalFeeGrowth0Token, uint256 _totalFeeGrowth1Token) = (totalFeeGrowth0Token, totalFeeGrowth1Token);\r\n      if (liquidityDelta != 0) {\r\n        uint32 time = _blockTimestamp();\r\n        uint160 _secondsPerLiquidityCumulative = _getSecondsPerLiquidityCumulative(time, liquidity);\r\n\r\n        toggledBottom = ticks.update(\r\n          bottomTick,\r\n          currentTick,\r\n          liquidityDelta,\r\n          _totalFeeGrowth0Token,\r\n          _totalFeeGrowth1Token,\r\n          _secondsPerLiquidityCumulative,\r\n          time,\r\n          false // isTopTick: false\r\n        );\r\n\r\n        toggledTop = ticks.update(\r\n          topTick,\r\n          currentTick,\r\n          liquidityDelta,\r\n          _totalFeeGrowth0Token,\r\n          _totalFeeGrowth1Token,\r\n          _secondsPerLiquidityCumulative,\r\n          time,\r\n          true // isTopTick: true\r\n        );\r\n      }\r\n\r\n      (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = ticks.getInnerFeeGrowth(\r\n        bottomTick,\r\n        topTick,\r\n        currentTick,\r\n        _totalFeeGrowth0Token,\r\n        _totalFeeGrowth1Token\r\n      );\r\n\r\n      _recalculatePosition(position, liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\r\n    }\r\n\r\n    if (liquidityDelta != 0) {\r\n      // if liquidityDelta is negative and the tick was toggled, it means that it should not be initialized anymore, so we delete it\r\n      if (toggledBottom || toggledTop) {\r\n        int24 previousTick = cache.prevInitializedTick;\r\n        if (toggledBottom) {\r\n          previousTick = _insertOrRemoveTick(bottomTick, currentTick, previousTick, liquidityDelta < 0);\r\n        }\r\n        if (toggledTop) {\r\n          previousTick = _insertOrRemoveTick(topTick, currentTick, previousTick, liquidityDelta < 0);\r\n        }\r\n        cache.prevInitializedTick = previousTick;\r\n      }\r\n\r\n      int128 globalLiquidityDelta;\r\n      (amount0, amount1, globalLiquidityDelta) = LiquidityMath.getAmountsForLiquidity(bottomTick, topTick, liquidityDelta, currentTick, cache.price);\r\n      if (globalLiquidityDelta != 0) {\r\n        uint128 liquidityBefore = liquidity;\r\n        (uint16 newTimepointIndex, uint16 newFee) = _writeTimepoint(cache.timepointIndex, _blockTimestamp(), currentTick, liquidityBefore);\r\n        if (cache.timepointIndex != newTimepointIndex) {\r\n          cache.timepointIndex = newTimepointIndex;\r\n          if (cache.fee != newFee) {\r\n            cache.fee = newFee;\r\n            emit Fee(newFee);\r\n          }\r\n        }\r\n        liquidity = LiquidityMath.addDelta(liquidityBefore, liquidityDelta);\r\n      }\r\n\r\n      (globalState.prevInitializedTick, globalState.fee, globalState.timepointIndex) = (cache.prevInitializedTick, cache.fee, cache.timepointIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Increases amounts of tokens owed to owner of the position\r\n   * @param position The position object to operate with\r\n   * @param liquidityDelta The amount on which to increase\\decrease the liquidity\r\n   * @param innerFeeGrowth0Token Total fee token0 fee growth per 1/liquidity between position's lower and upper ticks\r\n   * @param innerFeeGrowth1Token Total fee token1 fee growth per 1/liquidity between position's lower and upper ticks\r\n   */\r\n  function _recalculatePosition(\r\n    Position storage position,\r\n    int128 liquidityDelta,\r\n    uint256 innerFeeGrowth0Token,\r\n    uint256 innerFeeGrowth1Token\r\n  ) internal {\r\n    uint128 liquidityBefore = uint128(position.liquidity);\r\n\r\n    if (liquidityDelta == 0) {\r\n      if (liquidityBefore == 0) return; // Do not recalculate the empty ranges\r\n    } else {\r\n      // change position liquidity\r\n      position.liquidity = LiquidityMath.addDelta(liquidityBefore, liquidityDelta);\r\n    }\r\n\r\n    unchecked {\r\n      // update the position\r\n      uint256 _innerFeeGrowth0Token;\r\n      uint128 fees0;\r\n      if ((_innerFeeGrowth0Token = position.innerFeeGrowth0Token) != innerFeeGrowth0Token) {\r\n        position.innerFeeGrowth0Token = innerFeeGrowth0Token;\r\n        fees0 = uint128(FullMath.mulDiv(innerFeeGrowth0Token - _innerFeeGrowth0Token, liquidityBefore, Constants.Q128));\r\n      }\r\n      uint256 _innerFeeGrowth1Token;\r\n      uint128 fees1;\r\n      if ((_innerFeeGrowth1Token = position.innerFeeGrowth1Token) != innerFeeGrowth1Token) {\r\n        position.innerFeeGrowth1Token = innerFeeGrowth1Token;\r\n        fees1 = uint128(FullMath.mulDiv(innerFeeGrowth1Token - _innerFeeGrowth1Token, liquidityBefore, Constants.Q128));\r\n      }\r\n\r\n      // To avoid overflow owner has to collect fee before it\r\n      if (fees0 | fees1 != 0) {\r\n        position.fees0 += fees0;\r\n        position.fees1 += fees1;\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/base/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport './AlgebraPoolBase.sol';\r\n\r\n/// @title Algebra reentrancy protection\r\n/// @notice Provides a modifier that protects against reentrancy\r\nabstract contract ReentrancyGuard is AlgebraPoolBase {\r\n  modifier nonReentrant() {\r\n    _lock();\r\n    _;\r\n    _unlock();\r\n  }\r\n\r\n  /// @dev using private function to save bytecode\r\n  function _lock() private {\r\n    if (!globalState.unlocked) revert IAlgebraPoolErrors.locked();\r\n    globalState.unlocked = false;\r\n  }\r\n\r\n  /// @dev using private function to save bytecode\r\n  function _unlock() private {\r\n    globalState.unlocked = true;\r\n  }\r\n}\r\n"
    },
    "contracts/base/ReservesManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.17;\n\nimport '../libraries/SafeTransfer.sol';\nimport '../libraries/SafeCast.sol';\nimport './AlgebraPoolBase.sol';\n\n/// @title Algebra reserves management abstract contract\n/// @notice Encapsulates logic for tracking and changing pool reserves\nabstract contract ReservesManager is AlgebraPoolBase {\n  using SafeCast for uint256;\n\n  /// @dev The tracked token0 and token1 reserves of pool\n  uint128 private reserve0;\n  uint128 private reserve1;\n\n  /// @inheritdoc IAlgebraPoolState\n  function getReserves() external view returns (uint128, uint128) {\n    return (reserve0, reserve1);\n  }\n\n  /// @dev updates reserves data and distributes excess in the form of fee to liquidity providers.\n  /// If any of the balances is greater than uint128, the excess is sent to the communityVault\n  function _updateReserves(bool _oneByteReserve) internal returns (uint256 balance0, uint256 balance1) {\n    (balance0, balance1) = (_balanceToken0(), _balanceToken1());\n    // we do not support tokens with totalSupply > type(uint128).max, so any excess will be sent to communityVault\n    // this situation can only occur if the tokens are sent directly to the pool from outside\n    (uint256 _rev0, uint256 _rev1) = (type(uint8).max, type(uint8).max);\n    unchecked {\n      if (balance0 > type(uint128).max) {\n        _rev0 = balance0 - type(uint128).max;\n        balance0 = type(uint128).max;\n      }\n      if (balance1 > type(uint128).max) {\n        _rev1 = balance1 - type(uint128).max;\n        balance1 = type(uint128).max;\n      }\n    }\n\n    uint128 _liquidity = liquidity;\n    if (_liquidity == 0) return (balance0, balance1);\n    if (_oneByteReserve) {\n      (_rev0, _rev1) = (_balanceToken0(), _balanceToken1());\n    }\n    (uint128 _reserve0, uint128 _reserve1) = (reserve0, reserve1);\n    (bool hasExcessToken0, bool hasExcessToken1) = (balance0 > _reserve0, balance1 > _reserve1);\n    if (hasExcessToken0 || hasExcessToken1) {\n      unchecked {\n        if (hasExcessToken0) totalFeeGrowth0Token += FullMath.mulDiv(balance0 - _reserve0, Constants.Q128, _liquidity);\n        if (hasExcessToken1) totalFeeGrowth1Token += FullMath.mulDiv(balance1 - _reserve1, Constants.Q128, _liquidity);\n        (reserve0, reserve1) = (uint128(balance0), uint128(balance1));\n      }\n    }\n    SafeTransfer.safeTransfer(token0, communityVault, _rev0);\n    SafeTransfer.safeTransfer(token1, communityVault, _rev1);\n  }\n\n  /**\n   * @notice Applies deltas to reserves and pays communityFees\n   * @param deltaR0 Amount of token0 to add/subtract to/from reserve0, must not exceed uint128\n   * @param deltaR1 Amount of token1 to add/subtract to/from reserve1, must not exceed uint128\n   * @param communityFee0 Amount of token0 to pay as communityFee, must not exceed uint128\n   * @param communityFee1 Amount of token1 to pay as communityFee, must not exceed uint128\n   */\n  function _changeReserves(int256 deltaR0, int256 deltaR1, uint256 communityFee0, uint256 communityFee1) internal {\n    if (communityFee0 | communityFee1 != 0) {\n      unchecked {\n        // overflow is desired since we do not support tokens with totalSupply > type(uint128).max\n        uint256 _cfPending0 = uint256(communityFeePending0) + communityFee0;\n        uint256 _cfPending1 = uint256(communityFeePending1) + communityFee1;\n        uint32 currentTimestamp = _blockTimestamp();\n        // underflow in timestamps is desired\n        if (\n          currentTimestamp - communityFeeLastTimestamp >= Constants.COMMUNITY_FEE_TRANSFER_FREQUENCY ||\n          _cfPending0 > type(uint128).max ||\n          _cfPending1 > type(uint128).max\n        ) {\n          if (_cfPending0 > 0) SafeTransfer.safeTransfer(token0, communityVault, _cfPending0);\n          if (_cfPending1 > 0) SafeTransfer.safeTransfer(token1, communityVault, _cfPending1);\n          communityFeeLastTimestamp = currentTimestamp;\n          (deltaR0, deltaR1) = (deltaR0 - _cfPending0.toInt256(), deltaR1 - _cfPending1.toInt256());\n          (_cfPending0, _cfPending1) = (0, 0);\n        }\n        // the previous block guarantees that no overflow occurs\n        (communityFeePending0, communityFeePending1) = (uint128(_cfPending0), uint128(_cfPending1));\n      }\n    }\n\n    if (deltaR0 | deltaR1 == 0) return;\n    (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\n    if (deltaR0 != 0) _reserve0 = (uint256(int256(_reserve0) + deltaR0)).toUint128();\n    if (deltaR1 != 0) _reserve1 = (uint256(int256(_reserve1) + deltaR1)).toUint128();\n    (reserve0, reserve1) = (uint128(_reserve0), uint128(_reserve1));\n  }\n}\n"
    },
    "contracts/base/SwapCalculation.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport '../interfaces/IAlgebraVirtualPool.sol';\r\nimport '../libraries/PriceMovementMath.sol';\r\nimport '../libraries/LimitOrderManagement.sol';\r\nimport '../libraries/LowGasSafeMath.sol';\r\nimport '../libraries/SafeCast.sol';\r\nimport './AlgebraPoolBase.sol';\r\n\r\n/// @title Algebra swap calculation abstract contract\r\n/// @notice Contains _calculateSwap encapsulating internal logic of swaps\r\nabstract contract SwapCalculation is AlgebraPoolBase {\r\n  using TickManagement for mapping(int24 => TickManagement.Tick);\r\n  using LimitOrderManagement for mapping(int24 => LimitOrderManagement.LimitOrder);\r\n  using SafeCast for uint256;\r\n  using LowGasSafeMath for uint256;\r\n  using LowGasSafeMath for int256;\r\n\r\n  struct SwapCalculationCache {\r\n    uint256 communityFee; // The community fee of the selling token, uint256 to minimize casts\r\n    uint160 secondsPerLiquidityCumulative; // The global secondPerLiquidity at the moment\r\n    bool crossedAnyTick; //  If we have already crossed at least one active tick\r\n    int256 amountRequiredInitial; // The initial value of the exact input\\output amount\r\n    int256 amountCalculated; // The additive amount of total output\\input calculated through the swap\r\n    uint256 totalFeeGrowth; // The initial totalFeeGrowth + the fee growth during a swap\r\n    uint256 totalFeeGrowthB;\r\n    bool exactInput; // Whether the exact input or output is specified\r\n    uint16 fee; // The current dynamic fee\r\n    uint16 timepointIndex; // The index of last written timepoint\r\n    int24 prevInitializedTick; // The previous initialized tick in linked list\r\n    uint32 blockTimestamp; // The timestamp of current block\r\n  }\r\n\r\n  struct PriceMovementCache {\r\n    uint160 stepSqrtPrice; // The Q64.96 sqrt of the price at the start of the step\r\n    int24 nextTick; // The tick till the current step goes\r\n    bool initialized; // True if the _nextTick_ is initialized\r\n    uint160 nextTickPrice; // The Q64.96 sqrt of the price calculated from the _nextTick_\r\n    uint256 input; // The additive amount of tokens that have been provided\r\n    uint256 output; // The additive amount of token that have been withdrawn\r\n    uint256 feeAmount; // The total amount of fee earned within a current step\r\n    bool inLimitOrder; // If a limit order is currently being executed\r\n  }\r\n\r\n  function _calculateSwap(\r\n    bool zeroToOne,\r\n    int256 amountRequired,\r\n    uint160 limitSqrtPrice\r\n  ) internal returns (int256 amount0, int256 amount1, uint160 currentPrice, int24 currentTick, uint128 currentLiquidity, uint256 communityFeeAmount) {\r\n    if (amountRequired == 0) revert zeroAmountRequired();\r\n    if (amountRequired == type(int256).min) revert invalidAmountRequired(); // to avoid problems when changing sign\r\n    SwapCalculationCache memory cache;\r\n    {\r\n      // load from one storage slot\r\n      currentPrice = globalState.price;\r\n      currentTick = globalState.tick;\r\n      cache.fee = globalState.fee;\r\n      cache.timepointIndex = globalState.timepointIndex;\r\n      cache.communityFee = globalState.communityFee;\r\n      cache.prevInitializedTick = globalState.prevInitializedTick;\r\n\r\n      (cache.amountRequiredInitial, cache.exactInput) = (amountRequired, amountRequired > 0);\r\n\r\n      currentLiquidity = liquidity;\r\n\r\n      if (zeroToOne) {\r\n        if (limitSqrtPrice >= currentPrice || limitSqrtPrice <= TickMath.MIN_SQRT_RATIO) revert invalidLimitSqrtPrice();\r\n        cache.totalFeeGrowth = totalFeeGrowth0Token;\r\n      } else {\r\n        if (limitSqrtPrice <= currentPrice || limitSqrtPrice >= TickMath.MAX_SQRT_RATIO) revert invalidLimitSqrtPrice();\r\n        cache.totalFeeGrowth = totalFeeGrowth1Token;\r\n      }\r\n\r\n      cache.blockTimestamp = _blockTimestamp();\r\n\r\n      (uint16 newTimepointIndex, uint16 newFee) = _writeTimepoint(cache.timepointIndex, cache.blockTimestamp, currentTick, currentLiquidity);\r\n\r\n      // new timepoint appears only for first swap/mint/burn in block\r\n      if (newTimepointIndex != cache.timepointIndex) {\r\n        cache.timepointIndex = newTimepointIndex;\r\n        if (cache.fee != newFee) {\r\n          cache.fee = newFee;\r\n          emit Fee(newFee);\r\n        }\r\n      }\r\n    }\r\n\r\n    PriceMovementCache memory step;\r\n    step.nextTick = zeroToOne ? cache.prevInitializedTick : ticks[cache.prevInitializedTick].nextTick;\r\n    unchecked {\r\n      // swap until there is remaining input or output tokens or we reach the price limit\r\n      while (true) {\r\n        step.stepSqrtPrice = currentPrice;\r\n        step.initialized = true;\r\n        step.nextTickPrice = TickMath.getSqrtRatioAtTick(step.nextTick);\r\n\r\n        if (step.stepSqrtPrice == step.nextTickPrice && ticks[step.nextTick].hasLimitOrders) {\r\n          step.inLimitOrder = true;\r\n          bool isLimitOrderExecuted = false;\r\n          // calculate the amounts from LO\r\n          (isLimitOrderExecuted, step.output, step.input, step.feeAmount) = limitOrders.executeLimitOrders(\r\n            step.nextTick,\r\n            currentPrice,\r\n            zeroToOne,\r\n            amountRequired,\r\n            cache.fee / 2\r\n          );\r\n          if (isLimitOrderExecuted) {\r\n            if (ticks[step.nextTick].liquidityTotal == 0) {\r\n              cache.prevInitializedTick = _insertOrRemoveTick(step.nextTick, currentTick, cache.prevInitializedTick, true);\r\n              step.initialized = false;\r\n            } else {\r\n              ticks[step.nextTick].hasLimitOrders = false;\r\n            }\r\n            step.inLimitOrder = false;\r\n          }\r\n        } else {\r\n          (currentPrice, step.input, step.output, step.feeAmount) = PriceMovementMath.movePriceTowardsTarget(\r\n            zeroToOne,\r\n            currentPrice,\r\n            (zeroToOne == (step.nextTickPrice < limitSqrtPrice)) // move the price to the target or to the limit\r\n              ? limitSqrtPrice\r\n              : step.nextTickPrice,\r\n            currentLiquidity,\r\n            amountRequired,\r\n            cache.fee\r\n          );\r\n        }\r\n\r\n        if (cache.exactInput) {\r\n          amountRequired -= (step.input + step.feeAmount).toInt256(); // decrease remaining input amount\r\n          cache.amountCalculated = cache.amountCalculated.sub(step.output.toInt256()); // decrease calculated output amount\r\n        } else {\r\n          amountRequired += step.output.toInt256(); // increase remaining output amount (since its negative)\r\n          cache.amountCalculated = cache.amountCalculated.add((step.input + step.feeAmount).toInt256()); // increase calculated input amount\r\n        }\r\n\r\n        if (cache.communityFee > 0) {\r\n          uint256 delta = (step.feeAmount.mul(cache.communityFee)) / Constants.COMMUNITY_FEE_DENOMINATOR;\r\n          step.feeAmount -= delta;\r\n          communityFeeAmount += delta;\r\n        }\r\n\r\n        if (currentLiquidity > 0) cache.totalFeeGrowth += FullMath.mulDiv(step.feeAmount, Constants.Q128, currentLiquidity);\r\n\r\n        if (currentPrice == step.nextTickPrice && !step.inLimitOrder) {\r\n          // if the reached tick is initialized then we need to cross it\r\n          if (step.initialized) {\r\n            // we have opened LOs\r\n            if (ticks[step.nextTick].hasLimitOrders) {\r\n              currentTick = zeroToOne ? step.nextTick : step.nextTick - 1;\r\n              continue;\r\n            }\r\n\r\n            if (!cache.crossedAnyTick) {\r\n              cache.crossedAnyTick = true;\r\n              cache.secondsPerLiquidityCumulative = secondsPerLiquidityCumulative;\r\n              cache.totalFeeGrowthB = zeroToOne ? totalFeeGrowth1Token : totalFeeGrowth0Token;\r\n            }\r\n\r\n            int128 liquidityDelta;\r\n            if (zeroToOne) {\r\n              liquidityDelta = -ticks.cross(\r\n                step.nextTick,\r\n                cache.totalFeeGrowth, // A == 0\r\n                cache.totalFeeGrowthB, // B == 1\r\n                cache.secondsPerLiquidityCumulative,\r\n                cache.blockTimestamp\r\n              );\r\n              cache.prevInitializedTick = ticks[cache.prevInitializedTick].prevTick;\r\n            } else {\r\n              liquidityDelta = ticks.cross(\r\n                step.nextTick,\r\n                cache.totalFeeGrowthB, // B == 0\r\n                cache.totalFeeGrowth, // A == 1\r\n                cache.secondsPerLiquidityCumulative,\r\n                cache.blockTimestamp\r\n              );\r\n              cache.prevInitializedTick = step.nextTick;\r\n            }\r\n            currentLiquidity = LiquidityMath.addDelta(currentLiquidity, liquidityDelta);\r\n          }\r\n\r\n          (currentTick, step.nextTick) = zeroToOne\r\n            ? (step.nextTick - 1, cache.prevInitializedTick)\r\n            : (step.nextTick, ticks[cache.prevInitializedTick].nextTick);\r\n        } else if (currentPrice != step.stepSqrtPrice) {\r\n          // if the price has changed but hasn't reached the target\r\n          currentTick = TickMath.getTickAtSqrtRatio(currentPrice);\r\n          break; // since the price hasn't reached the target, amountRequired should be 0\r\n        }\r\n        // check stop condition\r\n        if (amountRequired == 0 || currentPrice == limitSqrtPrice) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (cache.crossedAnyTick) {\r\n        // ticks cross data is needed to be duplicated in a virtual pool\r\n        address _activeIncentive = activeIncentive;\r\n        if (_activeIncentive != address(0)) {\r\n          bool isIncentiveActive; // if the incentive is stopped or faulty, the active incentive will be reset to 0\r\n          try IAlgebraVirtualPool(_activeIncentive).crossTo(currentTick, zeroToOne) returns (bool success) {\r\n            isIncentiveActive = success;\r\n          } catch {\r\n            // pool will reset activeIncentive in this case\r\n          }\r\n          if (!isIncentiveActive) {\r\n            activeIncentive = address(0);\r\n            emit Incentive(address(0));\r\n          }\r\n        }\r\n      }\r\n\r\n      (amount0, amount1) = zeroToOne == cache.exactInput // the amount to provide could be less than initially specified (e.g. reached limit)\r\n        ? (cache.amountRequiredInitial - amountRequired, cache.amountCalculated) // the amount to get could be less than initially specified (e.g. reached limit)\r\n        : (cache.amountCalculated, cache.amountRequiredInitial - amountRequired);\r\n    }\r\n\r\n    (globalState.price, globalState.tick, globalState.fee, globalState.timepointIndex, globalState.prevInitializedTick) = (\r\n      currentPrice,\r\n      currentTick,\r\n      cache.fee,\r\n      cache.timepointIndex,\r\n      cache.prevInitializedTick\r\n    );\r\n\r\n    liquidity = currentLiquidity;\r\n    if (zeroToOne) {\r\n      totalFeeGrowth0Token = cache.totalFeeGrowth;\r\n    } else {\r\n      totalFeeGrowth1Token = cache.totalFeeGrowth;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/base/TickStructure.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/TickManagement.sol';\r\nimport '../libraries/TickTree.sol';\r\nimport './AlgebraPoolBase.sol';\r\n\r\n/// @title Algebra tick structure abstract contract\r\n/// @notice Encapsulates the logic of interaction with the data structure with ticks\r\n/// @dev Ticks are stored as a doubly linked list. A two-layer bitmap tree is used to search through the list\r\nabstract contract TickStructure is AlgebraPoolBase {\r\n  using TickManagement for mapping(int24 => TickManagement.Tick);\r\n  using TickTree for mapping(int16 => uint256);\r\n\r\n  uint256 internal tickTreeRoot; // The root of bitmap search tree\r\n  mapping(int16 => uint256) internal tickSecondLayer; // The second layer bitmap search tree\r\n\r\n  // the leaves of the tree are stored in `tickTable`\r\n\r\n  constructor() {\r\n    ticks.initTickState();\r\n  }\r\n\r\n  /**\r\n   * @notice Used to add or remove a tick from a doubly linked list and search tree\r\n   * @param tick The tick being removed or added now\r\n   * @param currentTick The current global tick in the pool\r\n   * @param prevInitializedTick Previous active tick before `currentTick`\r\n   * @param remove Remove or add the tick\r\n   * @return newPrevInitializedTick New previous active tick before `currentTick` if changed\r\n   */\r\n  function _insertOrRemoveTick(\r\n    int24 tick,\r\n    int24 currentTick,\r\n    int24 prevInitializedTick,\r\n    bool remove\r\n  ) internal override returns (int24 newPrevInitializedTick) {\r\n    uint256 oldTickTreeRoot = tickTreeRoot;\r\n\r\n    int24 prevTick;\r\n    if (remove) {\r\n      prevTick = ticks.removeTick(tick);\r\n      if (prevInitializedTick == tick) prevInitializedTick = prevTick;\r\n    } else {\r\n      int24 nextTick;\r\n      if (prevInitializedTick < tick && tick <= currentTick) {\r\n        nextTick = ticks[prevInitializedTick].nextTick;\r\n        prevTick = prevInitializedTick;\r\n        prevInitializedTick = tick;\r\n      } else {\r\n        nextTick = tickTable.getNextTick(tickSecondLayer, oldTickTreeRoot, tick);\r\n        prevTick = ticks[nextTick].prevTick;\r\n      }\r\n      ticks.insertTick(tick, prevTick, nextTick);\r\n    }\r\n\r\n    uint256 newTickTreeRoot = tickTable.toggleTick(tickSecondLayer, tick, oldTickTreeRoot);\r\n    if (newTickTreeRoot != oldTickTreeRoot) tickTreeRoot = newTickTreeRoot;\r\n    return prevInitializedTick;\r\n  }\r\n}\r\n"
    },
    "contracts/DataStorageOperator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport './base/common/Timestamp.sol';\r\nimport './interfaces/IAlgebraFactory.sol';\r\nimport './interfaces/IDataStorageOperator.sol';\r\nimport './interfaces/pool/IAlgebraPoolState.sol';\r\n\r\nimport './libraries/DataStorage.sol';\r\nimport './libraries/AdaptiveFee.sol';\r\n\r\n/// @title Algebra timepoints data operator\r\n/// @notice This contract stores timepoints and calculates adaptive fee and statistical averages\r\ncontract DataStorageOperator is IDataStorageOperator, Timestamp {\r\n  uint256 internal constant UINT16_MODULO = 65536;\r\n\r\n  using DataStorage for DataStorage.Timepoint[UINT16_MODULO];\r\n\r\n  DataStorage.Timepoint[UINT16_MODULO] public override timepoints;\r\n  AlgebraFeeConfiguration public feeConfig;\r\n\r\n  /// @dev The role can be granted in AlgebraFactory\r\n  bytes32 public constant FEE_CONFIG_MANAGER = keccak256('FEE_CONFIG_MANAGER');\r\n\r\n  address private immutable pool;\r\n  address private immutable factory;\r\n\r\n  modifier onlyPool() {\r\n    require(msg.sender == pool, 'only pool can call this');\r\n    _;\r\n  }\r\n\r\n  constructor(address _pool) {\r\n    (factory, pool) = (msg.sender, _pool);\r\n  }\r\n\r\n  /// @inheritdoc IDataStorageOperator\r\n  function initialize(uint32 time, int24 tick) external override onlyPool {\r\n    return timepoints.initialize(time, tick);\r\n  }\r\n\r\n  /// @inheritdoc IDataStorageOperator\r\n  function changeFeeConfiguration(AlgebraFeeConfiguration calldata _config) external override {\r\n    require(msg.sender == factory || IAlgebraFactory(factory).hasRoleOrOwner(FEE_CONFIG_MANAGER, msg.sender));\r\n    AdaptiveFee.validateFeeConfiguration(_config);\r\n\r\n    feeConfig = _config;\r\n    emit FeeConfiguration(_config);\r\n  }\r\n\r\n  /// @inheritdoc IDataStorageOperator\r\n  function getSingleTimepoint(\r\n    uint32 time,\r\n    uint32 secondsAgo,\r\n    int24 tick,\r\n    uint16 lastIndex\r\n  ) external view override returns (int56 tickCumulative, uint112 volatilityCumulative) {\r\n    DataStorage.Timepoint memory result = timepoints.getSingleTimepoint(time, secondsAgo, tick, lastIndex, timepoints.getOldestIndex(lastIndex));\r\n    (tickCumulative, volatilityCumulative) = (result.tickCumulative, result.volatilityCumulative);\r\n  }\r\n\r\n  /// @inheritdoc IDataStorageOperator\r\n  function getTimepoints(\r\n    uint32[] memory secondsAgos\r\n  ) external view override returns (int56[] memory tickCumulatives, uint112[] memory volatilityCumulatives) {\r\n    (, int24 tick, , , uint16 index, , ) = IAlgebraPoolState(pool).globalState();\r\n    return timepoints.getTimepoints(_blockTimestamp(), secondsAgos, tick, index);\r\n  }\r\n\r\n  /// @inheritdoc IDataStorageOperator\r\n  function write(uint16 index, uint32 blockTimestamp, int24 tick) external override onlyPool returns (uint16 indexUpdated, uint16 newFee) {\r\n    uint16 oldestIndex;\r\n    (indexUpdated, oldestIndex) = timepoints.write(index, blockTimestamp, tick);\r\n\r\n    if (index != indexUpdated) {\r\n      AlgebraFeeConfiguration memory _feeConfig = feeConfig;\r\n      if (_feeConfig.alpha1 | _feeConfig.alpha2 == 0) {\r\n        newFee = _feeConfig.baseFee;\r\n      } else {\r\n        uint88 lastVolatilityCumulative = timepoints[indexUpdated].volatilityCumulative;\r\n        uint88 volatilityAverage = timepoints.getAverageVolatility(blockTimestamp, tick, indexUpdated, oldestIndex, lastVolatilityCumulative);\r\n        newFee = AdaptiveFee.getFee(volatilityAverage, _feeConfig);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @inheritdoc IDataStorageOperator\r\n  function prepayTimepointsStorageSlots(uint16 startIndex, uint16 amount) external {\r\n    require(!timepoints[startIndex].initialized); // if not initialized, then all subsequent ones too\r\n    require(amount > 0 && type(uint16).max - startIndex >= amount);\r\n\r\n    unchecked {\r\n      for (uint256 i = startIndex; i < startIndex + amount; ++i) {\r\n        timepoints[i].blockTimestamp = 1; // will be overwritten\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/callback/IAlgebraFlashCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IAlgebraPoolActions#flash\r\n/// @notice Any contract that calls IAlgebraPoolActions#flash must implement this interface\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraFlashCallback {\r\n  /// @notice Called to `msg.sender` after transferring to the recipient from IAlgebraPool#flash.\r\n  /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\r\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\r\n  /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\r\n  /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\r\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#flash call\r\n  function algebraFlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/interfaces/callback/IAlgebraMintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IAlgebraPoolActions#mint\r\n/// @notice Any contract that calls IAlgebraPoolActions#mint must implement this interface\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraMintCallback {\r\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IAlgebraPool#mint.\r\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\r\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\r\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\r\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\r\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#mint call\r\n  function algebraMintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/interfaces/callback/IAlgebraSwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IAlgebraPoolActions#swap\r\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraSwapCallback {\r\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\r\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\r\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\r\n  function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/interfaces/IAlgebraFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\npragma abicoder v2;\r\n\r\nimport '../base/AlgebraFeeConfiguration.sol';\r\n\r\n/// @title The interface for the Algebra Factory\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraFactory {\r\n  /// @notice Emitted when a process of ownership renounce is started\r\n  /// @param timestamp The timestamp of event\r\n  /// @param finishTimestamp The timestamp when ownership renounce will be possible to finish\r\n  event RenounceOwnershipStart(uint256 timestamp, uint256 finishTimestamp);\r\n\r\n  /// @notice Emitted when a process of ownership renounce cancelled\r\n  /// @param timestamp The timestamp of event\r\n  event RenounceOwnershipStop(uint256 timestamp);\r\n\r\n  /// @notice Emitted when a process of ownership renounce finished\r\n  /// @param timestamp The timestamp of ownership renouncement\r\n  event RenounceOwnershipFinish(uint256 timestamp);\r\n\r\n  /// @notice Emitted when a pool is created\r\n  /// @param token0 The first token of the pool by address sort order\r\n  /// @param token1 The second token of the pool by address sort order\r\n  /// @param pool The address of the created pool\r\n  event Pool(address indexed token0, address indexed token1, address pool);\r\n\r\n  /// @notice Emitted when the farming address is changed\r\n  /// @param newFarmingAddress The farming address after the address was changed\r\n  event FarmingAddress(address indexed newFarmingAddress);\r\n\r\n  /// @notice Emitted when the default fee configuration is changed\r\n  /// @param newConfig The structure with dynamic fee parameters\r\n  /// @dev See the AdaptiveFee library for more details\r\n  event DefaultFeeConfiguration(AlgebraFeeConfiguration newConfig);\r\n\r\n  /// @notice Emitted when the default community fee is changed\r\n  /// @param newDefaultCommunityFee The new default community fee value\r\n  event DefaultCommunityFee(uint8 newDefaultCommunityFee);\r\n\r\n  /// @notice role that can change communityFee and tickspacing in pools\r\n  function POOLS_ADMINISTRATOR_ROLE() external view returns (bytes32);\r\n\r\n  /// @dev Returns `true` if `account` has been granted `role` or `account` is owner.\r\n  function hasRoleOrOwner(bytes32 role, address account) external view returns (bool);\r\n\r\n  /// @notice Returns the current owner of the factory\r\n  /// @dev Can be changed by the current owner via transferOwnership(address newOwner)\r\n  /// @return The address of the factory owner\r\n  function owner() external view returns (address);\r\n\r\n  /// @notice Returns the current poolDeployerAddress\r\n  /// @return The address of the poolDeployer\r\n  function poolDeployer() external view returns (address);\r\n\r\n  /// @dev Is retrieved from the pools to restrict calling certain functions not by a tokenomics contract\r\n  /// @return The tokenomics contract address\r\n  function farmingAddress() external view returns (address);\r\n\r\n  /// @notice Returns the current communityVaultAddress\r\n  /// @return The address to which community fees are transferred\r\n  function communityVault() external view returns (address);\r\n\r\n  /// @notice Returns the default community fee\r\n  /// @return Fee which will be set at the creation of the pool\r\n  function defaultCommunityFee() external view returns (uint8);\r\n\r\n  /// @notice Returns the pool address for a given pair of tokens, or address 0 if it does not exist\r\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n  /// @param tokenA The contract address of either token0 or token1\r\n  /// @param tokenB The contract address of the other token\r\n  /// @return pool The pool address\r\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\r\n\r\n  /// @return timestamp The timestamp of the beginning of the renounceOwnership process\r\n  function renounceOwnershipStartTimestamp() external view returns (uint256 timestamp);\r\n\r\n  /// @notice Creates a pool for the given two tokens\r\n  /// @param tokenA One of the two tokens in the desired pool\r\n  /// @param tokenB The other of the two tokens in the desired pool\r\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0.\r\n  /// The call will revert if the pool already exists or the token arguments are invalid.\r\n  /// @return pool The address of the newly created pool\r\n  function createPool(address tokenA, address tokenB) external returns (address pool);\r\n\r\n  /// @dev updates tokenomics address on the factory\r\n  /// @param newFarmingAddress The new tokenomics contract address\r\n  function setFarmingAddress(address newFarmingAddress) external;\r\n\r\n  /// @dev updates default community fee for new pools\r\n  /// @param newDefaultCommunityFee The new community fee, _must_ be <= MAX_COMMUNITY_FEE\r\n  function setDefaultCommunityFee(uint8 newDefaultCommunityFee) external;\r\n\r\n  /// @notice Changes initial fee configuration for new pools\r\n  /// @dev changes coefficients for sigmoids: α / (1 + e^( (β-x) / γ))\r\n  /// alpha1 + alpha2 + baseFee (max possible fee) must be <= type(uint16).max and gammas must be > 0\r\n  /// @param newConfig new default fee configuration. See the #AdaptiveFee.sol library for details\r\n  function setDefaultFeeConfiguration(AlgebraFeeConfiguration calldata newConfig) external;\r\n\r\n  /// @notice Starts process of renounceOwnership. After that, a certain period\r\n  /// of time must pass before the ownership renounce can be completed.\r\n  function startRenounceOwnership() external;\r\n\r\n  /// @notice Stops process of renounceOwnership and removes timer.\r\n  function stopRenounceOwnership() external;\r\n}\r\n"
    },
    "contracts/interfaces/IAlgebraPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nimport './pool/IAlgebraPoolImmutables.sol';\r\nimport './pool/IAlgebraPoolState.sol';\r\nimport './pool/IAlgebraPoolDerivedState.sol';\r\nimport './pool/IAlgebraPoolActions.sol';\r\nimport './pool/IAlgebraPoolPermissionedActions.sol';\r\nimport './pool/IAlgebraPoolEvents.sol';\r\n\r\n/// @title The interface for a Algebra Pool\r\n/// @dev The pool interface is broken up into many smaller pieces.\r\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPool is\r\n  IAlgebraPoolImmutables,\r\n  IAlgebraPoolState,\r\n  IAlgebraPoolDerivedState,\r\n  IAlgebraPoolActions,\r\n  IAlgebraPoolPermissionedActions,\r\n  IAlgebraPoolEvents\r\n{\r\n  // used only for combining interfaces\r\n}\r\n"
    },
    "contracts/interfaces/IAlgebraPoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title An interface for a contract that is capable of deploying Algebra Pools\r\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\r\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\r\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain.\r\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolDeployer {\r\n  /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\r\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\r\n  /// @return dataStorage The pools associated dataStorage\r\n  /// @return factory The factory address\r\n  /// @return communityVault The community vault address\r\n  /// @return token0 The first token of the pool by address sort order\r\n  /// @return token1 The second token of the pool by address sort order\r\n  function getDeployParameters() external view returns (address dataStorage, address factory, address communityVault, address token0, address token1);\r\n\r\n  /// @dev Deploys a pool with the given parameters by transiently setting the parameters in cache.\r\n  /// @param dataStorage The pools associated dataStorage\r\n  /// @param token0 The first token of the pool by address sort order\r\n  /// @param token1 The second token of the pool by address sort order\r\n  /// @return pool The deployed pool's address\r\n  function deploy(address dataStorage, address token0, address token1) external returns (address pool);\r\n}\r\n"
    },
    "contracts/interfaces/IAlgebraPoolErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.4 <0.9.0;\r\n\r\n/// @title Errors emitted by a pool\r\n/// @notice Contains custom errors emitted by the pool\r\ninterface IAlgebraPoolErrors {\r\n  // ####  pool errors  ####\r\n\r\n  /// @notice Emitted by the reentrancy guard\r\n  error locked();\r\n\r\n  /// @notice Emitted if arithmetic error occurred\r\n  error arithmeticError();\r\n\r\n  /// @notice Emitted if an attempt is made to initialize the pool twice\r\n  error alreadyInitialized();\r\n\r\n  /// @notice Emitted if 0 is passed as amountRequired to swap function\r\n  error zeroAmountRequired();\r\n\r\n  /// @notice Emitted if invalid amount is passed as amountRequired to swapSupportingFeeOnInputTokens function\r\n  error invalidAmountRequired();\r\n\r\n  /// @notice Emitted if the pool received fewer tokens than it should have\r\n  error insufficientInputAmount();\r\n  /// @notice Emitted if the pool received fewer tokens than it should have to mint calculated actual liquidity\r\n  error insufficientAmountReceivedAtMint();\r\n\r\n  /// @notice Emitted if there was an attempt to mint zero liquidity\r\n  error zeroLiquidityDesired();\r\n  /// @notice Emitted if actual amount of liquidity is zero (due to insufficient amount of tokens received)\r\n  error zeroLiquidityActual();\r\n\r\n  /// @notice Emitted if the pool received fewer tokens{0,1} after flash than it should have\r\n  error flashInsufficientPaid0();\r\n  error flashInsufficientPaid1();\r\n\r\n  /// @notice Emitted if limitSqrtPrice param is incorrect\r\n  error invalidLimitSqrtPrice();\r\n\r\n  /// @notice Tick must be divisible by tickspacing\r\n  error tickIsNotSpaced();\r\n\r\n  /// @notice Emitted if a method is called that is accessible only to the factory owner or dedicated role\r\n  error notAllowed();\r\n  /// @notice Emitted if a method is called that is accessible only to the farming\r\n  error onlyFarming();\r\n\r\n  error invalidNewTickSpacing();\r\n  error invalidNewCommunityFee();\r\n\r\n  // ####  LimitOrder errors  ####\r\n  /// @notice Emitted if tick is too low/high for limit order\r\n  error invalidTickForLimitOrder();\r\n  /// @notice Emitted if amount is too high for limit order\r\n  error invalidAmountForLimitOrder();\r\n\r\n  // ####  LiquidityMath errors  ####\r\n  /// @notice Emitted if liquidity underflows\r\n  error liquiditySub();\r\n  /// @notice Emitted if liquidity overflows\r\n  error liquidityAdd();\r\n\r\n  // ####  TickManagement errors  ####\r\n  error topTickLowerThanBottomTick();\r\n  error bottomTickLowerThanMIN();\r\n  error topTickAboveMAX();\r\n  error liquidityOverflow();\r\n  error tickIsNotInitialized();\r\n  error tickInvalidLinks();\r\n\r\n  // ####  SafeTransfer errors  ####\r\n  error transferFailed();\r\n\r\n  // ####  TickMath errors  ####\r\n  error tickOutOfRange();\r\n  error priceOutOfRange();\r\n}\r\n"
    },
    "contracts/interfaces/IAlgebraVirtualPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the virtual pool\r\n/// @dev Used to calculate active liquidity in farmings\r\ninterface IAlgebraVirtualPool {\r\n  /// @dev This function is called by the main pool if an initialized ticks are crossed by swap.\r\n  /// If any one of crossed ticks is also initialized in a virtual pool it should be crossed too\r\n  /// @param targetTick The target tick up to which we need to cross all active ticks\r\n  /// @param zeroToOne The direction\r\n  function crossTo(int24 targetTick, bool zeroToOne) external returns (bool success);\r\n}\r\n"
    },
    "contracts/interfaces/IDataStorageOperator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\npragma abicoder v2;\r\n\r\nimport '../base/AlgebraFeeConfiguration.sol';\r\n\r\n/// @title The interface for the DataStorageOperator\r\n/// @dev This contract stores timepoints and calculates adaptive fee and statistical averages\r\ninterface IDataStorageOperator {\r\n  /// @notice Emitted when the fee configuration is changed\r\n  /// @param feeConfig The structure with dynamic fee parameters\r\n  /// @dev See the AdaptiveFee library for more details\r\n  event FeeConfiguration(AlgebraFeeConfiguration feeConfig);\r\n\r\n  /// @notice Returns data belonging to a certain timepoint\r\n  /// @param index The index of timepoint in the array\r\n  /// @dev There is more convenient function to fetch a timepoint: getTimepoints(). Which requires not an index but seconds\r\n  /// @return initialized Whether the timepoint has been initialized and the values are safe to use\r\n  /// @return blockTimestamp The timestamp of the timepoint\r\n  /// @return tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp\r\n  /// @return volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp\r\n  /// @return tick The tick at blockTimestamp\r\n  /// @return averageTick Time-weighted average tick\r\n  /// @return windowStartIndex Index of closest timepoint >= WINDOW seconds ago\r\n  function timepoints(\r\n    uint256 index\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      bool initialized,\r\n      uint32 blockTimestamp,\r\n      int56 tickCumulative,\r\n      uint88 volatilityCumulative,\r\n      int24 tick,\r\n      int24 averageTick,\r\n      uint16 windowStartIndex\r\n    );\r\n\r\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\r\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\r\n  /// @param tick Initial tick\r\n  function initialize(uint32 time, int24 tick) external;\r\n\r\n  /// @dev Reverts if a timepoint at or before the desired timepoint timestamp does not exist.\r\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\r\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\r\n  /// at exactly the timestamp between the two timepoints.\r\n  /// @param time The current block timestamp\r\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return a timepoint\r\n  /// @param tick The current tick\r\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\r\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\r\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\r\n  function getSingleTimepoint(\r\n    uint32 time,\r\n    uint32 secondsAgo,\r\n    int24 tick,\r\n    uint16 index\r\n  ) external view returns (int56 tickCumulative, uint112 volatilityCumulative);\r\n\r\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\r\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\r\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return a timepoint\r\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\r\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\r\n  function getTimepoints(uint32[] memory secondsAgos) external view returns (int56[] memory tickCumulatives, uint112[] memory volatilityCumulatives);\r\n\r\n  /// @notice Writes a dataStorage timepoint to the array\r\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\r\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\r\n  /// @param blockTimestamp The timestamp of the new timepoint\r\n  /// @param tick The active tick at the time of the new timepoint\r\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\r\n  /// @return newFee The fee in hundredths of a bip, i.e. 1e-6\r\n  function write(uint16 index, uint32 blockTimestamp, int24 tick) external returns (uint16 indexUpdated, uint16 newFee);\r\n\r\n  /// @notice Changes fee configuration for the pool\r\n  function changeFeeConfiguration(AlgebraFeeConfiguration calldata feeConfig) external;\r\n\r\n  /// @notice Fills uninitialized timepoints with nonzero value\r\n  /// @dev Can be used to reduce the gas cost of future swaps\r\n  /// @param startIndex The start index, must be not initialized\r\n  /// @param amount of slots to fill, startIndex + amount must be <= type(uint16).max\r\n  function prepayTimepointsStorageSlots(uint16 startIndex, uint16 amount) external;\r\n}\r\n"
    },
    "contracts/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Minimal ERC20 interface for Algebra\r\n/// @notice Contains a subset of the full ERC20 interface that is used in Algebra\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IERC20Minimal {\r\n  /// @notice Returns the balance of a token\r\n  /// @param account The account for which to look up the number of tokens it has, i.e. its balance\r\n  /// @return The number of tokens held by the account\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /// @notice Transfers the amount of token from the `msg.sender` to the recipient\r\n  /// @param recipient The account that will receive the amount transferred\r\n  /// @param amount The number of tokens to send from the sender to the recipient\r\n  /// @return Returns true for a successful transfer, false for an unsuccessful transfer\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /// @notice Returns the current allowance given to a spender by an owner\r\n  /// @param owner The account of the token owner\r\n  /// @param spender The account of the token spender\r\n  /// @return The current allowance granted by `owner` to `spender`\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\r\n  /// @param spender The account which will be allowed to spend a given amount of the owners tokens\r\n  /// @param amount The amount of tokens allowed to be used by `spender`\r\n  /// @return Returns true for a successful approval, false for unsuccessful\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\r\n  /// @param sender The account from which the transfer will be initiated\r\n  /// @param recipient The recipient of the transfer\r\n  /// @param amount The amount of the transfer\r\n  /// @return Returns true for a successful transfer, false for unsuccessful\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\r\n  /// @param from The account from which the tokens were sent, i.e. the balance decreased\r\n  /// @param to The account to which the tokens were sent, i.e. the balance increased\r\n  /// @param value The amount of tokens that were transferred\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\r\n  /// @param owner The account that approved spending of its tokens\r\n  /// @param spender The account for which the spending allowance was modified\r\n  /// @param value The new allowance from the owner to the spender\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/interfaces/pool/IAlgebraPoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissionless pool actions\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolActions {\r\n  /// @notice Sets the initial price for the pool\r\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\r\n  /// @dev Initialization should be done in one transaction with pool creation to avoid front-running\r\n  /// @param price the initial sqrt price of the pool as a Q64.96\r\n  function initialize(uint160 price) external;\r\n\r\n  /// @notice Adds liquidity for the given recipient/bottomTick/topTick position\r\n  /// @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\r\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\r\n  /// on bottomTick, topTick, the amount of liquidity, and the current price. If bottomTick == topTick position is treated as a limit order\r\n  /// @param sender The address which will receive potential surplus of paid tokens\r\n  /// @param recipient The address for which the liquidity will be created\r\n  /// @param bottomTick The lower tick of the position in which to add liquidity\r\n  /// @param topTick The upper tick of the position in which to add liquidity\r\n  /// @param amount The desired amount of liquidity to mint\r\n  /// @param data Any data that should be passed through to the callback\r\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n  /// @return liquidityActual The actual minted amount of liquidity\r\n  function mint(\r\n    address sender,\r\n    address recipient,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 amount,\r\n    bytes calldata data\r\n  ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityActual);\r\n\r\n  /// @notice Collects tokens owed to a position\r\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\r\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\r\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\r\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\r\n  /// @param recipient The address which should receive the fees collected\r\n  /// @param bottomTick The lower tick of the position for which to collect fees\r\n  /// @param topTick The upper tick of the position for which to collect fees\r\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\r\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\r\n  /// @return amount0 The amount of fees collected in token0\r\n  /// @return amount1 The amount of fees collected in token1\r\n  function collect(\r\n    address recipient,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\r\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\r\n  /// @dev Fees must be collected separately via a call to #collect\r\n  /// @param bottomTick The lower tick of the position for which to burn liquidity\r\n  /// @param topTick The upper tick of the position for which to burn liquidity\r\n  /// @param amount How much liquidity to burn\r\n  /// @return amount0 The amount of token0 sent to the recipient\r\n  /// @return amount1 The amount of token1 sent to the recipient\r\n  function burn(int24 bottomTick, int24 topTick, uint128 amount) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  /// @notice Swap token0 for token1, or token1 for token0\r\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#AlgebraSwapCallback\r\n  /// @param recipient The address to receive the output of the swap\r\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n  /// @param amountRequired The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\r\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n  function swap(\r\n    address recipient,\r\n    bool zeroToOne,\r\n    int256 amountRequired,\r\n    uint160 limitSqrtPrice,\r\n    bytes calldata data\r\n  ) external returns (int256 amount0, int256 amount1);\r\n\r\n  /// @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\r\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#AlgebraSwapCallback\r\n  /// @param sender The address called this function (Comes from the Router)\r\n  /// @param recipient The address to receive the output of the swap\r\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n  /// @param amountRequired The amount of the swap, which implicitly configures the swap as exact input\r\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\r\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n  function swapSupportingFeeOnInputTokens(\r\n    address sender,\r\n    address recipient,\r\n    bool zeroToOne,\r\n    int256 amountRequired,\r\n    uint160 limitSqrtPrice,\r\n    bytes calldata data\r\n  ) external returns (int256 amount0, int256 amount1);\r\n\r\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n  /// @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback#AlgebraFlashCallback\r\n  /// @dev All excess tokens paid in the callback are distributed to currently in-range liquidity providers as an additional fee.\r\n  /// If there are no in-range liquidity providers, the fee will be transferred to the first active provider in the future\r\n  /// @param recipient The address which will receive the token0 and token1 amounts\r\n  /// @param amount0 The amount of token0 to send\r\n  /// @param amount1 The amount of token1 to send\r\n  /// @param data Any data to be passed through to the callback\r\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/interfaces/pool/IAlgebraPoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that is not stored\r\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\r\n/// blockchain. The functions here may have variable gas costs.\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolDerivedState {\r\n  /// @notice Returns a snapshot of seconds per liquidity and seconds inside a tick range\r\n  /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\r\n  /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\r\n  /// snapshot is taken and the second snapshot is taken.\r\n  /// @param bottomTick The lower tick of the range\r\n  /// @param topTick The upper tick of the range\r\n  /// @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\r\n  /// @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\r\n  function getInnerCumulatives(\r\n    int24 bottomTick,\r\n    int24 topTick\r\n  ) external view returns (uint160 innerSecondsSpentPerLiquidity, uint32 innerSecondsSpent);\r\n}\r\n"
    },
    "contracts/interfaces/pool/IAlgebraPoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Events emitted by a pool\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolEvents {\r\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\r\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\r\n  /// @param price The initial sqrt price of the pool, as a Q64.96\r\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\r\n  event Initialize(uint160 price, int24 tick);\r\n\r\n  /// @notice Emitted when liquidity is minted for a given position\r\n  /// @dev If the top and bottom ticks match, this should be treated as a limit order\r\n  /// @param sender The address that minted the liquidity\r\n  /// @param owner The owner of the position and recipient of any minted liquidity\r\n  /// @param bottomTick The lower tick of the position\r\n  /// @param topTick The upper tick of the position\r\n  /// @param liquidityAmount The amount of liquidity minted to the position range\r\n  /// @param amount0 How much token0 was required for the minted liquidity\r\n  /// @param amount1 How much token1 was required for the minted liquidity\r\n  event Mint(\r\n    address sender,\r\n    address indexed owner,\r\n    int24 indexed bottomTick,\r\n    int24 indexed topTick,\r\n    uint128 liquidityAmount,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  );\r\n\r\n  /// @notice Emitted when fees are collected by the owner of a position\r\n  /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\r\n  /// @param owner The owner of the position for which fees are collected\r\n  /// @param recipient The address that received fees\r\n  /// @param bottomTick The lower tick of the position\r\n  /// @param topTick The upper tick of the position\r\n  /// @param amount0 The amount of token0 fees collected\r\n  /// @param amount1 The amount of token1 fees collected\r\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\r\n\r\n  /// @notice Emitted when a position's liquidity is removed\r\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\r\n  /// @param owner The owner of the position for which liquidity is removed\r\n  /// @param bottomTick The lower tick of the position\r\n  /// @param topTick The upper tick of the position\r\n  /// @param liquidityAmount The amount of liquidity to remove\r\n  /// @param amount0 The amount of token0 withdrawn\r\n  /// @param amount1 The amount of token1 withdrawn\r\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\r\n\r\n  /// @notice Emitted by the pool for any swaps between token0 and token1\r\n  /// @param sender The address that initiated the swap call, and that received the callback\r\n  /// @param recipient The address that received the output of the swap\r\n  /// @param amount0 The delta of the token0 balance of the pool\r\n  /// @param amount1 The delta of the token1 balance of the pool\r\n  /// @param price The sqrt(price) of the pool after the swap, as a Q64.96\r\n  /// @param liquidity The liquidity of the pool after the swap\r\n  /// @param tick The log base 1.0001 of price of the pool after the swap\r\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\r\n\r\n  /// @notice Emitted by the pool for any flashes of token0/token1\r\n  /// @param sender The address that initiated the swap call, and that received the callback\r\n  /// @param recipient The address that received the tokens from flash\r\n  /// @param amount0 The amount of token0 that was flashed\r\n  /// @param amount1 The amount of token1 that was flashed\r\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\r\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\r\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\r\n\r\n  /// @notice Emitted when the community fee is changed by the pool\r\n  /// @param communityFeeNew The updated value of the community fee in thousandths (1e-3)\r\n  event CommunityFee(uint8 communityFeeNew);\r\n\r\n  /// @notice Emitted when the tick spacing changes\r\n  /// @param newTickSpacing The updated value of the new tick spacing\r\n  /// @param newTickSpacingLimitOrders The updated value of the new tick spacing for limit orders\r\n  event TickSpacing(int24 newTickSpacing, int24 newTickSpacingLimitOrders);\r\n\r\n  /// @notice Emitted when new activeIncentive is set\r\n  /// @param newIncentiveAddress The address of the new incentive\r\n  event Incentive(address indexed newIncentiveAddress);\r\n\r\n  /// @notice Emitted when the fee changes inside the pool\r\n  /// @param fee The current fee in hundredths of a bip, i.e. 1e-6\r\n  event Fee(uint16 fee);\r\n\r\n  /// @notice Emitted in case of an error when trying to write to the DataStorage\r\n  /// @dev This shouldn't happen\r\n  event DataStorageFailure();\r\n}\r\n"
    },
    "contracts/interfaces/pool/IAlgebraPoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that never changes\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolImmutables {\r\n  /// @notice The contract that stores all the timepoints and can perform actions with them\r\n  /// @return The operator address\r\n  function dataStorageOperator() external view returns (address);\r\n\r\n  /// @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\r\n  /// @return The contract address\r\n  function factory() external view returns (address);\r\n\r\n  /// @notice The first of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token0() external view returns (address);\r\n\r\n  /// @notice The second of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token1() external view returns (address);\r\n\r\n  /// @notice The contract to which community fees are transferred\r\n  /// @return The communityVault address\r\n  function communityVault() external view returns (address);\r\n\r\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n  /// @return The max amount of liquidity per tick\r\n  function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n"
    },
    "contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissioned pool actions\r\n/// @notice Contains pool methods that may only be called by permissioned addresses\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolPermissionedActions {\r\n  /// @notice Set the community's % share of the fees. Cannot exceed 25% (250). Only factory owner or POOLS_ADMINISTRATOR_ROLE role\r\n  /// @param communityFee new community fee percent in thousandths (1e-3)\r\n  function setCommunityFee(uint8 communityFee) external;\r\n\r\n  /// @notice Set the new tick spacing values. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\r\n  /// @param newTickSpacing The new tick spacing value\r\n  /// @param newTickSpacingLimitOrders The new tick spacing value for limit orders\r\n  function setTickSpacing(int24 newTickSpacing, int24 newTickSpacingLimitOrders) external;\r\n\r\n  /// @notice Sets an active incentive. Only farming\r\n  /// @param newIncentiveAddress The address associated with the incentive\r\n  function setIncentive(address newIncentiveAddress) external;\r\n}\r\n"
    },
    "contracts/interfaces/pool/IAlgebraPoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that can change\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolState {\r\n  /// @notice The globalState structure in the pool stores many values but requires only one slot\r\n  /// and is exposed as a single method to save gas when accessed externally.\r\n  /// @return price The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value;\r\n  /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run;\r\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary;\r\n  /// @return prevInitializedTick The previous initialized tick\r\n  /// @return fee The last pool fee value in hundredths of a bip, i.e. 1e-6\r\n  /// @return timepointIndex The index of the last written timepoint\r\n  /// @return communityFee The community fee percentage of the swap fee in thousandths (1e-3)\r\n  /// @return unlocked Whether the pool is currently locked to reentrancy\r\n  function globalState()\r\n    external\r\n    view\r\n    returns (uint160 price, int24 tick, int24 prevInitializedTick, uint16 fee, uint16 timepointIndex, uint8 communityFee, bool unlocked);\r\n\r\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n  /// @dev This value can overflow the uint256\r\n  function totalFeeGrowth0Token() external view returns (uint256);\r\n\r\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n  /// @dev This value can overflow the uint256\r\n  function totalFeeGrowth1Token() external view returns (uint256);\r\n\r\n  /// @notice The currently in range liquidity available to the pool\r\n  /// @dev This value has no relationship to the total liquidity across all ticks.\r\n  /// Returned value cannot exceed type(uint128).max\r\n  function liquidity() external view returns (uint128);\r\n\r\n  /// @notice The current tick spacing\r\n  /// @dev Ticks can only be used at multiples of this value\r\n  /// e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\r\n  /// This value is an int24 to avoid casting even though it is always positive.\r\n  /// @return The current tick spacing\r\n  function tickSpacing() external view returns (int24);\r\n\r\n  /// @notice The current tick spacing for limit orders\r\n  /// @dev Ticks can only be used for limit orders at multiples of this value\r\n  /// This value is an int24 to avoid casting even though it is always positive.\r\n  /// @return The current tick spacing for limit orders\r\n  function tickSpacingLimitOrders() external view returns (int24);\r\n\r\n  /// @notice The timestamp of the last sending of tokens to community vault\r\n  function communityFeeLastTimestamp() external view returns (uint32);\r\n\r\n  /// @notice The amounts of token0 and token1 that will be sent to the vault\r\n  /// @dev Will be sent COMMUNITY_FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp\r\n  function getCommunityFeePending() external view returns (uint128 communityFeePending0, uint128 communityFeePending1);\r\n\r\n  /// @notice The tracked token0 and token1 reserves of pool\r\n  /// @dev If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee.\r\n  /// If the balance exceeds uint128, the excess will be sent to the communityVault.\r\n  function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\r\n\r\n  /// @notice The accumulator of seconds per liquidity since the pool was first initialized\r\n  function secondsPerLiquidityCumulative() external view returns (uint160);\r\n\r\n  /// @notice Look up information about a specific tick in the pool\r\n  /// @param tick The tick to look up\r\n  /// @return liquidityTotal The total amount of position liquidity that uses the pool either as tick lower or tick upper\r\n  /// @return liquidityDelta How much liquidity changes when the pool price crosses the tick\r\n  /// @return outerFeeGrowth0Token The fee growth on the other side of the tick from the current tick in token0\r\n  /// @return outerFeeGrowth1Token The fee growth on the other side of the tick from the current tick in token1\r\n  /// @return prevTick The previous tick in tick list\r\n  /// @return nextTick The next tick in tick list\r\n  /// @return outerSecondsPerLiquidity The seconds spent per liquidity on the other side of the tick from the current tick\r\n  /// @return outerSecondsSpent The seconds spent on the other side of the tick from the current tick\r\n  /// @return hasLimitOrders Whether there are limit orders on this tick or not\r\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n  /// a specific position.\r\n  function ticks(\r\n    int24 tick\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint128 liquidityTotal,\r\n      int128 liquidityDelta,\r\n      uint256 outerFeeGrowth0Token,\r\n      uint256 outerFeeGrowth1Token,\r\n      int24 prevTick,\r\n      int24 nextTick,\r\n      uint160 outerSecondsPerLiquidity,\r\n      uint32 outerSecondsSpent,\r\n      bool hasLimitOrders\r\n    );\r\n\r\n  /// @notice Returns the summary information about a limit orders at tick\r\n  /// @param tick The tick to look up\r\n  /// @return amountToSell The amount of tokens to sell. Has only relative meaning\r\n  /// @return soldAmount The amount of tokens already sold. Has only relative meaning\r\n  /// @return boughtAmount0Cumulative The accumulator of bought tokens0 per amountToSell. Has only relative meaning\r\n  /// @return boughtAmount1Cumulative The accumulator of bought tokens1 per amountToSell. Has only relative meaning\r\n  /// @return initialized Will be true if a limit order was created at least once on this tick\r\n  function limitOrders(\r\n    int24 tick\r\n  )\r\n    external\r\n    view\r\n    returns (uint128 amountToSell, uint128 soldAmount, uint256 boughtAmount0Cumulative, uint256 boughtAmount1Cumulative, bool initialized);\r\n\r\n  /// @notice Returns 256 packed tick initialized boolean values. See TickTree for more information\r\n  function tickTable(int16 wordPosition) external view returns (uint256);\r\n\r\n  /// @notice Returns the information about a position by the position's key\r\n  /// @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\r\n  /// @return liquidity The amount of liquidity in the position\r\n  /// @return innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke\r\n  /// @return innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke\r\n  /// @return fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke\r\n  /// @return fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\r\n  function positions(\r\n    bytes32 key\r\n  ) external view returns (uint256 liquidity, uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token, uint128 fees0, uint128 fees1);\r\n\r\n  /// @notice Returns the information about active incentive\r\n  /// @dev if there is no active incentive at the moment, incentiveAddress would be equal to address(0)\r\n  /// @return incentiveAddress The address associated with the current active incentive\r\n  function activeIncentive() external view returns (address incentiveAddress);\r\n}\r\n"
    },
    "contracts/libraries/AdaptiveFee.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport '../base/AlgebraFeeConfiguration.sol';\r\nimport './Constants.sol';\r\n\r\n/// @title AdaptiveFee\r\n/// @notice Calculates fee based on combination of sigmoids\r\nlibrary AdaptiveFee {\r\n  /// @notice Returns default initial fee configuration\r\n  function initialFeeConfiguration() internal pure returns (AlgebraFeeConfiguration memory) {\r\n    return\r\n      AlgebraFeeConfiguration(\r\n        3000 - Constants.BASE_FEE, // alpha1, max value of the first sigmoid in hundredths of a bip, i.e. 1e-6\r\n        15000 - 3000, // alpha2, max value of the second sigmoid in hundredths of a bip, i.e. 1e-6\r\n        360, // beta1, shift along the x-axis (volatility) for the first sigmoid\r\n        60000, // beta2, shift along the x-axis (volatility) for the second sigmoid\r\n        59, // gamma1, horizontal stretch factor for the first sigmoid\r\n        8500, // gamma2, horizontal stretch factor for the second sigmoid\r\n        Constants.BASE_FEE // baseFee in hundredths of a bip, i.e. 1e-6\r\n      );\r\n  }\r\n\r\n  /// @notice Validates fee configuration.\r\n  /// @dev Maximum fee value capped by baseFee + alpha1 + alpha2 must be <= type(uint16).max\r\n  /// gammas must be > 0\r\n  function validateFeeConfiguration(AlgebraFeeConfiguration memory _config) internal pure {\r\n    require(uint256(_config.alpha1) + uint256(_config.alpha2) + uint256(_config.baseFee) <= type(uint16).max, 'Max fee exceeded');\r\n    require(_config.gamma1 != 0 && _config.gamma2 != 0, 'Gammas must be > 0');\r\n  }\r\n\r\n  /// @notice Calculates fee based on formula:\r\n  /// baseFee + sigmoidVolume(sigmoid1(volatility, volumePerLiquidity) + sigmoid2(volatility, volumePerLiquidity))\r\n  /// maximum value capped by baseFee + alpha1 + alpha2\r\n  function getFee(uint88 volatility, AlgebraFeeConfiguration memory config) internal pure returns (uint16 fee) {\r\n    unchecked {\r\n      volatility /= 15; // normalize for 15 sec interval\r\n      uint256 sumOfSigmoids = sigmoid(volatility, config.gamma1, config.alpha1, config.beta1) +\r\n        sigmoid(volatility, config.gamma2, config.alpha2, config.beta2);\r\n\r\n      if (sumOfSigmoids > type(uint16).max) sumOfSigmoids = type(uint16).max; // should be impossible, just in case\r\n\r\n      return uint16(config.baseFee + sumOfSigmoids); // safe since alpha1 + alpha2 + baseFee _must_ be <= type(uint16).max\r\n    }\r\n  }\r\n\r\n  /// @notice calculates α / (1 + e^( (β-x) / γ))\r\n  /// that is a sigmoid with a maximum value of α, x-shifted by β, and stretched by γ\r\n  /// @dev returns uint256 for fuzzy testing. Guaranteed that the result is not greater than alpha\r\n  function sigmoid(uint256 x, uint16 g, uint16 alpha, uint256 beta) internal pure returns (uint256 res) {\r\n    unchecked {\r\n      if (x > beta) {\r\n        x = x - beta;\r\n        if (x >= 6 * uint256(g)) return alpha; // so x < 19 bits\r\n        uint256 g4 = uint256(g) ** 4; // < 64 bits (4*16)\r\n        uint256 ex = expXg4(x, g, g4); // < 155 bits\r\n        res = (alpha * ex) / (g4 + ex); // in worst case: (16 + 155 bits) / 155 bits\r\n        // so res <= alpha\r\n      } else {\r\n        x = beta - x;\r\n        if (x >= 6 * uint256(g)) return 0; // so x < 19 bits\r\n        uint256 g4 = uint256(g) ** 4; // < 64 bits (4*16)\r\n        uint256 ex = g4 + expXg4(x, g, g4); // < 156 bits\r\n        res = (alpha * g4) / ex; // in worst case: (16 + 128 bits) / 156 bits\r\n        // g8 <= ex, so res <= alpha\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice calculates e^(x/g) * g^4 in a series, since (around zero):\r\n  /// e^x = 1 + x + x^2/2 + ... + x^n/n! + ...\r\n  /// e^(x/g) = 1 + x/g + x^2/(2*g^2) + ... + x^(n)/(g^n * n!) + ...\r\n  /// @dev has good accuracy only if x/g < 6\r\n  function expXg4(uint256 x, uint16 g, uint256 gHighestDegree) internal pure returns (uint256 res) {\r\n    uint256 closestValue; // nearest 'table' value of e^(x/g), multiplied by 10^20\r\n    assembly {\r\n      let xdg := div(x, g)\r\n      switch xdg\r\n      case 0 {\r\n        closestValue := 100000000000000000000 // 1\r\n      }\r\n      case 1 {\r\n        closestValue := 271828182845904523536 // ~= e\r\n      }\r\n      case 2 {\r\n        closestValue := 738905609893065022723 // ~= e^2\r\n      }\r\n      case 3 {\r\n        closestValue := 2008553692318766774092 // ~= e^3\r\n      }\r\n      case 4 {\r\n        closestValue := 5459815003314423907811 // ~= e^4\r\n      }\r\n      default {\r\n        closestValue := 14841315910257660342111 // ~= e^5\r\n      }\r\n\r\n      x := mod(x, g)\r\n    }\r\n\r\n    unchecked {\r\n      if (x >= g / 2) {\r\n        // (x - closestValue) >= 0.5, so closestValue := closestValue * e^0.5\r\n        x -= g / 2;\r\n        closestValue = (closestValue * 164872127070012814684) / 1e20;\r\n      }\r\n\r\n      // After calculating the closestValue x/g is <= 0.5, so that the series in the neighborhood of zero converges with sufficient speed\r\n      uint256 xLowestDegree = x;\r\n      res = gHighestDegree; // g**4, res < 64 bits\r\n\r\n      gHighestDegree /= g; // g**3\r\n      res += xLowestDegree * gHighestDegree; // g**4 + x*g**3, res < 68\r\n\r\n      gHighestDegree /= g; // g**2\r\n      xLowestDegree *= x; // x**2\r\n      // g**4 + x * g**3 + (x**2 * g**2) / 2, res < 71\r\n      res += (xLowestDegree * gHighestDegree) / 2;\r\n\r\n      gHighestDegree /= g; // g\r\n      xLowestDegree *= x; // x**3\r\n      // g^4 + x * g^3 + (x^2 * g^2)/2 + x^3(g*4 + x)/24, res < 73\r\n      res += (xLowestDegree * g * 4 + xLowestDegree * x) / 24;\r\n\r\n      // res = g^4 * (1 + x/g + x^2/(2*g^2) + x^3/(6*g^3) + x^4/(24*g^4)) * closestValue / 10^20, closestValue < 75 bits, res < 155\r\n      res = (res * closestValue) / (1e20);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/Constants.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.8.17;\r\n\r\nlibrary Constants {\r\n  uint8 internal constant RESOLUTION = 96;\r\n  uint256 internal constant Q32 = 1 << 32;\r\n  uint256 internal constant Q48 = 1 << 48;\r\n  uint256 internal constant Q64 = 1 << 64;\r\n  uint256 internal constant Q96 = 1 << 96;\r\n  uint256 internal constant Q128 = 1 << 128;\r\n  uint256 internal constant Q144 = 1 << 144;\r\n  int256 internal constant Q160 = 1 << 160;\r\n\r\n  uint16 internal constant BASE_FEE = 0.0001e6; // init minimum fee value in hundredths of a bip (0.01%)\r\n  uint24 internal constant FEE_DENOMINATOR = 1e6;\r\n  int24 internal constant INIT_TICK_SPACING = 60;\r\n  int24 internal constant MAX_TICK_SPACING = 500;\r\n\r\n  // Defines the maximum and minimum ticks allowed for limit orders. Corresponds to the range of possible\r\n  // price values ​​in UniswapV2. Due to this limitation, sufficient accuracy is achieved even with the minimum allowable tick\r\n  int24 constant MAX_LIMIT_ORDER_TICK = 776363;\r\n\r\n  // the frequency with which the accumulated community fees are sent to the vault\r\n  uint32 internal constant COMMUNITY_FEE_TRANSFER_FREQUENCY = 8 hours;\r\n\r\n  // max(uint128) / ( (MAX_TICK - MIN_TICK) )\r\n  uint128 internal constant MAX_LIQUIDITY_PER_TICK = 40564824043007195767232224305152;\r\n\r\n  uint8 internal constant MAX_COMMUNITY_FEE = 0.25e3; // 25%\r\n  uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1e3;\r\n  // role that can change communityFee and tickspacing in pools\r\n  bytes32 internal constant POOLS_ADMINISTRATOR_ROLE = keccak256('POOLS_ADMINISTRATOR');\r\n}\r\n"
    },
    "contracts/libraries/DataStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\n/// @title DataStorage\r\n/// @notice Provides price, liquidity, volatility data useful for a wide variety of system designs\r\n/// @dev Instances of stored dataStorage data, \"timepoints\", are collected in the dataStorage array\r\n/// Timepoints are overwritten when the full length of the dataStorage array is populated.\r\n/// The most recent timepoint is available by passing 0 to getSingleTimepoint()\r\nlibrary DataStorage {\r\n  /// @notice `target` timestamp is older than oldest timepoint\r\n  error targetIsTooOld();\r\n\r\n  uint32 internal constant WINDOW = 1 days;\r\n  uint256 private constant UINT16_MODULO = 65536;\r\n\r\n  struct Timepoint {\r\n    bool initialized; // whether or not the timepoint is initialized\r\n    uint32 blockTimestamp; // the block timestamp of the timepoint\r\n    int56 tickCumulative; // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\r\n    uint88 volatilityCumulative; // the volatility accumulator; overflow after ~34800 years is desired :)\r\n    int24 tick; // tick at this blockTimestamp\r\n    int24 averageTick; // average tick at this blockTimestamp (for WINDOW seconds)\r\n    uint16 windowStartIndex; // index of closest timepoint >= WINDOW seconds ago, used to speed up searches\r\n  }\r\n\r\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\r\n  /// @param self The stored dataStorage array\r\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\r\n  /// @param tick Initial tick\r\n  function initialize(Timepoint[UINT16_MODULO] storage self, uint32 time, int24 tick) internal {\r\n    Timepoint storage _zero = self[0];\r\n    require(!_zero.initialized);\r\n    (_zero.initialized, _zero.blockTimestamp, _zero.tick, _zero.averageTick) = (true, time, tick, tick);\r\n  }\r\n\r\n  /// @notice Writes a dataStorage timepoint to the array\r\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\r\n  /// @param self The stored dataStorage array\r\n  /// @param lastIndex The index of the timepoint that was most recently written to the timepoints array\r\n  /// @param blockTimestamp The timestamp of the new timepoint\r\n  /// @param tick The active tick at the time of the new timepoint\r\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\r\n  /// @return oldestIndex The index of the oldest timepoint\r\n  function write(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint16 lastIndex,\r\n    uint32 blockTimestamp,\r\n    int24 tick\r\n  ) internal returns (uint16 indexUpdated, uint16 oldestIndex) {\r\n    Timepoint memory last = self[lastIndex];\r\n    // early return if we've already written a timepoint this block\r\n    if (last.blockTimestamp == blockTimestamp) return (lastIndex, 0);\r\n\r\n    // get next index considering overflow\r\n    unchecked {\r\n      indexUpdated = lastIndex + 1;\r\n    }\r\n\r\n    // check if we have overflow in the past\r\n    if (self[indexUpdated].initialized) oldestIndex = indexUpdated;\r\n\r\n    (int24 avgTick, uint16 windowStartIndex) = _getAverageTickCasted(\r\n      self,\r\n      blockTimestamp,\r\n      tick,\r\n      lastIndex,\r\n      oldestIndex,\r\n      last.blockTimestamp,\r\n      last.tickCumulative\r\n    );\r\n    self[indexUpdated] = _createNewTimepoint(last, blockTimestamp, tick, avgTick, windowStartIndex);\r\n    if (oldestIndex == indexUpdated) oldestIndex++; // previous oldest index has been overwritten\r\n  }\r\n\r\n  /// @dev Reverts if a timepoint at or before the desired timepoint timestamp does not exist.\r\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\r\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\r\n  /// at exactly the timestamp between the two timepoints.\r\n  /// @param self The stored dataStorage array\r\n  /// @param time The current block timestamp\r\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return a timepoint\r\n  /// @param tick The current tick\r\n  /// @param lastIndex The index of the timepoint that was most recently written to the timepoints array\r\n  /// @param oldestIndex The index of the oldest timepoint\r\n  /// @return targetTimepoint desired timepoint or it's approximation\r\n  function getSingleTimepoint(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    uint32 secondsAgo,\r\n    int24 tick,\r\n    uint16 lastIndex,\r\n    uint16 oldestIndex\r\n  ) internal view returns (Timepoint memory targetTimepoint) {\r\n    unchecked {\r\n      uint32 target = time - secondsAgo;\r\n      (Timepoint storage beforeOrAt, Timepoint storage atOrAfter, bool samePoint, ) = _getTimepointsAt(self, time, target, lastIndex, oldestIndex);\r\n\r\n      targetTimepoint = beforeOrAt;\r\n      if (target == targetTimepoint.blockTimestamp) return targetTimepoint; // we're at the left boundary\r\n      if (samePoint) {\r\n        // if target is newer than last timepoint\r\n        (int24 avgTick, uint16 windowStartIndex) = _getAverageTickCasted(\r\n          self,\r\n          time,\r\n          tick,\r\n          lastIndex,\r\n          oldestIndex,\r\n          targetTimepoint.blockTimestamp,\r\n          targetTimepoint.tickCumulative\r\n        );\r\n        return _createNewTimepoint(targetTimepoint, time - secondsAgo, tick, avgTick, windowStartIndex);\r\n      }\r\n\r\n      (uint32 timestampAfter, int56 tickCumulativeAfter) = (atOrAfter.blockTimestamp, atOrAfter.tickCumulative);\r\n      if (target == timestampAfter) return atOrAfter; // we're at the right boundary\r\n\r\n      // we're in the middle\r\n      (uint32 timepointTimeDelta, uint32 targetDelta) = (timestampAfter - targetTimepoint.blockTimestamp, target - targetTimepoint.blockTimestamp);\r\n\r\n      targetTimepoint.tickCumulative +=\r\n        ((tickCumulativeAfter - targetTimepoint.tickCumulative) / int56(uint56(timepointTimeDelta))) *\r\n        int56(uint56(targetDelta));\r\n      targetTimepoint.volatilityCumulative +=\r\n        ((atOrAfter.volatilityCumulative - targetTimepoint.volatilityCumulative) / timepointTimeDelta) *\r\n        targetDelta;\r\n    }\r\n  }\r\n\r\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\r\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\r\n  /// @param self The stored dataStorage array\r\n  /// @param time The current block.timestamp\r\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return a timepoint\r\n  /// @param tick The current tick\r\n  /// @param lastIndex The index of the timepoint that was most recently written to the timepoints array\r\n  /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\r\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\r\n  function getTimepoints(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    uint32[] memory secondsAgos,\r\n    int24 tick,\r\n    uint16 lastIndex\r\n  ) internal view returns (int56[] memory tickCumulatives, uint112[] memory volatilityCumulatives) {\r\n    uint256 secondsLength = secondsAgos.length;\r\n    tickCumulatives = new int56[](secondsLength);\r\n    volatilityCumulatives = new uint112[](secondsLength);\r\n\r\n    uint16 oldestIndex = getOldestIndex(self, lastIndex);\r\n    Timepoint memory current;\r\n    unchecked {\r\n      for (uint256 i; i < secondsLength; ++i) {\r\n        current = getSingleTimepoint(self, time, secondsAgos[i], tick, lastIndex, oldestIndex);\r\n        (tickCumulatives[i], volatilityCumulatives[i]) = (current.tickCumulative, current.volatilityCumulative);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Returns the index of the oldest timepoint\r\n  /// @param self The stored dataStorage array\r\n  /// @param lastIndex The index of the timepoint that was most recently written to the timepoints array\r\n  /// @return oldestIndex The index of the oldest timepoint\r\n  function getOldestIndex(Timepoint[UINT16_MODULO] storage self, uint16 lastIndex) internal view returns (uint16 oldestIndex) {\r\n    unchecked {\r\n      uint16 nextIndex = lastIndex + 1; // considering overflow\r\n      if (self[nextIndex].initialized) oldestIndex = nextIndex; // check if we have overflow in the past\r\n    }\r\n  }\r\n\r\n  /// @notice Returns average volatility in the range from time-WINDOW to time\r\n  /// @param self The stored dataStorage array\r\n  /// @param time The current block.timestamp\r\n  /// @param tick The current tick\r\n  /// @param lastIndex The index of the timepoint that was most recently written to the timepoints array\r\n  /// @param oldestIndex The index of the oldest timepoint\r\n  /// @return volatilityAverage The average volatility in the recent range\r\n  function getAverageVolatility(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    int24 tick,\r\n    uint16 lastIndex,\r\n    uint16 oldestIndex,\r\n    uint88 lastCumulativeVolatility\r\n  ) internal view returns (uint88 volatilityAverage) {\r\n    unchecked {\r\n      uint32 oldestTimestamp = self[oldestIndex].blockTimestamp;\r\n\r\n      if (_lteConsideringOverflow(oldestTimestamp, time - WINDOW, time)) {\r\n        if (self[lastIndex].blockTimestamp == time) {\r\n          // we can simplify the search, because when the timepoint was created, the search was already done\r\n          oldestIndex = self[lastIndex].windowStartIndex;\r\n          oldestTimestamp = self[oldestIndex].blockTimestamp;\r\n          if (lastIndex != oldestIndex) lastIndex = oldestIndex + 1;\r\n        }\r\n\r\n        uint88 cumulativeVolatilityAtStart = _getVolatilityCumulativeAt(self, time, WINDOW, tick, lastIndex, oldestIndex);\r\n        return ((lastCumulativeVolatility - cumulativeVolatilityAtStart) / WINDOW); // sample is big enough to ignore bias of variance\r\n      } else if (time != oldestTimestamp) {\r\n        // recorded timepoints are not enough, so we will extrapolate\r\n        uint88 _oldestVolatilityCumulative = self[oldestIndex].volatilityCumulative;\r\n        uint32 unbiasedDenominator = time - oldestTimestamp;\r\n        if (unbiasedDenominator > 1) unbiasedDenominator--; // Bessel's correction for \"small\" sample\r\n        return ((lastCumulativeVolatility - _oldestVolatilityCumulative) / unbiasedDenominator);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ##### further functions are private to the library, but some are made internal for fuzzy testing #####\r\n\r\n  /// @notice Transforms a previous timepoint into a new timepoint, given the passage of time and the current tick and liquidity values\r\n  /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\r\n  /// @dev The function changes the structure given to the input, and does not create a new one\r\n  /// @param last The specified timepoint to be used in creation of new timepoint\r\n  /// @param blockTimestamp The timestamp of the new timepoint\r\n  /// @param tick The active tick at the time of the new timepoint\r\n  /// @param averageTick The average tick at the time of the new timepoint\r\n  /// @param windowStartIndex The index of closest timepoint >= WINDOW seconds ago\r\n  /// @return Timepoint The newly populated timepoint\r\n  function _createNewTimepoint(\r\n    Timepoint memory last,\r\n    uint32 blockTimestamp,\r\n    int24 tick,\r\n    int24 averageTick,\r\n    uint16 windowStartIndex\r\n  ) private pure returns (Timepoint memory) {\r\n    unchecked {\r\n      uint32 delta = blockTimestamp - last.blockTimestamp; // overflow is desired\r\n      // We don't create a new structure in memory to save gas. Therefore, the function changes the old structure\r\n      last.initialized = true;\r\n      last.blockTimestamp = blockTimestamp;\r\n      last.tickCumulative += int56(tick) * int56(uint56(delta));\r\n      last.volatilityCumulative += uint88(_volatilityOnRange(int256(uint256(delta)), last.tick, tick, last.averageTick, averageTick)); // always fits 88 bits\r\n      last.tick = tick;\r\n      last.averageTick = averageTick;\r\n      last.windowStartIndex = windowStartIndex;\r\n      return last;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates volatility between two sequential timepoints with resampling to 1 sec frequency\r\n  /// @param dt Timedelta between timepoints, must be within uint32 range\r\n  /// @param tick0 The tick at the left timepoint, must be within int24 range\r\n  /// @param tick1 The tick at the right timepoint, must be within int24 range\r\n  /// @param avgTick0 The average tick at the left timepoint, must be within int24 range\r\n  /// @param avgTick1 The average tick at the right timepoint, must be within int24 range\r\n  /// @return volatility The volatility between two sequential timepoints\r\n  /// If the requirements for the parameters are met, it always fits 88 bits\r\n  function _volatilityOnRange(int256 dt, int256 tick0, int256 tick1, int256 avgTick0, int256 avgTick1) internal pure returns (uint256 volatility) {\r\n    // On the time interval from the previous timepoint to the current\r\n    // we can represent tick and average tick change as two straight lines:\r\n    // tick = k*t + b, where k and b are some constants\r\n    // avgTick = p*t + q, where p and q are some constants\r\n    // we want to get sum of (tick(t) - avgTick(t))^2 for every t in the interval (0; dt]\r\n    // so: (tick(t) - avgTick(t))^2 = ((k*t + b) - (p*t + q))^2 = (k-p)^2 * t^2 + 2(k-p)(b-q)t + (b-q)^2\r\n    // since everything except t is a constant, we need to use progressions for t and t^2:\r\n    // sum(t) for t from 1 to dt = dt*(dt + 1)/2 = sumOfSequence\r\n    // sum(t^2) for t from 1 to dt = dt*(dt+1)*(2dt + 1)/6 = sumOfSquares\r\n    // so result will be: (k-p)^2 * sumOfSquares + 2(k-p)(b-q)*sumOfSequence + dt*(b-q)^2\r\n    unchecked {\r\n      int256 K = (tick1 - tick0) - (avgTick1 - avgTick0); // (k - p)*dt\r\n      int256 B = (tick0 - avgTick0) * dt; // (b - q)*dt\r\n      int256 sumOfSequence = dt * (dt + 1); // sumOfSequence * 2\r\n      int256 sumOfSquares = sumOfSequence * (2 * dt + 1); // sumOfSquares * 6\r\n      volatility = uint256((K ** 2 * sumOfSquares + 6 * B * K * sumOfSequence + 6 * dt * B ** 2) / (6 * dt ** 2));\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates average tick for WINDOW seconds at the moment of `time`\r\n  /// @dev Guaranteed that the result is within the bounds of int24\r\n  /// @return avgTick int256 for fuzzy tests\r\n  /// @return windowStartIndex The index of closest timepoint <= WINDOW seconds ago\r\n  function _getAverageTickCasted(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    int24 tick,\r\n    uint16 lastIndex,\r\n    uint16 oldestIndex,\r\n    uint32 lastTimestamp,\r\n    int56 lastTickCumulative\r\n  ) private view returns (int24 avgTick, uint16 windowStartIndex) {\r\n    (int256 _avgTick, uint256 _windowStartIndex) = _getAverageTick(self, time, tick, lastIndex, oldestIndex, lastTimestamp, lastTickCumulative);\r\n    unchecked {\r\n      (avgTick, windowStartIndex) = (int24(_avgTick), uint16(_windowStartIndex)); // overflow in uint16(_windowStartIndex) is desired\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates average tick for WINDOW seconds at the moment of `time`\r\n  /// @dev Guaranteed that the result is within the bounds of int24, but result is not casted\r\n  /// @return avgTick int256 for fuzzy tests\r\n  /// @return windowStartIndex The index of closest timepoint <= WINDOW seconds ago\r\n  function _getAverageTick(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    int24 tick,\r\n    uint16 lastIndex,\r\n    uint16 oldestIndex,\r\n    uint32 lastTimestamp,\r\n    int56 lastTickCumulative\r\n  ) internal view returns (int256 avgTick, uint256 windowStartIndex) {\r\n    (uint32 oldestTimestamp, int56 oldestTickCumulative) = (self[oldestIndex].blockTimestamp, self[oldestIndex].tickCumulative);\r\n    unchecked {\r\n      if (!_lteConsideringOverflow(oldestTimestamp, time - WINDOW, time)) {\r\n        // if oldest is newer than WINDOW ago\r\n        return (\r\n          (lastTimestamp == oldestTimestamp) ? tick : (lastTickCumulative - oldestTickCumulative) / int56(uint56(lastTimestamp - oldestTimestamp)),\r\n          oldestIndex\r\n        );\r\n      }\r\n\r\n      if (_lteConsideringOverflow(lastTimestamp, time - WINDOW, time)) {\r\n        Timepoint storage _start = self[lastIndex - 1]; // considering underflow\r\n        (bool initialized, uint32 startTimestamp, int56 startTickCumulative) = (_start.initialized, _start.blockTimestamp, _start.tickCumulative);\r\n        avgTick = initialized ? (lastTickCumulative - startTickCumulative) / int56(uint56(lastTimestamp - startTimestamp)) : tick;\r\n        windowStartIndex = lastIndex;\r\n      } else {\r\n        if (time == lastTimestamp) {\r\n          oldestIndex = self[lastIndex].windowStartIndex;\r\n          lastIndex = oldestIndex + 1;\r\n        }\r\n        int56 tickCumulativeAtStart;\r\n        (tickCumulativeAtStart, windowStartIndex) = _getTickCumulativeAt(self, time, WINDOW, tick, lastIndex, oldestIndex);\r\n\r\n        //    current-WINDOW  last   current\r\n        // _________*____________*_______*_\r\n        //           ||||||||||||\r\n        avgTick = (lastTickCumulative - tickCumulativeAtStart) / int56(uint56(lastTimestamp - time + WINDOW));\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice comparator for 32-bit timestamps\r\n  /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to currentTime\r\n  /// @param a A comparison timestamp from which to determine the relative position of `currentTime`\r\n  /// @param b From which to determine the relative position of `currentTime`\r\n  /// @param currentTime A timestamp truncated to 32 bits\r\n  /// @return res Whether `a` is chronologically <= `b`\r\n  function _lteConsideringOverflow(uint32 a, uint32 b, uint32 currentTime) private pure returns (bool res) {\r\n    res = a > currentTime;\r\n    if (res == b > currentTime) res = a <= b; // if both are on the same side\r\n  }\r\n\r\n  /// @notice Calculates cumulative volatility at the moment of `time` - `secondsAgo`\r\n  /// @dev More optimal than via `getSingleTimepoint`\r\n  /// @return volatilityCumulative The cumulative volatility\r\n  function _getVolatilityCumulativeAt(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    uint32 secondsAgo,\r\n    int24 tick,\r\n    uint16 lastIndex,\r\n    uint16 oldestIndex\r\n  ) internal view returns (uint88 volatilityCumulative) {\r\n    unchecked {\r\n      uint32 target = time - secondsAgo;\r\n      (Timepoint memory beforeOrAt, Timepoint storage atOrAfter, bool samePoint, ) = _getTimepointsAt(self, time, target, lastIndex, oldestIndex);\r\n\r\n      if (target == beforeOrAt.blockTimestamp) return beforeOrAt.volatilityCumulative; // we're at the left boundary\r\n      if (samePoint) {\r\n        // since target != beforeOrAt.blockTimestamp, `samePoint` means that target is newer than last timepoint\r\n        (int24 avgTick, ) = _getAverageTickCasted(self, time, tick, lastIndex, oldestIndex, beforeOrAt.blockTimestamp, beforeOrAt.tickCumulative);\r\n        return (beforeOrAt.volatilityCumulative +\r\n          uint88(_volatilityOnRange(int256(uint256(target - beforeOrAt.blockTimestamp)), beforeOrAt.tick, tick, beforeOrAt.averageTick, avgTick)));\r\n      }\r\n\r\n      (uint32 timestampAfter, uint88 volatilityCumulativeAfter) = (atOrAfter.blockTimestamp, atOrAfter.volatilityCumulative);\r\n      if (target == timestampAfter) return volatilityCumulativeAfter; // we're at the right boundary\r\n\r\n      // we're in the middle\r\n      (uint32 timepointTimeDelta, uint32 targetDelta) = (timestampAfter - beforeOrAt.blockTimestamp, target - beforeOrAt.blockTimestamp);\r\n\r\n      return beforeOrAt.volatilityCumulative + ((volatilityCumulativeAfter - beforeOrAt.volatilityCumulative) / timepointTimeDelta) * targetDelta;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates cumulative tick at the moment of `time` - `secondsAgo`\r\n  /// @dev More optimal than via `getSingleTimepoint`\r\n  /// @return tickCumulative The cumulative tick\r\n  /// @return indexBeforeOrAt The index of closest timepoint before ot at the moment of `time` - `secondsAgo`\r\n  function _getTickCumulativeAt(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    uint32 secondsAgo,\r\n    int24 tick,\r\n    uint16 lastIndex,\r\n    uint16 oldestIndex\r\n  ) private view returns (int56 tickCumulative, uint256 indexBeforeOrAt) {\r\n    unchecked {\r\n      uint32 target = time - secondsAgo;\r\n      (Timepoint storage beforeOrAt, Timepoint storage atOrAfter, bool samePoint, uint256 _indexBeforeOrAt) = _getTimepointsAt(\r\n        self,\r\n        time,\r\n        target,\r\n        lastIndex,\r\n        oldestIndex\r\n      );\r\n\r\n      (uint32 timestampBefore, int56 tickCumulativeBefore) = (beforeOrAt.blockTimestamp, beforeOrAt.tickCumulative);\r\n      if (target == timestampBefore) return (tickCumulativeBefore, _indexBeforeOrAt); // we're at the left boundary\r\n      // since target != timestampBefore, `samePoint` means that target is newer than last timepoint\r\n      if (samePoint) return ((tickCumulativeBefore + int56(tick) * int56(uint56(target - timestampBefore))), _indexBeforeOrAt); // if target is newer than last timepoint\r\n\r\n      (uint32 timestampAfter, int56 tickCumulativeAfter) = (atOrAfter.blockTimestamp, atOrAfter.tickCumulative);\r\n      if (target == timestampAfter) return (tickCumulativeAfter, _indexBeforeOrAt); // we're at the right boundary\r\n\r\n      // we're in the middle\r\n      (uint32 timepointTimeDelta, uint32 targetDelta) = (timestampAfter - timestampBefore, target - timestampBefore);\r\n      return (\r\n        tickCumulativeBefore + ((tickCumulativeAfter - tickCumulativeBefore) / int56(uint56(timepointTimeDelta))) * int56(uint56(targetDelta)),\r\n        _indexBeforeOrAt\r\n      );\r\n    }\r\n  }\r\n\r\n  /// @notice Returns closest timepoint or timepoints to the moment of `target`\r\n  /// @return beforeOrAt The timepoint recorded before, or at, the target\r\n  /// @return atOrAfter The timepoint recorded at, or after, the target\r\n  /// @return samePoint Are `beforeOrAt` and `atOrAfter` the same or not\r\n  /// @return indexBeforeOrAt The index of closest timepoint before ot at the moment of `target`\r\n  function _getTimepointsAt(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    uint32 target,\r\n    uint16 lastIndex,\r\n    uint16 oldestIndex\r\n  ) private view returns (Timepoint storage beforeOrAt, Timepoint storage atOrAfter, bool samePoint, uint256 indexBeforeOrAt) {\r\n    // if target is newer than last timepoint\r\n    if (target == time || _lteConsideringOverflow(self[lastIndex].blockTimestamp, target, time)) {\r\n      return (self[lastIndex], self[lastIndex], true, lastIndex);\r\n    }\r\n\r\n    uint32 oldestTimestamp = self[oldestIndex].blockTimestamp;\r\n    if (!_lteConsideringOverflow(oldestTimestamp, target, time)) revert targetIsTooOld();\r\n\r\n    if (oldestTimestamp == target) return (self[oldestIndex], self[oldestIndex], true, oldestIndex);\r\n\r\n    unchecked {\r\n      if (time - target <= WINDOW) {\r\n        // we can limit the scope of the search\r\n        uint16 windowStartIndex = self[lastIndex].windowStartIndex;\r\n        if (windowStartIndex != oldestIndex) {\r\n          uint32 windowStartTimestamp = self[windowStartIndex].blockTimestamp;\r\n          if (_lteConsideringOverflow(oldestTimestamp, windowStartTimestamp, time)) {\r\n            (oldestIndex, oldestTimestamp) = (windowStartIndex, windowStartTimestamp);\r\n            if (oldestTimestamp == target) return (self[oldestIndex], self[oldestIndex], true, oldestIndex);\r\n          }\r\n        }\r\n      }\r\n      // no need to search if we already know the answer\r\n      if (lastIndex == oldestIndex + 1) return (self[oldestIndex], self[lastIndex], false, oldestIndex);\r\n    }\r\n\r\n    (beforeOrAt, atOrAfter, indexBeforeOrAt) = _binarySearch(self, time, target, lastIndex, oldestIndex);\r\n    return (beforeOrAt, atOrAfter, false, indexBeforeOrAt);\r\n  }\r\n\r\n  /// @notice Fetches the timepoints beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\r\n  /// The result may be the same timepoint, or adjacent timepoints.\r\n  /// @dev The answer must be contained in the array, used when the target is located within the stored timepoint\r\n  /// boundaries: older than the most recent timepoint and younger, or the same age as, the oldest timepoint\r\n  /// @param self The stored dataStorage array\r\n  /// @param time The current block.timestamp\r\n  /// @param target The timestamp at which the reserved timepoint should be for\r\n  /// @param lastIndex The index of the timepoint that was most recently written to the timepoints array\r\n  /// @param oldestIndex The index of the oldest timepoint in the timepoints array\r\n  /// @return beforeOrAt The timepoint recorded before, or at, the target\r\n  /// @return atOrAfter The timepoint recorded at, or after, the target\r\n  function _binarySearch(\r\n    Timepoint[UINT16_MODULO] storage self,\r\n    uint32 time,\r\n    uint32 target,\r\n    uint16 lastIndex,\r\n    uint16 oldestIndex\r\n  ) private view returns (Timepoint storage beforeOrAt, Timepoint storage atOrAfter, uint256 indexBeforeOrAt) {\r\n    unchecked {\r\n      uint256 left = oldestIndex; // oldest timepoint\r\n      uint256 right = lastIndex < oldestIndex ? lastIndex + UINT16_MODULO : lastIndex; // newest timepoint considering one index overflow\r\n      indexBeforeOrAt = (left + right) >> 1; // \"middle\" point between the boundaries\r\n\r\n      do {\r\n        beforeOrAt = self[uint16(indexBeforeOrAt)]; // checking the \"middle\" point between the boundaries\r\n        (bool initializedBefore, uint32 timestampBefore) = (beforeOrAt.initialized, beforeOrAt.blockTimestamp);\r\n        if (initializedBefore) {\r\n          if (_lteConsideringOverflow(timestampBefore, target, time)) {\r\n            // is current point before or at `target`?\r\n            atOrAfter = self[uint16(indexBeforeOrAt + 1)]; // checking the next point after \"middle\"\r\n            (bool initializedAfter, uint32 timestampAfter) = (atOrAfter.initialized, atOrAfter.blockTimestamp);\r\n            if (initializedAfter) {\r\n              if (_lteConsideringOverflow(target, timestampAfter, time)) {\r\n                // is the \"next\" point after or at `target`?\r\n                return (beforeOrAt, atOrAfter, indexBeforeOrAt); // the only fully correct way to finish\r\n              }\r\n              left = indexBeforeOrAt + 1; // \"next\" point is before the `target`, so looking in the right half\r\n            } else {\r\n              // beforeOrAt is initialized and <= target, and next timepoint is uninitialized\r\n              // should be impossible if initial boundaries and `target` are correct\r\n              return (beforeOrAt, beforeOrAt, indexBeforeOrAt);\r\n            }\r\n          } else {\r\n            right = indexBeforeOrAt - 1; // current point is after the `target`, so looking in the left half\r\n          }\r\n        } else {\r\n          // we've landed on an uninitialized timepoint, keep searching higher\r\n          // should be impossible if initial boundaries and `target` are correct\r\n          left = indexBeforeOrAt + 1;\r\n        }\r\n        indexBeforeOrAt = (left + right) >> 1; // calculating the new \"middle\" point index after updating the bounds\r\n      } while (true);\r\n\r\n      atOrAfter = beforeOrAt; // code is unreachable, to suppress compiler warning\r\n      assert(false); // code is unreachable, used for fuzzy testing\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\r\n    unchecked {\r\n      // 512-bit multiply [prod1 prod0] = a * b\r\n      // Compute the product mod 2**256 and mod 2**256 - 1\r\n      // then use the Chinese Remainder Theorem to reconstruct\r\n      // the 512 bit result. The result is stored in two 256\r\n      // variables such that product = prod1 * 2**256 + prod0\r\n      uint256 prod0 = a * b; // Least significant 256 bits of the product\r\n      uint256 prod1; // Most significant 256 bits of the product\r\n      assembly {\r\n        let mm := mulmod(a, b, not(0))\r\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n      }\r\n\r\n      // Make sure the result is less than 2**256.\r\n      // Also prevents denominator == 0\r\n      require(denominator > prod1);\r\n\r\n      // Handle non-overflow cases, 256 by 256 division\r\n      if (prod1 == 0) {\r\n        assembly {\r\n          result := div(prod0, denominator)\r\n        }\r\n        return result;\r\n      }\r\n\r\n      ///////////////////////////////////////////////\r\n      // 512 by 256 division.\r\n      ///////////////////////////////////////////////\r\n\r\n      // Make division exact by subtracting the remainder from [prod1 prod0]\r\n      // Compute remainder using mulmod\r\n      // Subtract 256 bit remainder from 512 bit number\r\n      assembly {\r\n        let remainder := mulmod(a, b, denominator)\r\n        prod1 := sub(prod1, gt(remainder, prod0))\r\n        prod0 := sub(prod0, remainder)\r\n      }\r\n\r\n      // Factor powers of two out of denominator\r\n      // Compute largest power of two divisor of denominator.\r\n      // Always >= 1.\r\n      uint256 twos = (0 - denominator) & denominator;\r\n      // Divide denominator by power of two\r\n      assembly {\r\n        denominator := div(denominator, twos)\r\n      }\r\n\r\n      // Divide [prod1 prod0] by the factors of two\r\n      assembly {\r\n        prod0 := div(prod0, twos)\r\n      }\r\n      // Shift in bits from prod1 into prod0. For this we need\r\n      // to flip `twos` such that it is 2**256 / twos.\r\n      // If twos is zero, then it becomes one\r\n      assembly {\r\n        twos := add(div(sub(0, twos), twos), 1)\r\n      }\r\n      prod0 |= prod1 * twos;\r\n\r\n      // Invert denominator mod 2**256\r\n      // Now that denominator is an odd number, it has an inverse\r\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n      // Compute the inverse by starting with a seed that is correct\r\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n      uint256 inv = (3 * denominator) ^ 2;\r\n      // Now use Newton-Raphson iteration to improve the precision.\r\n      // Thanks to Hensel's lifting lemma, this also works in modular\r\n      // arithmetic, doubling the correct bits in each step.\r\n      inv *= 2 - denominator * inv; // inverse mod 2**8\r\n      inv *= 2 - denominator * inv; // inverse mod 2**16\r\n      inv *= 2 - denominator * inv; // inverse mod 2**32\r\n      inv *= 2 - denominator * inv; // inverse mod 2**64\r\n      inv *= 2 - denominator * inv; // inverse mod 2**128\r\n      inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n      // Because the division is now exact we can divide by multiplying\r\n      // with the modular inverse of denominator. This will give us the\r\n      // correct result modulo 2**256. Since the preconditions guarantee\r\n      // that the outcome is less than 2**256, this is the final result.\r\n      // We don't need to compute the high bits of the result and prod1\r\n      // is no longer required.\r\n      result = prod0 * inv;\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\r\n    unchecked {\r\n      if (a == 0 || ((result = a * b) / a == b)) {\r\n        require(denominator > 0);\r\n        assembly {\r\n          result := add(div(result, denominator), gt(mod(result, denominator), 0))\r\n        }\r\n      } else {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n          require(result < type(uint256).max);\r\n          result++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Returns ceil(x / y)\r\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\r\n  /// @param x The dividend\r\n  /// @param y The divisor\r\n  /// @return z The quotient, ceil(x / y)\r\n  function unsafeDivRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    assembly {\r\n      z := add(div(x, y), gt(mod(x, y), 0))\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/LimitOrderManagement.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport '../interfaces/IAlgebraPoolErrors.sol';\r\nimport './FullMath.sol';\r\nimport './LiquidityMath.sol';\r\nimport './Constants.sol';\r\nimport './TickMath.sol';\r\n\r\n/// @title LimitOrderManagement\r\n/// @notice Contains functions for managing limit orders and relevant calculations\r\nlibrary LimitOrderManagement {\r\n  struct LimitOrder {\r\n    uint128 amountToSell;\r\n    uint128 soldAmount;\r\n    uint256 boughtAmount0Cumulative;\r\n    uint256 boughtAmount1Cumulative;\r\n    bool initialized;\r\n  }\r\n\r\n  /// @notice Updates a limit order state and returns true if the tick was flipped from initialized to uninitialized, or vice versa\r\n  /// @param self The mapping containing limit order cumulatives for initialized ticks\r\n  /// @param tick The tick that will be updated\r\n  /// @param currentTick The current tick in pool\r\n  /// @param amount The amount of liquidity that will be added/removed\r\n  /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\r\n  function addOrRemoveLimitOrder(\r\n    mapping(int24 => LimitOrder) storage self,\r\n    int24 tick,\r\n    int24 currentTick,\r\n    int128 amount\r\n  ) internal returns (bool flipped) {\r\n    if (tick >= Constants.MAX_LIMIT_ORDER_TICK || tick < -Constants.MAX_LIMIT_ORDER_TICK) revert IAlgebraPoolErrors.invalidTickForLimitOrder();\r\n\r\n    LimitOrder storage data = self[tick];\r\n    uint128 _amountToSell = data.amountToSell;\r\n\r\n    unchecked {\r\n      flipped = _amountToSell == 0; // calculate 'flipped' for amount > 0 case\r\n      _amountToSell = LiquidityMath.addDelta(_amountToSell, amount);\r\n      if (amount > 0) {\r\n        // check if a limit order can be closed at all\r\n        uint256 tickSqrtPrice = TickMath.getSqrtRatioAtTick(tick);\r\n        // MAX_LIMIT_ORDER_TICK check guarantees that this value does not overflow\r\n        uint256 priceX144 = FullMath.mulDiv(tickSqrtPrice, tickSqrtPrice, Constants.Q48);\r\n        uint256 amountToBuy = (tick > currentTick)\r\n          ? FullMath.mulDivRoundingUp(_amountToSell, priceX144, Constants.Q144)\r\n          : FullMath.mulDivRoundingUp(_amountToSell, Constants.Q144, priceX144);\r\n        if (amountToBuy > Constants.Q128 >> 1) revert IAlgebraPoolErrors.invalidAmountForLimitOrder();\r\n      } else {\r\n        flipped = _amountToSell == 0; // override 'flipped' value\r\n        if (flipped) data.soldAmount = 0; // reset filled amount if all orders are closed\r\n      }\r\n      data.amountToSell = _amountToSell;\r\n    }\r\n  }\r\n\r\n  /// @notice Adds/removes liquidity to tick with partly executed limit order\r\n  /// @param self The mapping containing limit order cumulatives for initialized ticks\r\n  /// @param tick The tick that will be updated\r\n  /// @param amount The amount of liquidity that will be added/removed\r\n  function addVirtualLiquidity(mapping(int24 => LimitOrder) storage self, int24 tick, int128 amount) internal {\r\n    LimitOrder storage data = self[tick];\r\n    if (amount > 0) {\r\n      data.amountToSell += uint128(amount);\r\n      data.soldAmount += uint128(amount);\r\n    } else {\r\n      data.amountToSell -= uint128(-amount);\r\n      data.soldAmount -= uint128(-amount);\r\n    }\r\n  }\r\n\r\n  /// @notice Executes a limit order on the specified tick\r\n  /// @param self The mapping containing limit order cumulatives for initialized ticks\r\n  /// @param tick Limit order execution tick\r\n  /// @param tickSqrtPrice Limit order execution price\r\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n  /// @param amountA Amount of tokens that will be swapped\r\n  /// @param fee The fee taken from the input amount, expressed in hundredths of a bip\r\n  /// @return closed Status of limit order after execution\r\n  /// @return amountOut Amount of token that user receive after swap\r\n  /// @return amountIn Amount of token that user need to pay\r\n  function executeLimitOrders(\r\n    mapping(int24 => LimitOrder) storage self,\r\n    int24 tick,\r\n    uint160 tickSqrtPrice,\r\n    bool zeroToOne,\r\n    int256 amountA,\r\n    uint16 fee\r\n  ) internal returns (bool closed, uint256 amountOut, uint256 amountIn, uint256 feeAmount) {\r\n    unchecked {\r\n      bool exactIn = amountA > 0;\r\n      if (!exactIn) amountA = -amountA;\r\n      if (amountA < 0) revert IAlgebraPoolErrors.invalidAmountRequired(); // in case of type(int256).min\r\n\r\n      // price is defined as \"token1/token0\"\r\n      // MAX_LIMIT_ORDER_TICK check guarantees that this value does not overflow\r\n      uint256 priceX144 = FullMath.mulDiv(tickSqrtPrice, tickSqrtPrice, Constants.Q48);\r\n\r\n      uint256 amountB = (zeroToOne == exactIn)\r\n        ? FullMath.mulDiv(uint256(amountA), priceX144, Constants.Q144) // tokenA is token0\r\n        : FullMath.mulDiv(uint256(amountA), Constants.Q144, priceX144); // tokenA is token1\r\n\r\n      // limit orders buy tokenIn and sell tokenOut\r\n      (amountOut, amountIn) = exactIn ? (amountB, uint256(amountA)) : (uint256(amountA), amountB);\r\n\r\n      LimitOrder storage data = self[tick];\r\n      (uint128 amountToSell, uint128 soldAmount) = (data.amountToSell, data.soldAmount);\r\n      uint256 unsoldAmount = amountToSell - soldAmount; // safe since soldAmount always < amountToSell\r\n\r\n      if (exactIn) {\r\n        amountOut = FullMath.mulDiv(amountOut, Constants.FEE_DENOMINATOR - fee, Constants.FEE_DENOMINATOR);\r\n      }\r\n\r\n      if (amountOut >= unsoldAmount) {\r\n        if (amountOut > unsoldAmount) {\r\n          amountOut = unsoldAmount;\r\n        }\r\n        (closed, data.amountToSell, data.soldAmount) = (true, 0, 0);\r\n      } else {\r\n        // overflow is desired since we do not support tokens with totalSupply > type(uint128).max\r\n        data.soldAmount = soldAmount + uint128(amountOut);\r\n      }\r\n\r\n      amountIn = zeroToOne\r\n        ? FullMath.mulDivRoundingUp(amountOut, Constants.Q144, priceX144)\r\n        : FullMath.mulDivRoundingUp(amountOut, priceX144, Constants.Q144);\r\n\r\n      if (exactIn) {\r\n        if (amountOut == unsoldAmount) {\r\n          feeAmount = FullMath.mulDivRoundingUp(amountIn, fee, Constants.FEE_DENOMINATOR);\r\n        } else {\r\n          feeAmount = uint256(amountA) - amountIn;\r\n        }\r\n      } else {\r\n        feeAmount = FullMath.mulDivRoundingUp(amountIn, fee, Constants.FEE_DENOMINATOR - fee);\r\n      }\r\n\r\n      // overflows are desired since there are relative accumulators\r\n      if (zeroToOne) {\r\n        data.boughtAmount0Cumulative += FullMath.mulDiv(amountIn, Constants.Q128, amountToSell);\r\n      } else {\r\n        data.boughtAmount1Cumulative += FullMath.mulDiv(amountIn, Constants.Q128, amountToSell);\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.4 <0.9.0;\r\n\r\nimport '../interfaces/IAlgebraPoolErrors.sol';\r\nimport './TickMath.sol';\r\nimport './TokenDeltaMath.sol';\r\n\r\n/// @title Math library for liquidity\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\r\nlibrary LiquidityMath {\r\n  /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\r\n  /// @param x The liquidity before change\r\n  /// @param y The delta by which liquidity should be changed\r\n  /// @return z The liquidity delta\r\n  function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\r\n    unchecked {\r\n      if (y < 0) {\r\n        if ((z = x - uint128(-y)) >= x) revert IAlgebraPoolErrors.liquiditySub();\r\n      } else {\r\n        if ((z = x + uint128(y)) < x) revert IAlgebraPoolErrors.liquidityAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function getAmountsForLiquidity(\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    int128 liquidityDelta,\r\n    int24 currentTick,\r\n    uint160 currentPrice\r\n  ) internal pure returns (uint256 amount0, uint256 amount1, int128 globalLiquidityDelta) {\r\n    uint160 priceAtBottomTick = TickMath.getSqrtRatioAtTick(bottomTick);\r\n    uint160 priceAtTopTick = TickMath.getSqrtRatioAtTick(topTick);\r\n\r\n    int256 amount0Int;\r\n    int256 amount1Int;\r\n    if (currentTick < bottomTick) {\r\n      // If current tick is less than the provided bottom one then only the token0 has to be provided\r\n      amount0Int = TokenDeltaMath.getToken0Delta(priceAtBottomTick, priceAtTopTick, liquidityDelta);\r\n    } else if (currentTick < topTick) {\r\n      amount0Int = TokenDeltaMath.getToken0Delta(currentPrice, priceAtTopTick, liquidityDelta);\r\n      amount1Int = TokenDeltaMath.getToken1Delta(priceAtBottomTick, currentPrice, liquidityDelta);\r\n      globalLiquidityDelta = liquidityDelta;\r\n    } else {\r\n      // If current tick is greater than the provided top one then only the token1 has to be provided\r\n      amount1Int = TokenDeltaMath.getToken1Delta(priceAtBottomTick, priceAtTopTick, liquidityDelta);\r\n    }\r\n\r\n    unchecked {\r\n      (amount0, amount1) = liquidityDelta < 0 ? (uint256(-amount0Int), uint256(-amount1Int)) : (uint256(amount0Int), uint256(amount1Int));\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Optimized overflow and underflow safe math operations\r\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\r\nlibrary LowGasSafeMath {\r\n  /// @notice Returns x + y, reverts if sum overflows uint256\r\n  /// @param x The augend\r\n  /// @param y The addend\r\n  /// @return z The sum of x and y\r\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    unchecked {\r\n      require((z = x + y) >= x);\r\n    }\r\n  }\r\n\r\n  /// @notice Returns x - y, reverts if underflows\r\n  /// @param x The minuend\r\n  /// @param y The subtrahend\r\n  /// @return z The difference of x and y\r\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    unchecked {\r\n      require((z = x - y) <= x);\r\n    }\r\n  }\r\n\r\n  /// @notice Returns x * y, reverts if overflows\r\n  /// @param x The multiplicand\r\n  /// @param y The multiplier\r\n  /// @return z The product of x and y\r\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    unchecked {\r\n      require(x == 0 || (z = x * y) / x == y);\r\n    }\r\n  }\r\n\r\n  /// @notice Returns x + y, reverts if overflows or underflows\r\n  /// @param x The augend\r\n  /// @param y The addend\r\n  /// @return z The sum of x and y\r\n  function add(int256 x, int256 y) internal pure returns (int256 z) {\r\n    unchecked {\r\n      require((z = x + y) >= x == (y >= 0));\r\n    }\r\n  }\r\n\r\n  /// @notice Returns x - y, reverts if overflows or underflows\r\n  /// @param x The minuend\r\n  /// @param y The subtrahend\r\n  /// @return z The difference of x and y\r\n  function sub(int256 x, int256 y) internal pure returns (int256 z) {\r\n    unchecked {\r\n      require((z = x - y) <= x == (y >= 0));\r\n    }\r\n  }\r\n\r\n  /// @notice Returns x + y, reverts if overflows or underflows\r\n  /// @param x The augend\r\n  /// @param y The addend\r\n  /// @return z The sum of x and y\r\n  function add128(uint128 x, uint128 y) internal pure returns (uint128 z) {\r\n    unchecked {\r\n      require((z = x + y) >= x);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/PriceMovementMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport '../interfaces/IAlgebraPoolErrors.sol';\r\nimport './FullMath.sol';\r\nimport './LowGasSafeMath.sol';\r\nimport './TokenDeltaMath.sol';\r\nimport './TickMath.sol';\r\nimport './Constants.sol';\r\n\r\n/// @title Computes the result of price movement\r\n/// @notice Contains methods for computing the result of price movement within a single tick price range.\r\nlibrary PriceMovementMath {\r\n  using LowGasSafeMath for uint256;\r\n  using SafeCast for uint256;\r\n\r\n  /// @notice Gets the next sqrt price given an input amount of token0 or token1\r\n  /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\r\n  /// @param price The starting Q64.96 sqrt price, i.e., before accounting for the input amount\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param input How much of token0, or token1, is being swapped in\r\n  /// @param zeroToOne Whether the amount in is token0 or token1\r\n  /// @return resultPrice The Q64.96 sqrt price after adding the input amount to token0 or token1\r\n  function getNewPriceAfterInput(uint160 price, uint128 liquidity, uint256 input, bool zeroToOne) internal pure returns (uint160 resultPrice) {\r\n    return getNewPrice(price, liquidity, input, zeroToOne, true);\r\n  }\r\n\r\n  /// @notice Gets the next sqrt price given an output amount of token0 or token1\r\n  /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\r\n  /// @param price The starting Q64.96 sqrt price before accounting for the output amount\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param output How much of token0, or token1, is being swapped out\r\n  /// @param zeroToOne Whether the amount out is token0 or token1\r\n  /// @return resultPrice The Q64.96 sqrt price after removing the output amount of token0 or token1\r\n  function getNewPriceAfterOutput(uint160 price, uint128 liquidity, uint256 output, bool zeroToOne) internal pure returns (uint160 resultPrice) {\r\n    return getNewPrice(price, liquidity, output, zeroToOne, false);\r\n  }\r\n\r\n  function getNewPrice(uint160 price, uint128 liquidity, uint256 amount, bool zeroToOne, bool fromInput) internal pure returns (uint160 resultPrice) {\r\n    unchecked {\r\n      require(price != 0);\r\n      require(liquidity != 0);\r\n\r\n      if (zeroToOne == fromInput) {\r\n        // rounding up or down\r\n        if (amount == 0) return price;\r\n        uint256 liquidityShifted = uint256(liquidity) << Constants.RESOLUTION;\r\n\r\n        if (fromInput) {\r\n          uint256 product;\r\n          if ((product = amount * price) / amount == price) {\r\n            uint256 denominator = liquidityShifted + product;\r\n            if (denominator >= liquidityShifted) return uint160(FullMath.mulDivRoundingUp(liquidityShifted, price, denominator)); // always fits in 160 bits\r\n          }\r\n\r\n          return uint160(FullMath.unsafeDivRoundingUp(liquidityShifted, (liquidityShifted / price).add(amount))); // denominator always > 0\r\n        } else {\r\n          uint256 product;\r\n          require((product = amount * price) / amount == price); // if the product overflows, we know the denominator underflows\r\n          require(liquidityShifted > product); // in addition, we must check that the denominator does not underflow\r\n          return FullMath.mulDivRoundingUp(liquidityShifted, price, liquidityShifted - product).toUint160();\r\n        }\r\n      } else {\r\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\r\n        // in both cases, avoid a mulDiv for most inputs\r\n        if (fromInput) {\r\n          return\r\n            uint256(price)\r\n              .add(amount <= type(uint160).max ? (amount << Constants.RESOLUTION) / liquidity : FullMath.mulDiv(amount, Constants.Q96, liquidity))\r\n              .toUint160();\r\n        } else {\r\n          uint256 quotient = amount <= type(uint160).max\r\n            ? FullMath.unsafeDivRoundingUp(amount << Constants.RESOLUTION, liquidity) // denominator always > 0\r\n            : FullMath.mulDivRoundingUp(amount, Constants.Q96, liquidity);\r\n\r\n          require(price > quotient);\r\n          return uint160(price - quotient); // always fits 160 bits\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function getTokenADelta01(uint160 to, uint160 from, uint128 liquidity) internal pure returns (uint256) {\r\n    return TokenDeltaMath.getToken0Delta(to, from, liquidity, true);\r\n  }\r\n\r\n  function getTokenADelta10(uint160 to, uint160 from, uint128 liquidity) internal pure returns (uint256) {\r\n    return TokenDeltaMath.getToken1Delta(from, to, liquidity, true);\r\n  }\r\n\r\n  function getTokenBDelta01(uint160 to, uint160 from, uint128 liquidity) internal pure returns (uint256) {\r\n    return TokenDeltaMath.getToken1Delta(to, from, liquidity, false);\r\n  }\r\n\r\n  function getTokenBDelta10(uint160 to, uint160 from, uint128 liquidity) internal pure returns (uint256) {\r\n    return TokenDeltaMath.getToken0Delta(from, to, liquidity, false);\r\n  }\r\n\r\n  /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\r\n  /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\r\n  /// @param zeroToOne The direction of price movement\r\n  /// @param currentPrice The current Q64.96 sqrt price of the pool\r\n  /// @param targetPrice The Q64.96 sqrt price that cannot be exceeded, from which the direction of the swap is inferred\r\n  /// @param liquidity The usable liquidity\r\n  /// @param amountAvailable How much input or output amount is remaining to be swapped in/out\r\n  /// @param fee The fee taken from the input amount, expressed in hundredths of a bip\r\n  /// @return resultPrice The Q64.96 sqrt price after swapping the amount in/out, not to exceed the price target\r\n  /// @return input The amount to be swapped in, of either token0 or token1, based on the direction of the swap\r\n  /// @return output The amount to be received, of either token0 or token1, based on the direction of the swap\r\n  /// @return feeAmount The amount of input that will be taken as a fee\r\n  function movePriceTowardsTarget(\r\n    bool zeroToOne,\r\n    uint160 currentPrice,\r\n    uint160 targetPrice,\r\n    uint128 liquidity,\r\n    int256 amountAvailable,\r\n    uint16 fee\r\n  ) internal pure returns (uint160 resultPrice, uint256 input, uint256 output, uint256 feeAmount) {\r\n    unchecked {\r\n      function(uint160, uint160, uint128) pure returns (uint256) getAmountA = zeroToOne ? getTokenADelta01 : getTokenADelta10;\r\n\r\n      if (amountAvailable >= 0) {\r\n        // exactIn or not\r\n        uint256 amountAvailableAfterFee = FullMath.mulDiv(uint256(amountAvailable), Constants.FEE_DENOMINATOR - fee, Constants.FEE_DENOMINATOR);\r\n        input = getAmountA(targetPrice, currentPrice, liquidity);\r\n        if (amountAvailableAfterFee >= input) {\r\n          resultPrice = targetPrice;\r\n          feeAmount = FullMath.mulDivRoundingUp(input, fee, Constants.FEE_DENOMINATOR - fee);\r\n        } else {\r\n          resultPrice = getNewPriceAfterInput(currentPrice, liquidity, amountAvailableAfterFee, zeroToOne);\r\n          if (targetPrice != resultPrice) {\r\n            input = getAmountA(resultPrice, currentPrice, liquidity);\r\n\r\n            // we didn't reach the target, so take the remainder of the maximum input as fee\r\n            feeAmount = uint256(amountAvailable) - input;\r\n          } else {\r\n            feeAmount = FullMath.mulDivRoundingUp(input, fee, Constants.FEE_DENOMINATOR - fee);\r\n          }\r\n        }\r\n\r\n        output = (zeroToOne ? getTokenBDelta01 : getTokenBDelta10)(resultPrice, currentPrice, liquidity);\r\n      } else {\r\n        function(uint160, uint160, uint128) pure returns (uint256) getAmountB = zeroToOne ? getTokenBDelta01 : getTokenBDelta10;\r\n\r\n        output = getAmountB(targetPrice, currentPrice, liquidity);\r\n        amountAvailable = -amountAvailable;\r\n        if (amountAvailable < 0) revert IAlgebraPoolErrors.invalidAmountRequired(); // in case of type(int256).min\r\n\r\n        if (uint256(amountAvailable) >= output) resultPrice = targetPrice;\r\n        else {\r\n          resultPrice = getNewPriceAfterOutput(currentPrice, liquidity, uint256(amountAvailable), zeroToOne);\r\n\r\n          if (targetPrice != resultPrice) {\r\n            output = getAmountB(resultPrice, currentPrice, liquidity);\r\n          }\r\n\r\n          // cap the output amount to not exceed the remaining output amount\r\n          if (output > uint256(amountAvailable)) {\r\n            output = uint256(amountAvailable);\r\n          }\r\n        }\r\n\r\n        input = getAmountA(resultPrice, currentPrice, liquidity);\r\n        feeAmount = FullMath.mulDivRoundingUp(input, fee, Constants.FEE_DENOMINATOR - fee);\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0 || ^0.8.0;\r\n\r\n/// @title Safe casting methods\r\n/// @notice Contains methods for safely casting between types\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\r\nlibrary SafeCast {\r\n  /// @notice Cast a uint256 to a uint160, revert on overflow\r\n  /// @param y The uint256 to be downcasted\r\n  /// @return z The downcasted integer, now type uint160\r\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\r\n    require((z = uint160(y)) == y);\r\n  }\r\n\r\n  /// @notice Cast a uint256 to a uint128, revert on overflow\r\n  /// @param y The uint256 to be downcasted\r\n  /// @return z The downcasted integer, now type uint128\r\n  function toUint128(uint256 y) internal pure returns (uint128 z) {\r\n    require((z = uint128(y)) == y);\r\n  }\r\n\r\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\r\n  /// @param y The int256 to be downcasted\r\n  /// @return z The downcasted integer, now type int128\r\n  function toInt128(int256 y) internal pure returns (int128 z) {\r\n    require((z = int128(y)) == y);\r\n  }\r\n\r\n  /// @notice Cast a uint256 to a int256, revert on overflow\r\n  /// @param y The uint256 to be casted\r\n  /// @return z The casted integer, now type int256\r\n  function toInt256(uint256 y) internal pure returns (int256 z) {\r\n    require((z = int256(y)) >= 0);\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/SafeTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4 <0.9.0;\r\n\r\nimport '../interfaces/IAlgebraPoolErrors.sol';\r\n\r\n/// @title SafeTransfer\r\n/// @notice Safe ERC20 transfer library that gracefully handles missing return values.\r\n/// @dev Credit to Solmate under MIT license: https://github.com/transmissions11/solmate/blob/ed67feda67b24fdeff8ad1032360f0ee6047ba0a/src/utils/SafeTransferLib.sol\r\n/// @dev Please note that this library does not check if the token has a code! That responsibility is delegated to the caller.\r\nlibrary SafeTransfer {\r\n  /// @notice Transfers tokens to a recipient\r\n  /// @dev Calls transfer on token contract, errors with transferFailed() if transfer fails\r\n  /// @param token The contract address of the token which will be transferred\r\n  /// @param to The recipient of the transfer\r\n  /// @param amount The amount of the token to transfer\r\n  function safeTransfer(address token, address to, uint256 amount) internal {\r\n    bool success;\r\n    assembly {\r\n      let freeMemoryPointer := mload(0x40) // we will need to restore 0x40 slot\r\n      mstore(0x00, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // \"transfer(address,uint256)\" selector\r\n      mstore(0x04, and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // append cleaned \"to\" address\r\n      mstore(0x24, amount)\r\n      // now we use 0x00 - 0x44 bytes (68), freeMemoryPointer is dirty\r\n      success := call(gas(), token, 0, 0, 0x44, 0, 0x20)\r\n      success := and(\r\n        // set success to true if call isn't reverted and returned exactly 1 (can't just be non-zero data) or nothing\r\n        or(and(eq(mload(0), 1), eq(returndatasize(), 32)), iszero(returndatasize())),\r\n        success\r\n      )\r\n      mstore(0x40, freeMemoryPointer) // restore the freeMemoryPointer\r\n    }\r\n\r\n    if (!success) revert IAlgebraPoolErrors.transferFailed();\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/TickManagement.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport '../interfaces/IAlgebraPoolErrors.sol';\r\n\r\nimport './TickMath.sol';\r\nimport './LiquidityMath.sol';\r\nimport './Constants.sol';\r\n\r\n/// @title TickManagement\r\n/// @notice Contains functions for managing tick processes and relevant calculations\r\nlibrary TickManagement {\r\n  // info stored for each initialized individual tick\r\n  struct Tick {\r\n    uint128 liquidityTotal; // the total position liquidity that references this tick\r\n    int128 liquidityDelta; // amount of net liquidity added (subtracted) when tick is crossed left-right (right-left),\r\n    // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\r\n    // only has relative meaning, not absolute — the value depends on when the tick is initialized\r\n    uint256 outerFeeGrowth0Token;\r\n    uint256 outerFeeGrowth1Token;\r\n    int24 prevTick;\r\n    int24 nextTick;\r\n    uint160 outerSecondsPerLiquidity; // the seconds per unit of liquidity on the _other_ side of current tick, (relative meaning)\r\n    uint32 outerSecondsSpent; // the seconds spent on the other side of the current tick, only has relative meaning\r\n    bool hasLimitOrders;\r\n  }\r\n\r\n  function checkTickRangeValidity(int24 bottomTick, int24 topTick) internal pure {\r\n    if (topTick > TickMath.MAX_TICK) revert IAlgebraPoolErrors.topTickAboveMAX();\r\n    if (topTick < bottomTick) revert IAlgebraPoolErrors.topTickLowerThanBottomTick();\r\n    if (bottomTick < TickMath.MIN_TICK) revert IAlgebraPoolErrors.bottomTickLowerThanMIN();\r\n  }\r\n\r\n  /// @notice Retrieves fee growth data\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  /// @param bottomTick The lower tick boundary of the position\r\n  /// @param topTick The upper tick boundary of the position\r\n  /// @param currentTick The current tick\r\n  /// @param totalFeeGrowth0Token The all-time global fee growth, per unit of liquidity, in token0\r\n  /// @param totalFeeGrowth1Token The all-time global fee growth, per unit of liquidity, in token1\r\n  /// @return innerFeeGrowth0Token The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\r\n  /// @return innerFeeGrowth1Token The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\r\n  function getInnerFeeGrowth(\r\n    mapping(int24 => Tick) storage self,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    int24 currentTick,\r\n    uint256 totalFeeGrowth0Token,\r\n    uint256 totalFeeGrowth1Token\r\n  ) internal view returns (uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token) {\r\n    Tick storage lower = self[bottomTick];\r\n    Tick storage upper = self[topTick];\r\n\r\n    unchecked {\r\n      if (currentTick < topTick) {\r\n        if (currentTick >= bottomTick) {\r\n          innerFeeGrowth0Token = totalFeeGrowth0Token - lower.outerFeeGrowth0Token;\r\n          innerFeeGrowth1Token = totalFeeGrowth1Token - lower.outerFeeGrowth1Token;\r\n        } else {\r\n          innerFeeGrowth0Token = lower.outerFeeGrowth0Token;\r\n          innerFeeGrowth1Token = lower.outerFeeGrowth1Token;\r\n        }\r\n        innerFeeGrowth0Token -= upper.outerFeeGrowth0Token;\r\n        innerFeeGrowth1Token -= upper.outerFeeGrowth1Token;\r\n      } else {\r\n        innerFeeGrowth0Token = upper.outerFeeGrowth0Token - lower.outerFeeGrowth0Token;\r\n        innerFeeGrowth1Token = upper.outerFeeGrowth1Token - lower.outerFeeGrowth1Token;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  /// @param tick The tick that will be updated\r\n  /// @param currentTick The current tick\r\n  /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\r\n  /// @param totalFeeGrowth0Token The all-time global fee growth, per unit of liquidity, in token0\r\n  /// @param totalFeeGrowth1Token The all-time global fee growth, per unit of liquidity, in token1\r\n  /// @param secondsPerLiquidityCumulative The all-time seconds per max(1, liquidity) of the pool\r\n  /// @param time The current block timestamp cast to a uint32\r\n  /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\r\n  /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\r\n  function update(\r\n    mapping(int24 => Tick) storage self,\r\n    int24 tick,\r\n    int24 currentTick,\r\n    int128 liquidityDelta,\r\n    uint256 totalFeeGrowth0Token,\r\n    uint256 totalFeeGrowth1Token,\r\n    uint160 secondsPerLiquidityCumulative,\r\n    uint32 time,\r\n    bool upper\r\n  ) internal returns (bool flipped) {\r\n    Tick storage data = self[tick];\r\n\r\n    int128 liquidityDeltaBefore = data.liquidityDelta;\r\n    uint128 liquidityTotalBefore = data.liquidityTotal;\r\n\r\n    uint128 liquidityTotalAfter = LiquidityMath.addDelta(liquidityTotalBefore, liquidityDelta);\r\n    if (liquidityTotalAfter > Constants.MAX_LIQUIDITY_PER_TICK) revert IAlgebraPoolErrors.liquidityOverflow();\r\n\r\n    // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\r\n    data.liquidityDelta = upper ? int128(int256(liquidityDeltaBefore) - liquidityDelta) : int128(int256(liquidityDeltaBefore) + liquidityDelta);\r\n\r\n    data.liquidityTotal = liquidityTotalAfter;\r\n\r\n    flipped = (liquidityTotalAfter == 0);\r\n    if (liquidityTotalBefore == 0) {\r\n      flipped = !flipped;\r\n      // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\r\n      if (tick <= currentTick) {\r\n        data.outerFeeGrowth0Token = totalFeeGrowth0Token;\r\n        data.outerFeeGrowth1Token = totalFeeGrowth1Token;\r\n        data.outerSecondsPerLiquidity = secondsPerLiquidityCumulative;\r\n        data.outerSecondsSpent = time;\r\n      }\r\n    }\r\n\r\n    if (flipped) flipped = !data.hasLimitOrders;\r\n  }\r\n\r\n  /// @notice Transitions to next tick as needed by price movement\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  /// @param tick The destination tick of the transition\r\n  /// @param totalFeeGrowth0Token The all-time global fee growth, per unit of liquidity, in token0\r\n  /// @param totalFeeGrowth1Token The all-time global fee growth, per unit of liquidity, in token1\r\n  /// @param secondsPerLiquidityCumulative The current seconds per liquidity\r\n  /// @param time The current block.timestamp\r\n  /// @return liquidityDelta The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\r\n  function cross(\r\n    mapping(int24 => Tick) storage self,\r\n    int24 tick,\r\n    uint256 totalFeeGrowth0Token,\r\n    uint256 totalFeeGrowth1Token,\r\n    uint160 secondsPerLiquidityCumulative,\r\n    uint32 time\r\n  ) internal returns (int128 liquidityDelta) {\r\n    Tick storage data = self[tick];\r\n\r\n    unchecked {\r\n      data.outerSecondsSpent = time - data.outerSecondsSpent;\r\n      data.outerSecondsPerLiquidity = secondsPerLiquidityCumulative - data.outerSecondsPerLiquidity;\r\n\r\n      data.outerFeeGrowth1Token = totalFeeGrowth1Token - data.outerFeeGrowth1Token;\r\n      data.outerFeeGrowth0Token = totalFeeGrowth0Token - data.outerFeeGrowth0Token;\r\n    }\r\n    return data.liquidityDelta;\r\n  }\r\n\r\n  /// @notice Used for initial setup if ticks list\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  function initTickState(mapping(int24 => Tick) storage self) internal {\r\n    (self[TickMath.MIN_TICK].prevTick, self[TickMath.MIN_TICK].nextTick) = (TickMath.MIN_TICK, TickMath.MAX_TICK);\r\n    (self[TickMath.MAX_TICK].prevTick, self[TickMath.MAX_TICK].nextTick) = (TickMath.MIN_TICK, TickMath.MAX_TICK);\r\n  }\r\n\r\n  /// @notice Removes tick from linked list\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  /// @param tick The tick that will be removed\r\n  /// @return prevTick\r\n  function removeTick(mapping(int24 => Tick) storage self, int24 tick) internal returns (int24) {\r\n    (int24 prevTick, int24 nextTick) = (self[tick].prevTick, self[tick].nextTick);\r\n    delete self[tick];\r\n\r\n    if (tick == TickMath.MIN_TICK || tick == TickMath.MAX_TICK) {\r\n      // MIN_TICK and MAX_TICK cannot be removed from tick list\r\n      (self[tick].prevTick, self[tick].nextTick) = (prevTick, nextTick);\r\n      return prevTick;\r\n    } else {\r\n      if (prevTick == nextTick) revert IAlgebraPoolErrors.tickIsNotInitialized();\r\n      self[prevTick].nextTick = nextTick;\r\n      self[nextTick].prevTick = prevTick;\r\n      return prevTick;\r\n    }\r\n  }\r\n\r\n  /// @notice Adds tick to linked list\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  /// @param tick The tick that will be inserted\r\n  /// @param prevTick The previous active tick\r\n  /// @param nextTick The next active tick\r\n  function insertTick(mapping(int24 => Tick) storage self, int24 tick, int24 prevTick, int24 nextTick) internal {\r\n    if (tick == TickMath.MIN_TICK || tick == TickMath.MAX_TICK) return;\r\n    if (prevTick >= tick || nextTick <= tick) revert IAlgebraPoolErrors.tickInvalidLinks();\r\n    (self[tick].prevTick, self[tick].nextTick) = (prevTick, nextTick);\r\n\r\n    self[prevTick].nextTick = tick;\r\n    self[nextTick].prevTick = tick;\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.4 <0.9.0;\r\n\r\nimport '../interfaces/IAlgebraPoolErrors.sol';\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\r\nlibrary TickMath {\r\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n  int24 internal constant MIN_TICK = -887272;\r\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n  int24 internal constant MAX_TICK = -MIN_TICK;\r\n\r\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n  /// @dev Throws if |tick| > max tick\r\n  /// @param tick The input tick for the above formula\r\n  /// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n  /// at the given tick\r\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {\r\n    unchecked {\r\n      // get abs value\r\n      int24 mask = tick >> (24 - 1);\r\n      uint256 absTick = uint24((tick ^ mask) - mask);\r\n      if (absTick > uint24(MAX_TICK)) revert IAlgebraPoolErrors.tickOutOfRange();\r\n\r\n      uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\r\n      if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n      if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n      if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n      if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n      if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n      if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n      if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n      if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n      if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n      if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n      if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n      if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n      if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n      if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n      if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n      if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n      if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n      if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n      if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n      if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n      // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n      // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n      // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n      price = uint160((ratio + 0xFFFFFFFF) >> 32);\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n  /// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n  /// ever return.\r\n  /// @param price The sqrt ratio for which to compute the tick as a Q64.96\r\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n  function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {\r\n    unchecked {\r\n      // second inequality must be >= because the price can never reach the price at the max tick\r\n      if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert IAlgebraPoolErrors.priceOutOfRange();\r\n      uint256 ratio = uint256(price) << 32;\r\n\r\n      uint256 r = ratio;\r\n      uint256 msb = 0;\r\n\r\n      assembly {\r\n        let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(5, gt(r, 0xFFFFFFFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(4, gt(r, 0xFFFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(3, gt(r, 0xFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(2, gt(r, 0xF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(1, gt(r, 0x3))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := gt(r, 0x1)\r\n        msb := or(msb, f)\r\n      }\r\n\r\n      if (msb >= 128) r = ratio >> (msb - 127);\r\n      else r = ratio << (127 - msb);\r\n\r\n      int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(63, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(62, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(61, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(60, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(59, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(58, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(57, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(56, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(55, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(54, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(53, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(52, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(51, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(50, f))\r\n      }\r\n\r\n      int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\r\n\r\n      int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n      int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n      tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price ? tickHi : tickLow;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/TickTree.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport './Constants.sol';\r\nimport './TickMath.sol';\r\n\r\n/// @title Packed tick initialized state library\r\n/// @notice Stores a packed mapping of tick index to its initialized state and search tree\r\n/// @dev The leafs mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\r\nlibrary TickTree {\r\n  int16 internal constant SECOND_LAYER_OFFSET = 3466; // ceil(MAX_TICK / 256)\r\n\r\n  /// @notice Toggles the initialized state for a given tick from false to true, or vice versa\r\n  /// @param leafs The mapping of words with ticks\r\n  /// @param secondLayer The mapping of words with leafs\r\n  /// @param tick The tick to toggle\r\n  /// @param treeRoot The word with info about active subtrees\r\n  function toggleTick(\r\n    mapping(int16 => uint256) storage leafs,\r\n    mapping(int16 => uint256) storage secondLayer,\r\n    int24 tick,\r\n    uint256 treeRoot\r\n  ) internal returns (uint256 newTreeRoot) {\r\n    newTreeRoot = treeRoot;\r\n    (bool toggledNode, int16 nodeNumber) = _toggleTickInNode(leafs, tick);\r\n    if (toggledNode) {\r\n      unchecked {\r\n        (toggledNode, nodeNumber) = _toggleTickInNode(secondLayer, nodeNumber + SECOND_LAYER_OFFSET);\r\n      }\r\n      if (toggledNode) {\r\n        assembly {\r\n          newTreeRoot := xor(newTreeRoot, shl(nodeNumber, 1))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates the required node and toggles tick in it\r\n  /// @param row The level of tree\r\n  /// @param tick The tick to toggle\r\n  /// @return toggledNode Toggled whole node or not\r\n  /// @return nodeNumber Number of corresponding node\r\n  function _toggleTickInNode(mapping(int16 => uint256) storage row, int24 tick) private returns (bool toggledNode, int16 nodeNumber) {\r\n    assembly {\r\n      nodeNumber := sar(8, tick)\r\n    }\r\n    uint256 node = row[nodeNumber];\r\n    assembly {\r\n      toggledNode := iszero(node)\r\n      node := xor(node, shl(and(tick, 0xFF), 1))\r\n      toggledNode := xor(toggledNode, iszero(node))\r\n    }\r\n    row[nodeNumber] = node;\r\n  }\r\n\r\n  /// @notice Returns the next initialized tick in tree to the right (gte) of the given tick or `MAX_TICK`\r\n  /// @param leafs The words with ticks\r\n  /// @param secondLayer The words with info about active leafs\r\n  /// @param treeRoot The word with info about active subtrees\r\n  /// @param tick The starting tick\r\n  /// @return nextTick The next initialized tick or `MAX_TICK`\r\n  function getNextTick(\r\n    mapping(int16 => uint256) storage leafs,\r\n    mapping(int16 => uint256) storage secondLayer,\r\n    uint256 treeRoot,\r\n    int24 tick\r\n  ) internal view returns (int24 nextTick) {\r\n    unchecked {\r\n      tick++;\r\n      int16 nodeNumber;\r\n      bool initialized;\r\n      assembly {\r\n        // index in treeRoot\r\n        nodeNumber := shr(8, add(sar(8, tick), SECOND_LAYER_OFFSET))\r\n      }\r\n      if (treeRoot & (1 << uint16(nodeNumber)) != 0) {\r\n        // if subtree has active ticks\r\n        // try to find initialized tick in the corresponding leaf of the tree\r\n        (nodeNumber, nextTick, initialized) = _getNextActiveBitInSameNode(leafs, tick);\r\n        if (initialized) return nextTick;\r\n\r\n        // try to find next initialized leaf in the tree\r\n        (nodeNumber, nextTick, initialized) = _getNextActiveBitInSameNode(secondLayer, nodeNumber + SECOND_LAYER_OFFSET + 1);\r\n      }\r\n      if (!initialized) {\r\n        // try to find which subtree has an active leaf\r\n        (nextTick, initialized) = _nextActiveBitInTheSameNode(treeRoot, ++nodeNumber);\r\n        if (!initialized) return TickMath.MAX_TICK;\r\n        nextTick = _getFirstActiveBitInNode(secondLayer, nextTick);\r\n      }\r\n      nextTick = _getFirstActiveBitInNode(leafs, nextTick - SECOND_LAYER_OFFSET);\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates node with given tick and returns next active tick\r\n  /// @param row level of search tree\r\n  /// @param tick The starting tick\r\n  /// @return nodeNumber Number of corresponding node\r\n  /// @return nextTick Number of next active tick or last tick in node\r\n  /// @return initialized Is nextTick initialized or not\r\n  function _getNextActiveBitInSameNode(\r\n    mapping(int16 => uint256) storage row,\r\n    int24 tick\r\n  ) private view returns (int16 nodeNumber, int24 nextTick, bool initialized) {\r\n    assembly {\r\n      nodeNumber := sar(8, tick)\r\n    }\r\n    (nextTick, initialized) = _nextActiveBitInTheSameNode(row[nodeNumber], tick);\r\n  }\r\n\r\n  /// @notice Returns first active tick in given node\r\n  /// @param row level of search tree\r\n  /// @param nodeNumber Number of corresponding node\r\n  /// @return nextTick Number of next active tick or last tick in node\r\n  function _getFirstActiveBitInNode(mapping(int16 => uint256) storage row, int24 nodeNumber) private view returns (int24 nextTick) {\r\n    assembly {\r\n      nextTick := shl(8, nodeNumber)\r\n    }\r\n    (nextTick, ) = _nextActiveBitInTheSameNode(row[int16(nodeNumber)], nextTick);\r\n  }\r\n\r\n  /// @notice Returns the next initialized tick contained in the same word as the tick that is\r\n  /// to the right or at (gte) of the given tick\r\n  /// @param word The word in which to compute the next initialized tick\r\n  /// @param tick The starting tick\r\n  /// @return nextTick The next initialized or uninitialized tick up to 256 ticks away from the current tick\r\n  /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\r\n  function _nextActiveBitInTheSameNode(uint256 word, int24 tick) private pure returns (int24 nextTick, bool initialized) {\r\n    uint256 bitNumber;\r\n    assembly {\r\n      bitNumber := and(tick, 0xFF)\r\n    }\r\n    unchecked {\r\n      uint256 _row = word >> bitNumber; // all the 1s at or to the left of the bitNumber\r\n      if (_row == 0) {\r\n        nextTick = tick + int24(uint24(255 - bitNumber));\r\n      } else {\r\n        nextTick = tick + int24(uint24(getSingleSignificantBit((0 - _row) & _row))); // least significant bit\r\n        initialized = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice get position of single 1-bit\r\n  /// @dev it is assumed that word contains exactly one 1-bit, otherwise the result will be incorrect\r\n  /// @param word The word containing only one 1-bit\r\n  function getSingleSignificantBit(uint256 word) internal pure returns (uint8 singleBitPos) {\r\n    assembly {\r\n      singleBitPos := iszero(and(word, 0x5555555555555555555555555555555555555555555555555555555555555555))\r\n      singleBitPos := or(singleBitPos, shl(7, iszero(and(word, 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))))\r\n      singleBitPos := or(singleBitPos, shl(6, iszero(and(word, 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF))))\r\n      singleBitPos := or(singleBitPos, shl(5, iszero(and(word, 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF))))\r\n      singleBitPos := or(singleBitPos, shl(4, iszero(and(word, 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF))))\r\n      singleBitPos := or(singleBitPos, shl(3, iszero(and(word, 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF))))\r\n      singleBitPos := or(singleBitPos, shl(2, iszero(and(word, 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F))))\r\n      singleBitPos := or(singleBitPos, shl(1, iszero(and(word, 0x3333333333333333333333333333333333333333333333333333333333333333))))\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/libraries/TokenDeltaMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.17;\r\n\r\nimport './SafeCast.sol';\r\nimport './FullMath.sol';\r\nimport './Constants.sol';\r\n\r\n/// @title Functions based on Q64.96 sqrt price and liquidity\r\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\r\nlibrary TokenDeltaMath {\r\n  using SafeCast for uint256;\r\n\r\n  /// @notice Gets the token0 delta between two prices\r\n  /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper)\r\n  /// @param priceLower A Q64.96 sqrt price\r\n  /// @param priceUpper Another Q64.96 sqrt price\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param roundUp Whether to round the amount up or down\r\n  /// @return token0Delta Amount of token0 required to cover a position of size liquidity between the two passed prices\r\n  function getToken0Delta(uint160 priceLower, uint160 priceUpper, uint128 liquidity, bool roundUp) internal pure returns (uint256 token0Delta) {\r\n    unchecked {\r\n      uint256 priceDelta = priceUpper - priceLower;\r\n      require(priceDelta < priceUpper); // forbids underflow and 0 priceLower\r\n      uint256 liquidityShifted = uint256(liquidity) << Constants.RESOLUTION;\r\n\r\n      token0Delta = roundUp\r\n        ? FullMath.unsafeDivRoundingUp(FullMath.mulDivRoundingUp(priceDelta, liquidityShifted, priceUpper), priceLower) // denominator always > 0\r\n        : FullMath.mulDiv(priceDelta, liquidityShifted, priceUpper) / priceLower;\r\n    }\r\n  }\r\n\r\n  /// @notice Gets the token1 delta between two prices\r\n  /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\r\n  /// @param priceLower A Q64.96 sqrt price\r\n  /// @param priceUpper Another Q64.96 sqrt price\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param roundUp Whether to round the amount up, or down\r\n  /// @return token1Delta Amount of token1 required to cover a position of size liquidity between the two passed prices\r\n  function getToken1Delta(uint160 priceLower, uint160 priceUpper, uint128 liquidity, bool roundUp) internal pure returns (uint256 token1Delta) {\r\n    unchecked {\r\n      require(priceUpper >= priceLower);\r\n      uint256 priceDelta = priceUpper - priceLower;\r\n      token1Delta = roundUp ? FullMath.mulDivRoundingUp(priceDelta, liquidity, Constants.Q96) : FullMath.mulDiv(priceDelta, liquidity, Constants.Q96);\r\n    }\r\n  }\r\n\r\n  /// @notice Helper that gets signed token0 delta\r\n  /// @param priceLower A Q64.96 sqrt price\r\n  /// @param priceUpper Another Q64.96 sqrt price\r\n  /// @param liquidity The change in liquidity for which to compute the token0 delta\r\n  /// @return token0Delta Amount of token0 corresponding to the passed liquidityDelta between the two prices\r\n  function getToken0Delta(uint160 priceLower, uint160 priceUpper, int128 liquidity) internal pure returns (int256 token0Delta) {\r\n    unchecked {\r\n      token0Delta = liquidity >= 0\r\n        ? getToken0Delta(priceLower, priceUpper, uint128(liquidity), true).toInt256()\r\n        : -getToken0Delta(priceLower, priceUpper, uint128(-liquidity), false).toInt256();\r\n    }\r\n  }\r\n\r\n  /// @notice Helper that gets signed token1 delta\r\n  /// @param priceLower A Q64.96 sqrt price\r\n  /// @param priceUpper Another Q64.96 sqrt price\r\n  /// @param liquidity The change in liquidity for which to compute the token1 delta\r\n  /// @return token1Delta Amount of token1 corresponding to the passed liquidityDelta between the two prices\r\n  function getToken1Delta(uint160 priceLower, uint160 priceUpper, int128 liquidity) internal pure returns (int256 token1Delta) {\r\n    unchecked {\r\n      token1Delta = liquidity >= 0\r\n        ? getToken1Delta(priceLower, priceUpper, uint128(liquidity), true).toInt256()\r\n        : -getToken1Delta(priceLower, priceUpper, uint128(-liquidity), false).toInt256();\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/AdaptiveFeeEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/AdaptiveFee.sol';\r\n\r\ncontract AdaptiveFeeEchidnaTest {\r\n  function expInvariants(uint256 x, uint16 gamma) external pure {\r\n    unchecked {\r\n      require(gamma != 0);\r\n      if (x >= 6 * gamma) return;\r\n      uint256 g4 = uint256(gamma) ** 4;\r\n      uint256 exp = AdaptiveFee.expXg4(x, gamma, g4);\r\n      assert(exp < 2 ** 137);\r\n    }\r\n  }\r\n\r\n  function sigmoidInvariants(uint256 x, uint16 gamma, uint16 alpha, uint256 beta) external pure {\r\n    require(gamma != 0);\r\n    uint256 res = AdaptiveFee.sigmoid(x, gamma, alpha, beta);\r\n    assert(res <= type(uint16).max);\r\n    assert(res <= alpha);\r\n  }\r\n\r\n  function getFeeInvariants(\r\n    uint88 volatility,\r\n    uint256 volumePerLiquidity,\r\n    uint16 gamma1,\r\n    uint16 gamma2,\r\n    uint16 alpha1,\r\n    uint16 alpha2,\r\n    uint32 beta1,\r\n    uint32 beta2,\r\n    uint16 volumeGamma,\r\n    uint32 volumeBeta,\r\n    uint16 baseFee\r\n  ) external pure returns (uint256 fee) {\r\n    unchecked {\r\n      require(uint256(alpha1) + uint256(alpha2) + uint256(baseFee) <= type(uint16).max, 'Max fee exceeded');\r\n      require(gamma1 != 0 && gamma2 != 0 && volumeGamma != 0, 'Gammas must be > 0');\r\n\r\n      uint256 sigm1 = AdaptiveFee.sigmoid(volatility, gamma1, alpha1, beta1);\r\n      uint256 sigm2 = AdaptiveFee.sigmoid(volatility, gamma2, alpha2, beta2);\r\n\r\n      assert(sigm1 + sigm2 <= type(uint16).max);\r\n\r\n      fee = baseFee + AdaptiveFee.sigmoid(volumePerLiquidity, volumeGamma, uint16(sigm1 + sigm2), volumeBeta);\r\n      assert(fee <= type(uint16).max);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/AdaptiveFeeTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../base/AlgebraFeeConfiguration.sol';\r\nimport '../libraries/AdaptiveFee.sol';\r\nimport '../libraries/Constants.sol';\r\n\r\ncontract AdaptiveFeeTest {\r\n  AlgebraFeeConfiguration public feeConfig;\r\n\r\n  constructor() {\r\n    feeConfig = AdaptiveFee.initialFeeConfiguration();\r\n  }\r\n\r\n  function getFee(uint88 volatility) external view returns (uint256 fee) {\r\n    return AdaptiveFee.getFee(volatility, feeConfig);\r\n  }\r\n\r\n  function getGasCostOfGetFee(uint88 volatility) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      AdaptiveFee.getFee(volatility, feeConfig);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/AlgebraPoolSwapTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../interfaces/IERC20Minimal.sol';\r\n\r\nimport '../interfaces/callback/IAlgebraSwapCallback.sol';\r\nimport '../interfaces/IAlgebraPool.sol';\r\n\r\ncontract AlgebraPoolSwapTest is IAlgebraSwapCallback {\r\n  int256 private _amount0Delta;\r\n  int256 private _amount1Delta;\r\n\r\n  function getSwapResult(\r\n    address pool,\r\n    bool zeroToOne,\r\n    int256 amountSpecified,\r\n    uint160 limitSqrtPrice\r\n  ) external returns (int256 amount0Delta, int256 amount1Delta, uint160 nextSqrtRatio) {\r\n    (amount0Delta, amount1Delta) = IAlgebraPool(pool).swap(address(0), zeroToOne, amountSpecified, limitSqrtPrice, abi.encode(msg.sender));\r\n\r\n    (nextSqrtRatio, , , , , , ) = IAlgebraPool(pool).globalState();\r\n  }\r\n\r\n  function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external override {\r\n    address sender = abi.decode(data, (address));\r\n\r\n    if (amount0Delta > 0) {\r\n      IERC20Minimal(IAlgebraPool(msg.sender).token0()).transferFrom(sender, msg.sender, uint256(amount0Delta));\r\n    } else if (amount1Delta > 0) {\r\n      IERC20Minimal(IAlgebraPool(msg.sender).token1()).transferFrom(sender, msg.sender, uint256(amount1Delta));\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/BitMathEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/TickTree.sol';\r\n\r\ncontract BitMathEchidnaTest {\r\n  function leastSignificantBitInvariant(uint256 input) external pure {\r\n    unchecked {\r\n      require(input > 0);\r\n      uint8 lsb = TickTree.getSingleSignificantBit((0 - input) & input);\r\n      assert(input & (uint256(2) ** lsb) != 0);\r\n      assert(input & (uint256(2) ** lsb - 1) == 0);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/BitMathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/TickTree.sol';\r\n\r\ncontract BitMathTest {\r\n  function leastSignificantBit(uint256 x) external pure returns (uint8 r) {\r\n    unchecked {\r\n      return TickTree.getSingleSignificantBit((0 - x) & x);\r\n    }\r\n  }\r\n\r\n  function getGasCostOfLeastSignificantBit(uint256 x) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      TickTree.getSingleSignificantBit((0 - x) & x);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/FullMathEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/FullMath.sol';\r\n\r\ncontract FullMathEchidnaTest {\r\n  function checkMulDivRounding(uint256 x, uint256 y, uint256 d) external pure {\r\n    require(d > 0);\r\n\r\n    uint256 ceiled = FullMath.mulDivRoundingUp(x, y, d);\r\n    uint256 floored = FullMath.mulDiv(x, y, d);\r\n\r\n    unchecked {\r\n      if (mulmod(x, y, d) > 0) {\r\n        assert(ceiled - floored == 1);\r\n      } else {\r\n        assert(ceiled == floored);\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkMulDiv(uint256 x, uint256 y, uint256 d) external pure {\r\n    require(d > 0);\r\n    uint256 z = FullMath.mulDiv(x, y, d);\r\n    if (x == 0 || y == 0) {\r\n      assert(z == 0);\r\n      return;\r\n    }\r\n\r\n    // recompute x and y via mulDiv of the result of floor(x*y/d), should always be less than original inputs by < d\r\n    uint256 x2 = FullMath.mulDiv(z, d, y);\r\n    uint256 y2 = FullMath.mulDiv(z, d, x);\r\n    assert(x2 <= x);\r\n    assert(y2 <= y);\r\n\r\n    unchecked {\r\n      assert(x - x2 < d);\r\n      assert(y - y2 < d);\r\n    }\r\n  }\r\n\r\n  function checkMulDivRoundingUp(uint256 x, uint256 y, uint256 d) external pure {\r\n    require(d > 0);\r\n    uint256 z = FullMath.mulDivRoundingUp(x, y, d);\r\n    if (x == 0 || y == 0) {\r\n      assert(z == 0);\r\n      return;\r\n    }\r\n\r\n    // recompute x and y via mulDiv of the result of floor(x*y/d), should always be less than original inputs by < d\r\n    uint256 x2 = FullMath.mulDiv(z, d, y);\r\n    uint256 y2 = FullMath.mulDiv(z, d, x);\r\n    assert(x2 >= x);\r\n    assert(y2 >= y);\r\n\r\n    unchecked {\r\n      assert(x2 - x < d);\r\n      assert(y2 - y < d);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/FullMathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/FullMath.sol';\r\n\r\ncontract FullMathTest {\r\n  function mulDiv(uint256 x, uint256 y, uint256 z) external pure returns (uint256) {\r\n    return FullMath.mulDiv(x, y, z);\r\n  }\r\n\r\n  function mulDivRoundingUp(uint256 x, uint256 y, uint256 z) external pure returns (uint256) {\r\n    return FullMath.mulDivRoundingUp(x, y, z);\r\n  }\r\n}\r\n"
    },
    "contracts/test/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nimport '../libraries/FullMath.sol';\r\nimport '../libraries/Constants.sol';\r\n\r\n/// @title Liquidity amount functions\r\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\r\nlibrary LiquidityAmounts {\r\n  /// @notice Downcasts uint256 to uint128\r\n  /// @param x The uint258 to be downcasted\r\n  /// @return y The passed value, downcasted to uint128\r\n  function toUint128(uint256 x) private pure returns (uint128 y) {\r\n    require((y = uint128(x)) == x);\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\r\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n  /// @param amount0 The amount0 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function getLiquidityForAmount0(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint256 amount0\r\n  ) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, Constants.Q96);\r\n    return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n  /// @param amount1 The amount1 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function getLiquidityForAmount1(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint256 amount1\r\n  ) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    return toUint128(FullMath.mulDiv(amount1, Constants.Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n  /// @param amount0 The amount of token0 being sent in\r\n  /// @param amount1 The amount of token1 being sent in\r\n  /// @return liquidity The maximum amount of liquidity received\r\n  function getLiquidityForAmounts(\r\n    uint160 sqrtRatioX96,\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  ) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n      uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n\r\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n    }\r\n  }\r\n\r\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount0 The amount of token0\r\n  function getAmount0ForLiquidity(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint128 liquidity\r\n  ) internal pure returns (uint256 amount0) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    return FullMath.mulDiv(uint256(liquidity) << Constants.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96) / sqrtRatioAX96;\r\n  }\r\n\r\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount1 The amount of token1\r\n  function getAmount1ForLiquidity(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint128 liquidity\r\n  ) internal pure returns (uint256 amount1) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Constants.Q96);\r\n  }\r\n\r\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount0 The amount of token0\r\n  /// @return amount1 The amount of token1\r\n  function getAmountsForLiquidity(\r\n    uint160 sqrtRatioX96,\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint128 liquidity\r\n  ) internal pure returns (uint256 amount0, uint256 amount1) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n      amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n    } else {\r\n      amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/LiquidityMathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../libraries/LiquidityMath.sol';\r\n\r\ncontract LiquidityMathTest {\r\n  function addDelta(uint128 x, int128 y) external pure returns (uint128 z) {\r\n    return LiquidityMath.addDelta(x, y);\r\n  }\r\n\r\n  function getGasCostOfAddDelta(uint128 x, int128 y) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      LiquidityMath.addDelta(x, y);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/LowGasSafeMathEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/LowGasSafeMath.sol';\r\n\r\ncontract LowGasSafeMathEchidnaTest {\r\n  function checkAdd(uint256 x, uint256 y) external pure {\r\n    unchecked {\r\n      uint256 z = LowGasSafeMath.add(x, y);\r\n      assert(z == x + y);\r\n      assert(z >= x && z >= y);\r\n    }\r\n  }\r\n\r\n  function checkSub(uint256 x, uint256 y) external pure {\r\n    unchecked {\r\n      uint256 z = LowGasSafeMath.sub(x, y);\r\n      assert(z == x - y);\r\n      assert(z <= x);\r\n    }\r\n  }\r\n\r\n  function checkMul(uint256 x, uint256 y) external pure {\r\n    unchecked {\r\n      uint256 z = LowGasSafeMath.mul(x, y);\r\n      assert(z == x * y);\r\n      assert(x == 0 || y == 0 || (z >= x && z >= y));\r\n    }\r\n  }\r\n\r\n  function checkAddi(int256 x, int256 y) external pure {\r\n    unchecked {\r\n      int256 z = LowGasSafeMath.add(x, y);\r\n      assert(z == x + y);\r\n      assert(y < 0 ? z < x : z >= x);\r\n    }\r\n  }\r\n\r\n  function checkSubi(int256 x, int256 y) external pure {\r\n    unchecked {\r\n      int256 z = LowGasSafeMath.sub(x, y);\r\n      assert(z == x - y);\r\n      assert(y < 0 ? z > x : z <= x);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/MockTimeAlgebraPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../AlgebraPool.sol';\r\nimport './MockTimeDataStorageOperator.sol';\r\n\r\n// used for testing time dependent behavior\r\ncontract MockTimeAlgebraPool is AlgebraPool {\r\n  // Monday, October 5, 2020 9:00:00 AM GMT-05:00\r\n  uint256 public time = 1601906400;\r\n\r\n  function setTotalFeeGrowth0Token(uint256 _totalFeeGrowth0Token) external {\r\n    totalFeeGrowth0Token = _totalFeeGrowth0Token;\r\n  }\r\n\r\n  function setTotalFeeGrowth1Token(uint256 _totalFeeGrowth1Token) external {\r\n    totalFeeGrowth1Token = _totalFeeGrowth1Token;\r\n  }\r\n\r\n  function advanceTime(uint256 by) external {\r\n    unchecked {\r\n      time += by;\r\n    }\r\n  }\r\n\r\n  function _blockTimestamp() internal view override returns (uint32) {\r\n    unchecked {\r\n      return uint32(time);\r\n    }\r\n  }\r\n\r\n  function checkBlockTimestamp() external view returns (bool) {\r\n    require(super._blockTimestamp() == uint32(block.timestamp));\r\n    return true;\r\n  }\r\n\r\n  function getAverageVolatility() external view returns (uint112 volatilityAverage) {\r\n    volatilityAverage = MockTimeDataStorageOperator(dataStorageOperator).getAverageVolatility(\r\n      _blockTimestamp(),\r\n      int24(uint24(globalState.fee)),\r\n      globalState.timepointIndex\r\n    );\r\n  }\r\n\r\n  function getPrevTick() external view returns (int24 tick, int24 currentTick) {\r\n    unchecked {\r\n      if (globalState.timepointIndex > 2) {\r\n        (, , , , tick, , ) = IDataStorageOperator(dataStorageOperator).timepoints(globalState.timepointIndex);\r\n      }\r\n      currentTick = globalState.tick;\r\n    }\r\n  }\r\n\r\n  function getFee() external view returns (uint16 fee) {\r\n    return MockTimeDataStorageOperator(dataStorageOperator).getFee(_blockTimestamp(), globalState.tick, globalState.timepointIndex);\r\n  }\r\n\r\n  function getKeyForPosition(address owner, int24 bottomTick, int24 topTick) external pure returns (bytes32 key) {\r\n    assembly {\r\n      key := or(shl(24, or(shl(24, owner), and(bottomTick, 0xFFFFFF))), and(topTick, 0xFFFFFF))\r\n    }\r\n  }\r\n\r\n  function getKeyForLimitPosition(address owner, int24 tick) external pure returns (bytes32 key) {\r\n    assembly {\r\n      key := or(shl(24, owner), and(tick, 0xFFFFFF))\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/MockTimeAlgebraPoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../base/AlgebraFeeConfiguration.sol';\r\nimport '../interfaces/IAlgebraPoolDeployer.sol';\r\n\r\nimport '../libraries/AdaptiveFee.sol';\r\n\r\nimport './MockTimeAlgebraPool.sol';\r\nimport './MockTimeDataStorageOperator.sol';\r\n\r\ncontract MockTimeAlgebraPoolDeployer {\r\n  address private factory;\r\n  address private vault;\r\n\r\n  /// @dev two storage slots for dense cache packing\r\n  bytes32 private cache0;\r\n  bytes32 private cache1;\r\n\r\n  function getDeployParameters() external view returns (address, address, address, address, address) {\r\n    (address dataStorage, address token0, address token1) = _readFromCache();\r\n    return (dataStorage, factory, vault, token0, token1);\r\n  }\r\n\r\n  event PoolDeployed(address pool);\r\n\r\n  AlgebraFeeConfiguration private defaultFeeConfiguration;\r\n\r\n  constructor() {\r\n    defaultFeeConfiguration = AdaptiveFee.initialFeeConfiguration();\r\n  }\r\n\r\n  function deployMock(address _factory, address _vault, address token0, address token1) external returns (address pool) {\r\n    bytes32 initCodeHash = keccak256(type(MockTimeAlgebraPool).creationCode);\r\n    DataStorageOperator dataStorage = (new MockTimeDataStorageOperator(computeAddress(initCodeHash, token0, token1)));\r\n    dataStorage.changeFeeConfiguration(defaultFeeConfiguration);\r\n\r\n    (factory, vault) = (_factory, _vault);\r\n    _writeToCache(address(dataStorage), token0, token1);\r\n    pool = address(new MockTimeAlgebraPool{salt: keccak256(abi.encode(token0, token1))}());\r\n    (cache0, cache1) = (bytes32(0), bytes32(0));\r\n    emit PoolDeployed(pool);\r\n  }\r\n\r\n  /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n  /// @param token0 first token\r\n  /// @param token1 second token\r\n  /// @return pool The contract address of the V3 pool\r\n  function computeAddress(bytes32 initCodeHash, address token0, address token1) internal view returns (address pool) {\r\n    unchecked {\r\n      pool = address(uint160(uint256(keccak256(abi.encodePacked(hex'ff', address(this), keccak256(abi.encode(token0, token1)), initCodeHash)))));\r\n    }\r\n  }\r\n\r\n  /// @notice densely packs three addresses into two storage slots\r\n  function _writeToCache(address dataStorage, address token0, address token1) private {\r\n    assembly {\r\n      token0 := and(token0, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) // clean higher bits, just in case\r\n      sstore(cache0.slot, or(shr(64, token0), shl(96, and(dataStorage, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))))\r\n      sstore(cache1.slot, or(shl(160, token0), and(token1, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)))\r\n    }\r\n  }\r\n\r\n  /// @notice reads three densely packed addresses from two storage slots\r\n  function _readFromCache() private view returns (address dataStorage, address token0, address token1) {\r\n    (bytes32 _cache0, bytes32 _cache1) = (cache0, cache1);\r\n    assembly {\r\n      dataStorage := shr(96, _cache0)\r\n      token0 := or(shl(64, and(_cache0, 0xFFFFFFFFFFFFFFFFFFFFFFFF)), shr(160, _cache1))\r\n      token1 := and(_cache1, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/MockTimeDataStorageOperator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../DataStorageOperator.sol';\r\n\r\n// used for testing time dependent behavior\r\ncontract MockTimeDataStorageOperator is DataStorageOperator {\r\n  using DataStorage for DataStorage.Timepoint[UINT16_MODULO];\r\n\r\n  // Monday, October 5, 2020 9:00:00 AM GMT-05:00\r\n  uint256 public time = 1601906400;\r\n\r\n  constructor(address _pool) DataStorageOperator(_pool) {\r\n    //\r\n  }\r\n\r\n  function advanceTime(uint256 by) external {\r\n    unchecked {\r\n      time += by;\r\n    }\r\n  }\r\n\r\n  function _blockTimestamp() internal view override returns (uint32) {\r\n    return uint32(time);\r\n  }\r\n\r\n  function checkBlockTimestamp() external view returns (bool) {\r\n    require(super._blockTimestamp() == uint32(block.timestamp));\r\n    return true;\r\n  }\r\n\r\n  function getTimepointsWithParams(\r\n    uint32 _time,\r\n    uint32[] memory secondsAgos,\r\n    int24 tick,\r\n    uint16 lastIndex\r\n  ) external view returns (int56[] memory tickCumulatives, uint112[] memory volatilityCumulatives) {\r\n    return timepoints.getTimepoints(_time, secondsAgos, tick, lastIndex);\r\n  }\r\n\r\n  function getAverageVolatility(uint32 timestamp, int24 tick, uint16 index) public view returns (uint88 volatilityAverage) {\r\n    uint16 oldestIndex = timepoints.getOldestIndex(index);\r\n    uint88 lastVolatilityCumulative = timepoints._getVolatilityCumulativeAt(timestamp, 0, tick, index, oldestIndex);\r\n    return timepoints.getAverageVolatility(timestamp, tick, index, oldestIndex, lastVolatilityCumulative);\r\n  }\r\n\r\n  /// @notice Calculates fee based on combination of sigmoids\r\n  /// @param _time The current block.timestamp\r\n  /// @param tick The current tick\r\n  /// @param lastIndex The index of the timepoint that was most recently written to the timepoints array\r\n  /// @return fee The fee in hundredths of a bip, i.e. 1e-6\r\n  function getFee(uint32 _time, int24 tick, uint16 lastIndex) external view returns (uint16 fee) {\r\n    uint16 oldestIndex = timepoints.getOldestIndex(lastIndex);\r\n    uint88 lastVolatilityCumulative = timepoints._getVolatilityCumulativeAt(_time, 0, tick, lastIndex, oldestIndex);\r\n    uint88 volatilityAverage = timepoints.getAverageVolatility(_time, tick, lastIndex, oldestIndex, lastVolatilityCumulative);\r\n    return AdaptiveFee.getFee(volatilityAverage, feeConfig);\r\n  }\r\n\r\n  /// @dev pay for storage slots\r\n  function prepayTimepointsStorage(uint16 startIndex, uint16 amount) external {\r\n    require(!timepoints[startIndex].initialized);\r\n    require(amount > 0);\r\n\r\n    unchecked {\r\n      for (uint256 i = startIndex; i < startIndex + amount; ++i) {\r\n        timepoints[i].blockTimestamp = 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/MockTimeVirtualPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../interfaces/IAlgebraVirtualPool.sol';\r\n\r\ncontract MockTimeVirtualPool is IAlgebraVirtualPool {\r\n  uint32 public timestamp;\r\n\r\n  bool private isExist = true;\r\n  bool private isStarted = true;\r\n\r\n  int24 public currentTick;\r\n\r\n  function setIsExist(bool _isExist) external {\r\n    isExist = _isExist;\r\n  }\r\n\r\n  function setIsStarted(bool _isStarted) external {\r\n    isStarted = _isStarted;\r\n  }\r\n\r\n  function crossTo(int24 nextTick, bool zeroToOne) external override returns (bool) {\r\n    zeroToOne;\r\n    if (!isExist) return false;\r\n    currentTick = nextTick;\r\n    unchecked {\r\n      if (isStarted) timestamp = uint32(block.timestamp);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"
    },
    "contracts/test/PriceMovementMathEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/PriceMovementMath.sol';\r\nimport '../libraries/TickMath.sol';\r\n\r\ncontract PriceMovementMathEchidnaTest {\r\n  function checkmovePriceTowardsTargetInvariants(\r\n    uint160 sqrtPriceRaw,\r\n    uint160 sqrtPriceTargetRaw,\r\n    uint128 liquidity,\r\n    int256 amountRemaining,\r\n    uint16 feePips\r\n  ) external pure {\r\n    require(sqrtPriceRaw > 0);\r\n    require(sqrtPriceTargetRaw > 0);\r\n    require(feePips > 0);\r\n    require(feePips < 1e6);\r\n\r\n    (uint160 sqrtQ, uint256 amountIn, uint256 amountOut, uint256 feeAmount) = PriceMovementMath.movePriceTowardsTarget(\r\n      sqrtPriceTargetRaw <= sqrtPriceRaw,\r\n      sqrtPriceRaw,\r\n      sqrtPriceTargetRaw,\r\n      liquidity,\r\n      amountRemaining,\r\n      feePips\r\n    );\r\n\r\n    unchecked {\r\n      assert(amountIn <= type(uint256).max - feeAmount);\r\n\r\n      if (amountRemaining < 0) {\r\n        assert(amountOut <= uint256(-amountRemaining));\r\n      } else {\r\n        assert(amountIn + feeAmount <= uint256(amountRemaining));\r\n      }\r\n\r\n      if (sqrtPriceRaw == sqrtPriceTargetRaw) {\r\n        assert(amountIn == 0);\r\n        assert(amountOut == 0);\r\n        assert(feeAmount == 0);\r\n        assert(sqrtQ == sqrtPriceTargetRaw);\r\n      }\r\n\r\n      // didn't reach price target, entire amount must be consumed\r\n      if (sqrtQ != sqrtPriceTargetRaw) {\r\n        if (amountRemaining < 0) assert(amountOut == uint256(-amountRemaining));\r\n        else assert(amountIn + feeAmount == uint256(amountRemaining));\r\n      }\r\n\r\n      // next price is between price and price target\r\n      if (sqrtPriceTargetRaw <= sqrtPriceRaw) {\r\n        assert(sqrtQ <= sqrtPriceRaw);\r\n        assert(sqrtQ >= sqrtPriceTargetRaw);\r\n      } else {\r\n        assert(sqrtQ >= sqrtPriceRaw);\r\n        assert(sqrtQ <= sqrtPriceTargetRaw);\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/PriceMovementMathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../libraries/PriceMovementMath.sol';\r\nimport '../libraries/TickMath.sol';\r\n\r\ncontract PriceMovementMathTest {\r\n  function movePriceTowardsTarget(\r\n    uint160 sqrtP,\r\n    uint160 sqrtPTarget,\r\n    uint128 liquidity,\r\n    int256 amountRemaining,\r\n    uint16 feePips\r\n  ) external pure returns (uint160 sqrtQ, uint256 amountIn, uint256 amountOut, uint256 feeAmount) {\r\n    return PriceMovementMath.movePriceTowardsTarget(sqrtPTarget < sqrtP, sqrtP, sqrtPTarget, liquidity, amountRemaining, feePips);\r\n  }\r\n\r\n  function getGasCostOfmovePriceTowardsTarget(\r\n    uint160 sqrtP,\r\n    uint160 sqrtPTarget,\r\n    uint128 liquidity,\r\n    int256 amountRemaining,\r\n    uint16 feePips\r\n  ) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      PriceMovementMath.movePriceTowardsTarget(sqrtPTarget < sqrtP, sqrtP, sqrtPTarget, liquidity, amountRemaining, feePips);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/SafeMathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/LowGasSafeMath.sol';\r\nimport '../libraries/SafeCast.sol';\r\n\r\ncontract SafeMathTest {\r\n  function add(uint256 x, uint256 y) external pure returns (uint256 z) {\r\n    return LowGasSafeMath.add(x, y);\r\n  }\r\n\r\n  function sub(uint256 x, uint256 y) external pure returns (uint256 z) {\r\n    return LowGasSafeMath.sub(x, y);\r\n  }\r\n\r\n  function mul(uint256 x, uint256 y) external pure returns (uint256 z) {\r\n    return LowGasSafeMath.mul(x, y);\r\n  }\r\n\r\n  function addInt(int256 x, int256 y) external pure returns (int256 z) {\r\n    return LowGasSafeMath.add(x, y);\r\n  }\r\n\r\n  function subInt(int256 x, int256 y) external pure returns (int256 z) {\r\n    return LowGasSafeMath.sub(x, y);\r\n  }\r\n\r\n  function add128(uint128 x, uint128 y) external pure returns (uint128 z) {\r\n    return LowGasSafeMath.add128(x, y);\r\n  }\r\n\r\n  function toUint160(uint256 y) external pure returns (uint160 z) {\r\n    return SafeCast.toUint160(y);\r\n  }\r\n\r\n  function toInt128(int256 y) external pure returns (int128 z) {\r\n    return SafeCast.toInt128(y);\r\n  }\r\n\r\n  function toInt256(uint256 y) external pure returns (int256 z) {\r\n    return SafeCast.toInt256(y);\r\n  }\r\n}\r\n"
    },
    "contracts/test/simulation/SimulationTimeAlgebraPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../../AlgebraPool.sol';\r\nimport '../MockTimeDataStorageOperator.sol';\r\n\r\n// used for testing time dependent behavior\r\ncontract SimulationTimeAlgebraPool is AlgebraPool {\r\n  // Monday, October 5, 2020 9:00:00 AM GMT-05:00\r\n  uint256 public time = 1601906400;\r\n\r\n  function advanceTime(uint256 by) external {\r\n    time += by;\r\n  }\r\n\r\n  function _blockTimestamp() internal view override returns (uint32) {\r\n    return uint32(time);\r\n  }\r\n\r\n  function getAverageVolatility() external view returns (uint112 volatilityAverage) {\r\n    volatilityAverage = MockTimeDataStorageOperator(dataStorageOperator).getAverageVolatility(\r\n      _blockTimestamp(),\r\n      int24(uint24(globalState.fee)),\r\n      globalState.timepointIndex\r\n    );\r\n  }\r\n}\r\n"
    },
    "contracts/test/simulation/SimulationTimeFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.17;\npragma abicoder v2;\n\nimport '../../interfaces/IAlgebraFactory.sol';\nimport '../../interfaces/IAlgebraPoolDeployer.sol';\nimport '../../interfaces/IDataStorageOperator.sol';\nimport '../../base/AlgebraFeeConfiguration.sol';\nimport '../../libraries/Constants.sol';\nimport '../../libraries/AdaptiveFee.sol';\nimport '../../DataStorageOperator.sol';\n\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\n\n/**\n * @title Algebra factory for simulation\n * @notice Is used to deploy pools and its dataStorages\n */\ncontract SimulationTimeFactory is IAlgebraFactory, Ownable2Step, AccessControlEnumerable {\n  /// @inheritdoc IAlgebraFactory\n  bytes32 public constant override POOLS_ADMINISTRATOR_ROLE = keccak256('POOLS_ADMINISTRATOR');\n\n  /// @inheritdoc IAlgebraFactory\n  address public immutable override poolDeployer;\n\n  /// @inheritdoc IAlgebraFactory\n  address public override farmingAddress;\n\n  /// @inheritdoc IAlgebraFactory\n  address public override communityVault;\n\n  /// @inheritdoc IAlgebraFactory\n  uint8 public override defaultCommunityFee;\n\n  /// @inheritdoc IAlgebraFactory\n  uint256 public override renounceOwnershipStartTimestamp;\n\n  uint256 private constant RENOUNCE_OWNERSHIP_DELAY = 1 days;\n\n  // values of constants for sigmoids in fee calculation formula\n  AlgebraFeeConfiguration public defaultFeeConfiguration;\n  /// @inheritdoc IAlgebraFactory\n  mapping(address => mapping(address => address)) public override poolByPair;\n\n  constructor(address _poolDeployer, address _vaultAddress) {\n    poolDeployer = _poolDeployer;\n    communityVault = _vaultAddress;\n    defaultFeeConfiguration = AdaptiveFee.initialFeeConfiguration();\n  }\n\n  function owner() public view override(IAlgebraFactory, Ownable) returns (address) {\n    return super.owner();\n  }\n\n  /// @inheritdoc IAlgebraFactory\n  function hasRoleOrOwner(bytes32 role, address account) public view override returns (bool) {\n    return (owner() == account || super.hasRole(role, account));\n  }\n\n  /// @inheritdoc IAlgebraFactory\n  function createPool(address tokenA, address tokenB) external override returns (address pool) {\n    require(tokenA != tokenB);\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    require(token0 != address(0));\n    require(poolByPair[token0][token1] == address(0));\n\n    IDataStorageOperator dataStorage = new DataStorageOperator(computeAddress(token0, token1));\n    dataStorage.changeFeeConfiguration(defaultFeeConfiguration);\n\n    pool = IAlgebraPoolDeployer(poolDeployer).deploy(address(dataStorage), token0, token1);\n\n    poolByPair[token0][token1] = pool; // to avoid future addresses comparing we are populating the mapping twice\n    poolByPair[token1][token0] = pool;\n    emit Pool(token0, token1, pool);\n  }\n\n  /// @inheritdoc IAlgebraFactory\n  function startRenounceOwnership() external override onlyOwner {\n    renounceOwnershipStartTimestamp = block.timestamp;\n    emit RenounceOwnershipStart(renounceOwnershipStartTimestamp, renounceOwnershipStartTimestamp + RENOUNCE_OWNERSHIP_DELAY);\n  }\n\n  /// @inheritdoc IAlgebraFactory\n  function stopRenounceOwnership() external override onlyOwner {\n    require(renounceOwnershipStartTimestamp != 0);\n    renounceOwnershipStartTimestamp = 0;\n    emit RenounceOwnershipStop(block.timestamp);\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner if RENOUNCE_OWNERSHIP_DELAY seconds\n   * have passed since the call to the startRenounceOwnership() function.\n   *\n   * NOTE: Renouncing ownership will leave the factory without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public override onlyOwner {\n    require(block.timestamp - renounceOwnershipStartTimestamp >= RENOUNCE_OWNERSHIP_DELAY);\n    renounceOwnershipStartTimestamp = 0;\n\n    super.renounceOwnership();\n    emit RenounceOwnershipFinish(block.timestamp);\n  }\n\n  /// @inheritdoc IAlgebraFactory\n  function setFarmingAddress(address _farmingAddress) external override onlyOwner {\n    require(farmingAddress != _farmingAddress);\n    emit FarmingAddress(_farmingAddress);\n    farmingAddress = _farmingAddress;\n  }\n\n  function setVaultAddress(address _vaultAddress) external onlyOwner {\n    require(communityVault != _vaultAddress);\n    communityVault = _vaultAddress;\n  }\n\n  /// @inheritdoc IAlgebraFactory\n  function setDefaultFeeConfiguration(AlgebraFeeConfiguration calldata newConfig) external override onlyOwner {\n    AdaptiveFee.validateFeeConfiguration(newConfig);\n    defaultFeeConfiguration = newConfig;\n    emit DefaultFeeConfiguration(newConfig);\n  }\n\n  /// @inheritdoc IAlgebraFactory\n  function setDefaultCommunityFee(uint8 newDefaultCommunityFee) external override onlyOwner {\n    require(newDefaultCommunityFee <= Constants.MAX_COMMUNITY_FEE);\n    emit DefaultCommunityFee(newDefaultCommunityFee);\n    defaultCommunityFee = newDefaultCommunityFee;\n  }\n\n  bytes32 private constant POOL_INIT_CODE_HASH = 0xde1cc45ddb55afa7dde770cac78fa099ee2417260e3ad8a7a34a51d1b33bc73d;\n\n  /// @notice Deterministically computes the pool address given the token0 and token1\n  /// @param token0 first token\n  /// @param token1 second token\n  /// @return pool The contract address of the Algebra pool\n  function computeAddress(address token0, address token1) private view returns (address pool) {\n    pool = address(uint160(uint256(keccak256(abi.encodePacked(hex'ff', poolDeployer, keccak256(abi.encode(token0, token1)), POOL_INIT_CODE_HASH)))));\n  }\n}\n"
    },
    "contracts/test/TestAlgebraCallee.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../interfaces/IERC20Minimal.sol';\r\n\r\nimport '../libraries/SafeCast.sol';\r\nimport '../libraries/TickMath.sol';\r\n\r\nimport '../interfaces/callback/IAlgebraMintCallback.sol';\r\nimport '../interfaces/callback/IAlgebraSwapCallback.sol';\r\nimport '../interfaces/callback/IAlgebraFlashCallback.sol';\r\n\r\nimport '../interfaces/IAlgebraPool.sol';\r\n\r\nimport './LiquidityAmounts.sol';\r\n\r\ncontract TestAlgebraCallee is IAlgebraMintCallback, IAlgebraSwapCallback, IAlgebraFlashCallback {\r\n  using SafeCast for uint256;\r\n\r\n  function swapExact0For1(address pool, uint256 amount0In, address recipient, uint160 limitSqrtPrice) external {\r\n    IAlgebraPool(pool).swap(recipient, true, int256(amount0In), limitSqrtPrice, abi.encode(msg.sender));\r\n  }\r\n\r\n  function swapExact0For1SupportingFee(address pool, uint256 amount0In, address recipient, uint160 limitSqrtPrice) external {\r\n    IAlgebraPool(pool).swapSupportingFeeOnInputTokens(msg.sender, recipient, true, int256(amount0In), limitSqrtPrice, abi.encode(msg.sender));\r\n  }\r\n\r\n  function swap0ForExact1(address pool, uint256 amount1Out, address recipient, uint160 limitSqrtPrice) external {\r\n    unchecked {\r\n      IAlgebraPool(pool).swap(recipient, true, -amount1Out.toInt256(), limitSqrtPrice, abi.encode(msg.sender));\r\n    }\r\n  }\r\n\r\n  function swapExact1For0(address pool, uint256 amount1In, address recipient, uint160 limitSqrtPrice) external {\r\n    IAlgebraPool(pool).swap(recipient, false, int256(amount1In), limitSqrtPrice, abi.encode(msg.sender));\r\n  }\r\n\r\n  function swapExact1For0SupportingFee(address pool, uint256 amount1In, address recipient, uint160 limitSqrtPrice) external {\r\n    IAlgebraPool(pool).swapSupportingFeeOnInputTokens(msg.sender, recipient, false, int256(amount1In), limitSqrtPrice, abi.encode(msg.sender));\r\n  }\r\n\r\n  function swap1ForExact0(address pool, uint256 amount0Out, address recipient, uint160 limitSqrtPrice) external {\r\n    unchecked {\r\n      IAlgebraPool(pool).swap(recipient, false, -amount0Out.toInt256(), limitSqrtPrice, abi.encode(msg.sender));\r\n    }\r\n  }\r\n\r\n  function swapToLowerSqrtPrice(address pool, uint160 price, address recipient) external {\r\n    IAlgebraPool(pool).swap(recipient, true, type(int256).max, price, abi.encode(msg.sender));\r\n  }\r\n\r\n  function swapToHigherSqrtPrice(address pool, uint160 price, address recipient) external {\r\n    IAlgebraPool(pool).swap(recipient, false, type(int256).max, price, abi.encode(msg.sender));\r\n  }\r\n\r\n  event SwapCallback(int256 amount0Delta, int256 amount1Delta);\r\n\r\n  function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external override {\r\n    unchecked {\r\n      address sender = abi.decode(data, (address));\r\n\r\n      emit SwapCallback(amount0Delta, amount1Delta);\r\n\r\n      if (amount0Delta > 0) {\r\n        IERC20Minimal(IAlgebraPool(msg.sender).token0()).transferFrom(sender, msg.sender, uint256(amount0Delta));\r\n      } else if (amount1Delta > 0) {\r\n        IERC20Minimal(IAlgebraPool(msg.sender).token1()).transferFrom(sender, msg.sender, uint256(amount1Delta));\r\n      } else {\r\n        // if both are not gt 0, both must be 0.\r\n        assert(amount0Delta == 0 && amount1Delta == 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  event MintResult(uint256 amount0Owed, uint256 amount1Owed, uint256 resultLiquidity);\r\n\r\n  function mint(\r\n    address pool,\r\n    address recipient,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 amount\r\n  ) external returns (uint256 amount0Owed, uint256 amount1Owed, uint256 resultLiquidity) {\r\n    (amount0Owed, amount1Owed, resultLiquidity) = IAlgebraPool(pool).mint(msg.sender, recipient, bottomTick, topTick, amount, abi.encode(msg.sender));\r\n    emit MintResult(amount0Owed, amount1Owed, resultLiquidity);\r\n  }\r\n\r\n  function addLimitOrder(address pool, address recipient, int24 tick, uint128 amount) external {\r\n    IAlgebraPool(pool).mint(msg.sender, recipient, tick, tick, amount, abi.encode(msg.sender));\r\n  }\r\n\r\n  function decreaseLimitOrder(address pool, int24 tick, uint128 amount) external returns (uint256 amount0, uint256 amount1) {\r\n    return IAlgebraPool(pool).burn(tick, tick, amount);\r\n  }\r\n\r\n  function collectLimitOrder(address pool, address recipient, int24 tick) external returns (uint256 amount0, uint256 amount1) {\r\n    return IAlgebraPool(pool).collect(recipient, tick, tick, type(uint128).max, type(uint128).max);\r\n  }\r\n\r\n  function removeLimitOrder(address pool, address recipient, int24 tick) external returns (uint256 amount0, uint256 amount1) {\r\n    IAlgebraPool(pool).burn(tick, tick, 0);\r\n    (uint256 liquidityLeft, , , , ) = IAlgebraPool(pool).positions(getPositionKey(address(this), tick, tick));\r\n    liquidityLeft = liquidityLeft >> 128;\r\n    if (liquidityLeft > 0) {\r\n      IAlgebraPool(pool).burn(tick, tick, uint128(liquidityLeft));\r\n    }\r\n    return IAlgebraPool(pool).collect(recipient, tick, tick, type(uint128).max, type(uint128).max);\r\n  }\r\n\r\n  event MintCallback(uint256 amount0Owed, uint256 amount1Owed);\r\n\r\n  function algebraMintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external override {\r\n    address sender = abi.decode(data, (address));\r\n\r\n    if (amount0Owed > 0) IERC20Minimal(IAlgebraPool(msg.sender).token0()).transferFrom(sender, msg.sender, amount0Owed);\r\n    if (amount1Owed > 0) IERC20Minimal(IAlgebraPool(msg.sender).token1()).transferFrom(sender, msg.sender, amount1Owed);\r\n\r\n    emit MintCallback(amount0Owed, amount1Owed);\r\n  }\r\n\r\n  event FlashCallback(uint256 fee0, uint256 fee1);\r\n\r\n  function flash(address pool, address recipient, uint256 amount0, uint256 amount1, uint256 pay0, uint256 pay1) external {\r\n    IAlgebraPool(pool).flash(recipient, amount0, amount1, abi.encode(msg.sender, pay0, pay1));\r\n  }\r\n\r\n  function algebraFlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external override {\r\n    emit FlashCallback(fee0, fee1);\r\n\r\n    (address sender, uint256 pay0, uint256 pay1) = abi.decode(data, (address, uint256, uint256));\r\n\r\n    if (pay0 > 0) IERC20Minimal(IAlgebraPool(msg.sender).token0()).transferFrom(sender, msg.sender, pay0);\r\n    if (pay1 > 0) IERC20Minimal(IAlgebraPool(msg.sender).token1()).transferFrom(sender, msg.sender, pay1);\r\n  }\r\n\r\n  function getPositionKey(address owner, int24 bottomTick, int24 topTick) private pure returns (bytes32 key) {\r\n    assembly {\r\n      key := or(shl(24, or(shl(24, owner), and(bottomTick, 0xFFFFFF))), and(topTick, 0xFFFFFF))\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/TestAlgebraReentrantCallee.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/TickMath.sol';\r\n\r\nimport '../interfaces/callback/IAlgebraSwapCallback.sol';\r\n\r\nimport '../interfaces/IAlgebraPool.sol';\r\n\r\ncontract TestAlgebraReentrantCallee is IAlgebraSwapCallback {\r\n  bytes4 private constant desiredSelector = bytes4(keccak256(bytes('locked()')));\r\n\r\n  function swapToReenter(address pool) external {\r\n    unchecked {\r\n      IAlgebraPool(pool).swap(address(0), false, 1, TickMath.MAX_SQRT_RATIO - 1, new bytes(0));\r\n    }\r\n  }\r\n\r\n  function algebraSwapCallback(int256, int256, bytes calldata) external override {\r\n    // try to reenter swap\r\n    try IAlgebraPool(msg.sender).swap(address(0), false, 1, 0, new bytes(0)) {} catch (bytes memory reason) {\r\n      require(bytes4(reason) == desiredSelector);\r\n    }\r\n\r\n    // try to reenter swap supporting fee\r\n    try IAlgebraPool(msg.sender).swapSupportingFeeOnInputTokens(address(0), address(0), false, 1, 0, new bytes(0)) {} catch (bytes memory reason) {\r\n      require(bytes4(reason) == desiredSelector);\r\n    }\r\n\r\n    // try to reenter mint\r\n    try IAlgebraPool(msg.sender).mint(address(0), address(0), 0, 0, 0, new bytes(0)) {} catch (bytes memory reason) {\r\n      require(bytes4(reason) == desiredSelector);\r\n    }\r\n\r\n    // try to reenter collect\r\n    try IAlgebraPool(msg.sender).collect(address(0), 0, 0, 0, 0) {} catch (bytes memory reason) {\r\n      require(bytes4(reason) == desiredSelector);\r\n    }\r\n\r\n    // try to reenter burn\r\n    try IAlgebraPool(msg.sender).burn(0, 0, 0) {} catch (bytes memory reason) {\r\n      require(bytes4(reason) == desiredSelector);\r\n    }\r\n\r\n    // try to reenter flash\r\n    try IAlgebraPool(msg.sender).flash(address(0), 0, 0, new bytes(0)) {} catch (bytes memory reason) {\r\n      require(bytes4(reason) == desiredSelector);\r\n    }\r\n\r\n    require(false, 'Unable to reenter');\r\n  }\r\n}\r\n"
    },
    "contracts/test/TestAlgebraRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../libraries/SafeCast.sol';\r\nimport '../libraries/TickMath.sol';\r\n\r\nimport '../interfaces/IERC20Minimal.sol';\r\nimport '../interfaces/callback/IAlgebraSwapCallback.sol';\r\nimport '../interfaces/IAlgebraPool.sol';\r\n\r\ncontract TestAlgebraRouter is IAlgebraSwapCallback {\r\n  using SafeCast for uint256;\r\n\r\n  // flash swaps for an exact amount of token0 in the output pool\r\n  function swapForExact0Multi(address recipient, address poolInput, address poolOutput, uint256 amount0Out) external {\r\n    address[] memory pools = new address[](1);\r\n    pools[0] = poolInput;\r\n    unchecked {\r\n      IAlgebraPool(poolOutput).swap(recipient, false, -amount0Out.toInt256(), TickMath.MAX_SQRT_RATIO - 1, abi.encode(pools, msg.sender));\r\n    }\r\n  }\r\n\r\n  // flash swaps for an exact amount of token1 in the output pool\r\n  function swapForExact1Multi(address recipient, address poolInput, address poolOutput, uint256 amount1Out) external {\r\n    address[] memory pools = new address[](1);\r\n    pools[0] = poolInput;\r\n    unchecked {\r\n      IAlgebraPool(poolOutput).swap(recipient, true, -amount1Out.toInt256(), TickMath.MIN_SQRT_RATIO + 1, abi.encode(pools, msg.sender));\r\n    }\r\n  }\r\n\r\n  event SwapCallback(int256 amount0Delta, int256 amount1Delta);\r\n\r\n  function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) public override {\r\n    emit SwapCallback(amount0Delta, amount1Delta);\r\n\r\n    (address[] memory pools, address payer) = abi.decode(data, (address[], address));\r\n\r\n    if (pools.length == 1) {\r\n      // get the address and amount of the token that we need to pay\r\n      address tokenToBePaid = amount0Delta > 0 ? IAlgebraPool(msg.sender).token0() : IAlgebraPool(msg.sender).token1();\r\n      int256 amountToBePaid = amount0Delta > 0 ? amount0Delta : amount1Delta;\r\n\r\n      bool zeroToOne = tokenToBePaid == IAlgebraPool(pools[0]).token1();\r\n      unchecked {\r\n        IAlgebraPool(pools[0]).swap(\r\n          msg.sender,\r\n          zeroToOne,\r\n          -amountToBePaid,\r\n          zeroToOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1,\r\n          abi.encode(new address[](0), payer)\r\n        );\r\n      }\r\n    } else {\r\n      if (amount0Delta > 0) {\r\n        IERC20Minimal(IAlgebraPool(msg.sender).token0()).transferFrom(payer, msg.sender, uint256(amount0Delta));\r\n      } else {\r\n        IERC20Minimal(IAlgebraPool(msg.sender).token1()).transferFrom(payer, msg.sender, uint256(amount1Delta));\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/TestAlgebraSwapPay.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../interfaces/IERC20Minimal.sol';\r\n\r\nimport '../interfaces/callback/IAlgebraSwapCallback.sol';\r\nimport '../interfaces/callback/IAlgebraMintCallback.sol';\r\nimport '../interfaces/IAlgebraPool.sol';\r\n\r\ncontract TestAlgebraSwapPay is IAlgebraSwapCallback, IAlgebraMintCallback {\r\n  function swap(address pool, address recipient, bool zeroToOne, uint160 price, int256 amountSpecified, uint256 pay0, uint256 pay1) external {\r\n    IAlgebraPool(pool).swap(recipient, zeroToOne, amountSpecified, price, abi.encode(msg.sender, pay0, pay1));\r\n  }\r\n\r\n  function swapSupportingFee(\r\n    address pool,\r\n    address recipient,\r\n    bool zeroToOne,\r\n    uint160 price,\r\n    int256 amountSpecified,\r\n    uint256 pay0,\r\n    uint256 pay1\r\n  ) external {\r\n    IAlgebraPool(pool).swapSupportingFeeOnInputTokens(msg.sender, recipient, zeroToOne, amountSpecified, price, abi.encode(msg.sender, pay0, pay1));\r\n  }\r\n\r\n  function algebraSwapCallback(int256, int256, bytes calldata data) external override {\r\n    (address sender, uint256 pay0, uint256 pay1) = abi.decode(data, (address, uint256, uint256));\r\n\r\n    if (pay0 > 0) {\r\n      IERC20Minimal(IAlgebraPool(msg.sender).token0()).transferFrom(sender, msg.sender, uint256(pay0));\r\n    } else if (pay1 > 0) {\r\n      IERC20Minimal(IAlgebraPool(msg.sender).token1()).transferFrom(sender, msg.sender, uint256(pay1));\r\n    }\r\n  }\r\n\r\n  function mint(\r\n    address pool,\r\n    address recipient,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 amount,\r\n    uint256 pay0,\r\n    uint256 pay1\r\n  ) external returns (uint256 amount0Owed, uint256 amount1Owed, uint256 resultLiquidity) {\r\n    (amount0Owed, amount1Owed, resultLiquidity) = IAlgebraPool(pool).mint(\r\n      msg.sender,\r\n      recipient,\r\n      bottomTick,\r\n      topTick,\r\n      amount,\r\n      abi.encode(msg.sender, pay0, pay1)\r\n    );\r\n  }\r\n\r\n  function algebraMintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external override {\r\n    (address sender, uint256 pay0, uint256 pay1) = abi.decode(data, (address, uint256, uint256));\r\n\r\n    if (amount0Owed > 0) IERC20Minimal(IAlgebraPool(msg.sender).token0()).transferFrom(sender, msg.sender, pay0);\r\n    if (amount1Owed > 0) IERC20Minimal(IAlgebraPool(msg.sender).token1()).transferFrom(sender, msg.sender, pay1);\r\n  }\r\n}\r\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../interfaces/IERC20Minimal.sol';\r\n\r\ncontract TestERC20 is IERC20Minimal {\r\n  mapping(address => uint256) public override balanceOf;\r\n  mapping(address => mapping(address => uint256)) public override allowance;\r\n\r\n  constructor(uint256 amountToMint) {\r\n    mint(msg.sender, amountToMint);\r\n  }\r\n\r\n  function mint(address to, uint256 amount) public {\r\n    unchecked {\r\n      uint256 balanceNext = balanceOf[to] + amount;\r\n      require(balanceNext >= amount, 'overflow balance');\r\n      balanceOf[to] = balanceNext;\r\n    }\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    unchecked {\r\n      uint256 balanceBefore = balanceOf[msg.sender];\r\n      require(balanceBefore >= amount, 'insufficient balance');\r\n      balanceOf[msg.sender] = balanceBefore - amount;\r\n\r\n      uint256 balanceRecipient = balanceOf[recipient];\r\n      require(balanceRecipient + amount >= balanceRecipient, 'recipient balance overflow');\r\n      if (!isDeflationary) {\r\n        balanceOf[recipient] = balanceRecipient + amount;\r\n      } else {\r\n        balanceOf[recipient] = balanceRecipient + (amount - (amount * 5) / 100);\r\n      }\r\n\r\n      emit Transfer(msg.sender, recipient, amount);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external override returns (bool) {\r\n    allowance[msg.sender][spender] = amount;\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  bool isDeflationary = false;\r\n\r\n  function setDefl() external {\r\n    isDeflationary = true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    unchecked {\r\n      uint256 allowanceBefore = allowance[sender][msg.sender];\r\n      require(allowanceBefore >= amount, 'allowance insufficient');\r\n\r\n      allowance[sender][msg.sender] = allowanceBefore - amount;\r\n\r\n      uint256 balanceRecipient = balanceOf[recipient];\r\n      require(balanceRecipient + amount >= balanceRecipient, 'overflow balance recipient');\r\n      if (!isDeflationary) {\r\n        balanceOf[recipient] = balanceRecipient + amount;\r\n      } else {\r\n        balanceOf[recipient] = balanceRecipient + (amount - (amount * 5) / 100);\r\n      }\r\n      uint256 balanceSender = balanceOf[sender];\r\n      require(balanceSender >= amount, 'underflow balance sender');\r\n      balanceOf[sender] = balanceSender - amount;\r\n\r\n      emit Transfer(sender, recipient, amount);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/TickMathEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/TickMath.sol';\r\n\r\ncontract TickMathEchidnaTest {\r\n  // uniqueness and increasing order\r\n  function checkGetSqrtRatioAtTickInvariants(int24 tick) external pure {\r\n    unchecked {\r\n      uint160 ratio = TickMath.getSqrtRatioAtTick(tick);\r\n      assert(TickMath.getSqrtRatioAtTick(tick - 1) < ratio && ratio < TickMath.getSqrtRatioAtTick(tick + 1));\r\n      assert(ratio >= TickMath.MIN_SQRT_RATIO);\r\n      assert(ratio <= TickMath.MAX_SQRT_RATIO);\r\n    }\r\n  }\r\n\r\n  // the ratio is always between the returned tick and the returned tick+1\r\n  function checkGetTickAtSqrtRatioInvariants(uint160 ratio) external pure {\r\n    unchecked {\r\n      int24 tick = TickMath.getTickAtSqrtRatio(ratio);\r\n      assert(ratio >= TickMath.getSqrtRatioAtTick(tick) && ratio < TickMath.getSqrtRatioAtTick(tick + 1));\r\n      assert(tick >= TickMath.MIN_TICK);\r\n      assert(tick < TickMath.MAX_TICK);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/TickMathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../libraries/TickMath.sol';\r\n\r\ncontract TickMathTest {\r\n  function getSqrtRatioAtTick(int24 tick) external pure returns (uint160) {\r\n    return TickMath.getSqrtRatioAtTick(tick);\r\n  }\r\n\r\n  function getGasCostOfGetSqrtRatioAtTick(int24 tick) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      TickMath.getSqrtRatioAtTick(tick);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n\r\n  function getTickAtSqrtRatio(uint160 price) external pure returns (int24) {\r\n    return TickMath.getTickAtSqrtRatio(price);\r\n  }\r\n\r\n  function getGasCostOfGetTickAtSqrtRatio(uint160 price) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      TickMath.getTickAtSqrtRatio(price);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n\r\n  function MIN_SQRT_RATIO() external pure returns (uint160) {\r\n    return TickMath.MIN_SQRT_RATIO;\r\n  }\r\n\r\n  function MAX_SQRT_RATIO() external pure returns (uint160) {\r\n    return TickMath.MAX_SQRT_RATIO;\r\n  }\r\n}\r\n"
    },
    "contracts/test/TickOverflowSafetyEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/TickManagement.sol';\r\n\r\ncontract TickOverflowSafetyEchidnaTest {\r\n  using TickManagement for mapping(int24 => TickManagement.Tick);\r\n\r\n  int24 private constant MIN_TICK = -16;\r\n  int24 private constant MAX_TICK = 16;\r\n  uint128 private constant MAX_LIQUIDITY = type(uint128).max / 32;\r\n\r\n  mapping(int24 => TickManagement.Tick) private ticks;\r\n  int24 private tick = 0;\r\n\r\n  // used to track how much total liquidity has been added. should never be negative\r\n  int256 totalLiquidity = 0;\r\n  // half the cap of fee growth has happened, this can overflow\r\n  uint256 private totalFeeGrowth0Token = type(uint256).max / 2;\r\n  uint256 private totalFeeGrowth1Token = type(uint256).max / 2;\r\n  // how much total growth has happened, this cannot overflow\r\n  uint256 private totalGrowth0 = 0;\r\n  uint256 private totalGrowth1 = 0;\r\n\r\n  function increaseTotalFeeGrowth0Token(uint256 amount) external {\r\n    unchecked {\r\n      require(totalGrowth0 + amount > totalGrowth0); // overflow check\r\n      totalFeeGrowth0Token += amount; // overflow desired\r\n      totalGrowth0 += amount;\r\n    }\r\n  }\r\n\r\n  function increaseTotalFeeGrowth1Token(uint256 amount) external {\r\n    unchecked {\r\n      require(totalGrowth1 + amount > totalGrowth1); // overflow check\r\n      totalFeeGrowth1Token += amount; // overflow desired\r\n      totalGrowth1 += amount;\r\n    }\r\n  }\r\n\r\n  function setPosition(int24 bottomTick, int24 topTick, int128 liquidityDelta) external {\r\n    require(bottomTick > MIN_TICK);\r\n    require(topTick < MAX_TICK);\r\n    require(bottomTick < topTick);\r\n    bool flippedLower = ticks.update(bottomTick, tick, liquidityDelta, totalFeeGrowth0Token, totalFeeGrowth1Token, 0, uint32(block.timestamp), false);\r\n    bool flippedUpper = ticks.update(topTick, tick, liquidityDelta, totalFeeGrowth0Token, totalFeeGrowth1Token, 0, uint32(block.timestamp), true);\r\n\r\n    if (flippedLower) {\r\n      if (liquidityDelta < 0) {\r\n        assert(ticks[bottomTick].liquidityTotal == 0);\r\n        delete ticks[bottomTick];\r\n      } else assert(ticks[bottomTick].liquidityTotal > 0);\r\n    }\r\n\r\n    if (flippedUpper) {\r\n      if (liquidityDelta < 0) {\r\n        assert(ticks[topTick].liquidityTotal == 0);\r\n        delete ticks[topTick];\r\n      } else assert(ticks[topTick].liquidityTotal > 0);\r\n    }\r\n\r\n    unchecked {\r\n      totalLiquidity += liquidityDelta;\r\n      // requires should have prevented this\r\n      assert(totalLiquidity >= 0);\r\n\r\n      if (totalLiquidity == 0) {\r\n        totalGrowth0 = 0;\r\n        totalGrowth1 = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  function moveToTick(int24 target) external {\r\n    require(target > MIN_TICK);\r\n    require(target < MAX_TICK);\r\n    unchecked {\r\n      while (tick != target) {\r\n        if (tick < target) {\r\n          if (ticks[tick + 1].liquidityTotal > 0) ticks.cross(tick + 1, totalFeeGrowth0Token, totalFeeGrowth1Token, 0, uint32(block.timestamp));\r\n          tick++;\r\n        } else {\r\n          if (ticks[tick].liquidityTotal > 0) ticks.cross(tick, totalFeeGrowth0Token, totalFeeGrowth1Token, 0, uint32(block.timestamp));\r\n          tick--;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/TickTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v2;\r\n\r\nimport '../libraries/TickManagement.sol';\r\n\r\ncontract TickTest {\r\n  using TickManagement for mapping(int24 => TickManagement.Tick);\r\n\r\n  mapping(int24 => TickManagement.Tick) public ticks;\r\n\r\n  function setTick(int24 tick, TickManagement.Tick memory data) external {\r\n    ticks[tick] = data;\r\n  }\r\n\r\n  function getInnerFeeGrowth(\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    int24 currentTick,\r\n    uint256 totalFeeGrowth0Token,\r\n    uint256 totalFeeGrowth1Token\r\n  ) external view returns (uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token) {\r\n    return ticks.getInnerFeeGrowth(bottomTick, topTick, currentTick, totalFeeGrowth0Token, totalFeeGrowth1Token);\r\n  }\r\n\r\n  function update(\r\n    int24 tick,\r\n    int24 currentTick,\r\n    int128 liquidityDelta,\r\n    uint256 totalFeeGrowth0Token,\r\n    uint256 totalFeeGrowth1Token,\r\n    uint160 secondsPerLiquidityCumulative,\r\n    uint32 time,\r\n    bool upper\r\n  ) external returns (bool flipped) {\r\n    return ticks.update(tick, currentTick, liquidityDelta, totalFeeGrowth0Token, totalFeeGrowth1Token, secondsPerLiquidityCumulative, time, upper);\r\n  }\r\n\r\n  function clear(int24 tick) external {\r\n    delete ticks[tick];\r\n  }\r\n\r\n  function cross(\r\n    int24 tick,\r\n    uint256 totalFeeGrowth0Token,\r\n    uint256 totalFeeGrowth1Token,\r\n    uint160 secondsPerLiquidityCumulative,\r\n    uint32 timestamp\r\n  ) external returns (int128 liquidityDelta) {\r\n    return ticks.cross(tick, totalFeeGrowth0Token, totalFeeGrowth1Token, secondsPerLiquidityCumulative, timestamp);\r\n  }\r\n}\r\n"
    },
    "contracts/test/TickTreeEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../libraries/TickTree.sol';\r\n\r\ncontract TickTreeEchidnaTest {\r\n  using TickTree for mapping(int16 => uint256);\r\n  uint256 private word;\r\n\r\n  mapping(int16 => uint256) private tickWordsTable;\r\n  mapping(int16 => uint256) private bitmap;\r\n\r\n  int24[] initedTicks;\r\n  mapping(int24 => uint256) initedTicksIndexes;\r\n\r\n  int24 private constant TICK_SPACING = 60;\r\n\r\n  // returns whether the given tick is initialized\r\n  function _isInitialized(int24 tick) private view returns (bool) {\r\n    int16 rowNumber;\r\n    uint8 bitNumber;\r\n\r\n    assembly {\r\n      bitNumber := and(tick, 0xFF)\r\n      rowNumber := sar(8, tick)\r\n    }\r\n    uint256 word0 = bitmap[rowNumber];\r\n    unchecked {\r\n      return (word0 & (1 << bitNumber)) > 0;\r\n    }\r\n  }\r\n\r\n  function toggleTick(int24 tick) external {\r\n    unchecked {\r\n      tick = (tick / TICK_SPACING) * TICK_SPACING;\r\n      if (tick < TickMath.MIN_TICK) tick = TickMath.MIN_TICK;\r\n      if (tick > TickMath.MAX_TICK) tick = TickMath.MAX_TICK;\r\n      tick = (tick / TICK_SPACING) * TICK_SPACING;\r\n\r\n      assert(tick >= TickMath.MIN_TICK);\r\n      assert(tick <= TickMath.MAX_TICK);\r\n      bool before = _isInitialized(tick);\r\n      word = bitmap.toggleTick(tickWordsTable, tick, word);\r\n      assert(_isInitialized(tick) == !before);\r\n\r\n      if (!before) {\r\n        initedTicks.push(tick);\r\n        initedTicksIndexes[tick] = initedTicks.length - 1;\r\n      } else {\r\n        uint256 index = initedTicksIndexes[tick];\r\n        if (index != initedTicks.length - 1) {\r\n          int24 last = initedTicks[initedTicks.length - 1];\r\n          initedTicks[index] = last;\r\n          initedTicksIndexes[last] = index;\r\n        }\r\n        initedTicks.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  function _findNextTickInArray(int24 start) private view returns (int24 num, bool found) {\r\n    uint256 length = initedTicks.length;\r\n    if (length == 0) return (TickMath.MAX_TICK, false);\r\n    num = TickMath.MAX_TICK;\r\n    unchecked {\r\n      for (uint256 i; i < length; ++i) {\r\n        int24 tick = initedTicks[i];\r\n        if (tick > start) {\r\n          if (tick <= num) {\r\n            num = tick;\r\n            found = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkNextInitializedTickInvariants(int24 tick) external view {\r\n    unchecked {\r\n      tick = (tick / TICK_SPACING) * TICK_SPACING;\r\n      if (tick < TickMath.MIN_TICK) tick = TickMath.MIN_TICK;\r\n      if (tick > TickMath.MAX_TICK) tick = TickMath.MAX_TICK;\r\n      tick = (tick / TICK_SPACING) * TICK_SPACING;\r\n\r\n      int24 next = bitmap.getNextTick(tickWordsTable, word, tick);\r\n\r\n      assert(next > tick);\r\n      assert((next - tick) <= 2 * TickMath.MAX_TICK);\r\n      assert(next >= TickMath.MIN_TICK);\r\n      assert(next <= TickMath.MAX_TICK);\r\n      if (next != TickMath.MAX_TICK) assert(_isInitialized(next));\r\n      // all the ticks between the input tick and the next tick should be uninitialized\r\n      (int24 nextInited, bool found) = _findNextTickInArray(tick);\r\n      assert(nextInited == next);\r\n      assert(_isInitialized(next) == found);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/TickTreeTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../libraries/TickTree.sol';\r\n\r\ncontract TickTreeTest {\r\n  using TickTree for mapping(int16 => uint256);\r\n  uint256 public word;\r\n\r\n  mapping(int16 => uint256) public tickWordsTable;\r\n  mapping(int16 => uint256) public tickTree;\r\n\r\n  function toggleTick(int24 tick) external {\r\n    word = tickTree.toggleTick(tickWordsTable, tick, word);\r\n    (tickWordsTable, tick, word);\r\n  }\r\n\r\n  function _isInitTick(int24 tick) private view returns (bool) {\r\n    int16 rowNumber;\r\n    uint8 bitNumber;\r\n\r\n    assembly {\r\n      bitNumber := and(tick, 0xFF)\r\n      rowNumber := sar(8, tick)\r\n    }\r\n\r\n    return ((tickTree[rowNumber] & (1 << bitNumber)) > 0);\r\n  }\r\n\r\n  function getGasCostOfFlipTick(int24 tick) external returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      word = tickTree.toggleTick(tickWordsTable, tick, word);\r\n      (tickWordsTable, tick, word);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n\r\n  function nextTickInTheSameNode(int24 tick) external view returns (int24 next, bool initialized) {\r\n    next = tickTree.getNextTick(tickWordsTable, word, tick);\r\n    initialized = _isInitTick(next);\r\n  }\r\n\r\n  function getGasCostOfNextTickInTheSameNode(int24 tick) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      tickTree.getNextTick(tickWordsTable, word, tick);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n\r\n  // returns whether the given tick is initialized\r\n  function isInitialized(int24 tick) external view returns (bool) {\r\n    return _isInitTick(tick);\r\n  }\r\n}\r\n"
    },
    "contracts/test/TokenDeltaMathEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/FullMath.sol';\r\nimport '../libraries/TokenDeltaMath.sol';\r\nimport '../libraries/PriceMovementMath.sol';\r\nimport '../libraries/Constants.sol';\r\n\r\ncontract TokenDeltaMathEchidnaTest {\r\n  function mulDivRoundingUpInvariants(uint256 x, uint256 y, uint256 z) external pure {\r\n    unchecked {\r\n      require(z > 0);\r\n      uint256 notRoundedUp = FullMath.mulDiv(x, y, z);\r\n      uint256 roundedUp = FullMath.mulDivRoundingUp(x, y, z);\r\n      assert(roundedUp >= notRoundedUp);\r\n      assert(roundedUp - notRoundedUp < 2);\r\n      if (roundedUp - notRoundedUp == 1) {\r\n        assert(mulmod(x, y, z) > 0);\r\n      } else {\r\n        assert(mulmod(x, y, z) == 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getNextSqrtPriceFromInputInvariants(uint160 sqrtP, uint128 liquidity, uint256 amountIn, bool zeroToOne) external pure {\r\n    uint160 sqrtQ = PriceMovementMath.getNewPriceAfterInput(sqrtP, liquidity, amountIn, zeroToOne);\r\n\r\n    if (zeroToOne) {\r\n      assert(sqrtQ <= sqrtP);\r\n      assert(amountIn >= TokenDeltaMath.getToken0Delta(sqrtQ, sqrtP, liquidity, true));\r\n    } else {\r\n      assert(sqrtQ >= sqrtP);\r\n      assert(amountIn >= TokenDeltaMath.getToken1Delta(sqrtP, sqrtQ, liquidity, true));\r\n    }\r\n  }\r\n\r\n  function getNextSqrtPriceFromOutputInvariants(uint160 sqrtP, uint128 liquidity, uint256 amountOut, bool zeroToOne) external pure {\r\n    uint160 sqrtQ = PriceMovementMath.getNewPriceAfterOutput(sqrtP, liquidity, amountOut, zeroToOne);\r\n\r\n    if (zeroToOne) {\r\n      assert(sqrtQ <= sqrtP);\r\n      assert(amountOut <= TokenDeltaMath.getToken1Delta(sqrtQ, sqrtP, liquidity, false));\r\n    } else {\r\n      assert(sqrtQ > 0); // this has to be true, otherwise we need another require\r\n      assert(sqrtQ >= sqrtP);\r\n      assert(amountOut <= TokenDeltaMath.getToken0Delta(sqrtP, sqrtQ, liquidity, false));\r\n    }\r\n  }\r\n\r\n  function getNextSqrtPriceFromAmount0RoundingUpInvariants(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add) external pure {\r\n    require(sqrtPX96 > 0);\r\n    require(liquidity > 0);\r\n\r\n    uint160 sqrtQX96;\r\n\r\n    if (add) {\r\n      sqrtQX96 = PriceMovementMath.getNewPriceAfterInput(sqrtPX96, liquidity, amount, true);\r\n    } else {\r\n      sqrtQX96 = PriceMovementMath.getNewPriceAfterOutput(sqrtPX96, liquidity, amount, false);\r\n    }\r\n\r\n    if (add) {\r\n      assert(sqrtQX96 <= sqrtPX96);\r\n    } else {\r\n      assert(sqrtQX96 >= sqrtPX96);\r\n    }\r\n\r\n    if (amount == 0) {\r\n      assert(sqrtPX96 == sqrtQX96);\r\n    }\r\n  }\r\n\r\n  function getNextSqrtPriceFromAmount1RoundingDownInvariants(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add) external pure {\r\n    require(sqrtPX96 > 0);\r\n    require(liquidity > 0);\r\n    uint160 sqrtQX96;\r\n\r\n    if (add) {\r\n      sqrtQX96 = PriceMovementMath.getNewPriceAfterInput(sqrtPX96, liquidity, amount, false);\r\n    } else {\r\n      sqrtQX96 = PriceMovementMath.getNewPriceAfterOutput(sqrtPX96, liquidity, amount, true);\r\n    }\r\n\r\n    if (add) {\r\n      assert(sqrtQX96 >= sqrtPX96);\r\n    } else {\r\n      assert(sqrtQX96 <= sqrtPX96);\r\n    }\r\n\r\n    if (amount == 0) {\r\n      assert(sqrtPX96 == sqrtQX96);\r\n    }\r\n  }\r\n\r\n  function getToken0DeltaInvariants(uint160 sqrtP, uint160 sqrtQ, uint128 liquidity) external pure {\r\n    require(sqrtP > 0 && sqrtQ > 0);\r\n    if (sqrtP < sqrtQ) (sqrtP, sqrtQ) = (sqrtQ, sqrtP);\r\n    uint256 amount0Down = TokenDeltaMath.getToken0Delta(sqrtQ, sqrtP, liquidity, false);\r\n\r\n    uint256 amount0Up = TokenDeltaMath.getToken0Delta(sqrtQ, sqrtP, liquidity, true);\r\n\r\n    assert(amount0Down <= amount0Up);\r\n    // diff is 0 or 1\r\n    unchecked {\r\n      assert(amount0Up - amount0Down < 2);\r\n    }\r\n  }\r\n\r\n  // ensure that chained division is always equal to the full-precision case for\r\n  // liquidity * (sqrt(P) - sqrt(Q)) / (sqrt(P) * sqrt(Q))\r\n  function getToken0DeltaEquivalency(uint160 sqrtP, uint160 sqrtQ, uint128 liquidity, bool roundUp) external pure {\r\n    require(sqrtP >= sqrtQ);\r\n    require(sqrtP > 0 && sqrtQ > 0);\r\n    unchecked {\r\n      require((sqrtP * sqrtQ) / sqrtP == sqrtQ);\r\n    }\r\n\r\n    unchecked {\r\n      uint256 numerator1 = uint256(liquidity) << Constants.RESOLUTION;\r\n      uint256 numerator2 = sqrtP - sqrtQ;\r\n      uint256 denominator = uint256(sqrtP) * sqrtQ;\r\n\r\n      uint256 safeResult = roundUp\r\n        ? FullMath.mulDivRoundingUp(numerator1, numerator2, denominator)\r\n        : FullMath.mulDiv(numerator1, numerator2, denominator);\r\n      uint256 fullResult = TokenDeltaMath.getToken0Delta(sqrtQ, sqrtP, liquidity, roundUp);\r\n\r\n      assert(safeResult == fullResult);\r\n    }\r\n  }\r\n\r\n  function getToken1DeltaInvariants(uint160 sqrtP, uint160 sqrtQ, uint128 liquidity) external pure {\r\n    require(sqrtP > 0 && sqrtQ > 0);\r\n    if (sqrtP > sqrtQ) (sqrtP, sqrtQ) = (sqrtQ, sqrtP);\r\n\r\n    uint256 amount1Down = TokenDeltaMath.getToken1Delta(sqrtP, sqrtQ, liquidity, false);\r\n\r\n    uint256 amount1Up = TokenDeltaMath.getToken1Delta(sqrtP, sqrtQ, liquidity, true);\r\n\r\n    assert(amount1Down <= amount1Up);\r\n    // diff is 0 or 1\r\n    unchecked {\r\n      assert(amount1Up - amount1Down < 2);\r\n    }\r\n  }\r\n\r\n  function getToken0DeltaSignedInvariants(uint160 sqrtP, uint160 sqrtQ, int128 liquidity) external pure {\r\n    require(sqrtP > 0 && sqrtQ > 0);\r\n\r\n    int256 amount0 = TokenDeltaMath.getToken0Delta(sqrtQ, sqrtP, liquidity);\r\n    if (liquidity < 0) assert(amount0 <= 0);\r\n    if (liquidity > 0) {\r\n      if (sqrtP == sqrtQ) assert(amount0 == 0);\r\n      else assert(amount0 > 0);\r\n    }\r\n    if (liquidity == 0) assert(amount0 == 0);\r\n  }\r\n\r\n  function getToken1DeltaSignedInvariants(uint160 sqrtP, uint160 sqrtQ, int128 liquidity) external pure {\r\n    require(sqrtP > 0 && sqrtQ > 0);\r\n\r\n    int256 amount1 = TokenDeltaMath.getToken1Delta(sqrtP, sqrtQ, liquidity);\r\n    if (liquidity < 0) assert(amount1 <= 0);\r\n    if (liquidity > 0) {\r\n      if (sqrtP == sqrtQ) assert(amount1 == 0);\r\n      else assert(amount1 > 0);\r\n    }\r\n    if (liquidity == 0) assert(amount1 == 0);\r\n  }\r\n\r\n  function getOutOfRangeMintInvariants(uint160 sqrtA, uint160 sqrtB, int128 liquidity) external pure {\r\n    require(sqrtA > 0 && sqrtB > 0);\r\n    require(liquidity > 0);\r\n\r\n    int256 amount0 = TokenDeltaMath.getToken0Delta(sqrtA, sqrtB, liquidity);\r\n    int256 amount1 = TokenDeltaMath.getToken1Delta(sqrtA, sqrtB, liquidity);\r\n\r\n    if (sqrtA == sqrtB) {\r\n      assert(amount0 == 0);\r\n      assert(amount1 == 0);\r\n    } else {\r\n      assert(amount0 > 0);\r\n      assert(amount1 > 0);\r\n    }\r\n  }\r\n\r\n  function getInRangeMintInvariants(uint160 sqrtLower, uint160 sqrtCurrent, uint160 sqrtUpper, int128 liquidity) external pure {\r\n    require(sqrtLower > 0);\r\n    require(sqrtLower < sqrtUpper);\r\n    require(sqrtLower <= sqrtCurrent && sqrtCurrent <= sqrtUpper);\r\n    require(liquidity > 0);\r\n\r\n    int256 amount0 = TokenDeltaMath.getToken0Delta(sqrtCurrent, sqrtUpper, liquidity);\r\n    int256 amount1 = TokenDeltaMath.getToken1Delta(sqrtLower, sqrtCurrent, liquidity);\r\n\r\n    assert(amount0 > 0 || amount1 > 0);\r\n  }\r\n}\r\n"
    },
    "contracts/test/TokenDeltaMathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\npragma abicoder v1;\r\n\r\nimport '../libraries/TokenDeltaMath.sol';\r\nimport '../libraries/PriceMovementMath.sol';\r\n\r\ncontract TokenDeltaMathTest {\r\n  function getNewPriceAfterInput(uint160 sqrtP, uint128 liquidity, uint256 amountIn, bool zeroToOne) external pure returns (uint160 sqrtQ) {\r\n    return PriceMovementMath.getNewPriceAfterInput(sqrtP, liquidity, amountIn, zeroToOne);\r\n  }\r\n\r\n  function getGasCostOfGetNewPriceAfterInput(uint160 sqrtP, uint128 liquidity, uint256 amountIn, bool zeroToOne) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      PriceMovementMath.getNewPriceAfterInput(sqrtP, liquidity, amountIn, zeroToOne);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n\r\n  function getNewPriceAfterOutput(uint160 sqrtP, uint128 liquidity, uint256 amountOut, bool zeroToOne) external pure returns (uint160 sqrtQ) {\r\n    return PriceMovementMath.getNewPriceAfterOutput(sqrtP, liquidity, amountOut, zeroToOne);\r\n  }\r\n\r\n  function getGasCostOfGetNewPriceAfterOutput(uint160 sqrtP, uint128 liquidity, uint256 amountOut, bool zeroToOne) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      PriceMovementMath.getNewPriceAfterOutput(sqrtP, liquidity, amountOut, zeroToOne);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n\r\n  function getToken0Delta(uint160 sqrtLower, uint160 sqrtUpper, uint128 liquidity, bool roundUp) external pure returns (uint256 amount0) {\r\n    return TokenDeltaMath.getToken0Delta(sqrtLower, sqrtUpper, liquidity, roundUp);\r\n  }\r\n\r\n  function getToken1Delta(uint160 sqrtLower, uint160 sqrtUpper, uint128 liquidity, bool roundUp) external pure returns (uint256 amount1) {\r\n    return TokenDeltaMath.getToken1Delta(sqrtLower, sqrtUpper, liquidity, roundUp);\r\n  }\r\n\r\n  function getGasCostOfGetToken0Delta(uint160 sqrtLower, uint160 sqrtUpper, uint128 liquidity, bool roundUp) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      TokenDeltaMath.getToken0Delta(sqrtLower, sqrtUpper, liquidity, roundUp);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n\r\n  function getGasCostOfGetToken1Delta(uint160 sqrtLower, uint160 sqrtUpper, uint128 liquidity, bool roundUp) external view returns (uint256) {\r\n    unchecked {\r\n      uint256 gasBefore = gasleft();\r\n      TokenDeltaMath.getToken1Delta(sqrtLower, sqrtUpper, liquidity, roundUp);\r\n      return gasBefore - gasleft();\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/UnsafeMathEchidnaTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.17;\r\n\r\nimport '../libraries/FullMath.sol';\r\n\r\ncontract UnsafeMathEchidnaTest {\r\n  function checkDivRoundingUp(uint256 x, uint256 d) external pure {\r\n    unchecked {\r\n      require(d > 0);\r\n      uint256 z = FullMath.unsafeDivRoundingUp(x, d);\r\n      uint256 diff = z - (x / d);\r\n      if (x % d == 0) {\r\n        assert(diff == 0);\r\n      } else {\r\n        assert(diff == 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}